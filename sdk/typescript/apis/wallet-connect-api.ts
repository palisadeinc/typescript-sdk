/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2Connection } from '../models';
// @ts-ignore
import type { WalletConnectServiceCreateConnectionRequest } from '../models';
/**
 * WalletConnectApi - axios parameter creator
 * @export
 */
export const WalletConnectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept a wallet connect connection by ID
         * @summary Accept a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceAcceptConnection: async (vaultId: string, walletId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('walletConnectServiceAcceptConnection', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('walletConnectServiceAcceptConnection', 'walletId', walletId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('walletConnectServiceAcceptConnection', 'id', id)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/connections/{id}/accept`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Proposes a new wallet connect connection using the provided URI
         * @summary Propose a new wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {WalletConnectServiceCreateConnectionRequest} walletConnectServiceCreateConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceCreateConnection: async (vaultId: string, walletId: string, walletConnectServiceCreateConnectionRequest: WalletConnectServiceCreateConnectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('walletConnectServiceCreateConnection', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('walletConnectServiceCreateConnection', 'walletId', walletId)
            // verify required parameter 'walletConnectServiceCreateConnectionRequest' is not null or undefined
            assertParamExists('walletConnectServiceCreateConnection', 'walletConnectServiceCreateConnectionRequest', walletConnectServiceCreateConnectionRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/connections`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletConnectServiceCreateConnectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disconnects a wallet connect connection by ID
         * @summary Disconnects a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceDisconnectConnection: async (vaultId: string, walletId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('walletConnectServiceDisconnectConnection', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('walletConnectServiceDisconnectConnection', 'walletId', walletId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('walletConnectServiceDisconnectConnection', 'id', id)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/connections/{id}/disconnect`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a wallet connect connection by ID
         * @summary Get a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceGetConnection: async (vaultId: string, walletId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('walletConnectServiceGetConnection', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('walletConnectServiceGetConnection', 'walletId', walletId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('walletConnectServiceGetConnection', 'id', id)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/connections/{id}`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all wallet connect connections for the wallet
         * @summary List connections for the wallet
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {WalletConnectServiceListConnectionsStatusEnum} status The connection status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceListConnections: async (vaultId: string, walletId: string, status: WalletConnectServiceListConnectionsStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('walletConnectServiceListConnections', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('walletConnectServiceListConnections', 'walletId', walletId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('walletConnectServiceListConnections', 'status', status)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/connections`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all wallet connect connections for the organization
         * @summary List connections for the organization
         * @param {WalletConnectServiceListGlobalConnectionsStatusEnum} status The connection status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceListGlobalConnections: async (status: WalletConnectServiceListGlobalConnectionsStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('walletConnectServiceListGlobalConnections', 'status', status)
            const localVarPath = `/v2/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reject a wallet connect connection by ID
         * @summary Reject a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceRejectConnection: async (vaultId: string, walletId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('walletConnectServiceRejectConnection', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('walletConnectServiceRejectConnection', 'walletId', walletId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('walletConnectServiceRejectConnection', 'id', id)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/connections/{id}/reject`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletConnectApi - functional programming interface
 * @export
 */
export const WalletConnectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletConnectApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept a wallet connect connection by ID
         * @summary Accept a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletConnectServiceAcceptConnection(vaultId: string, walletId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Connection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletConnectServiceAcceptConnection(vaultId, walletId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletConnectApi.walletConnectServiceAcceptConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Proposes a new wallet connect connection using the provided URI
         * @summary Propose a new wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {WalletConnectServiceCreateConnectionRequest} walletConnectServiceCreateConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletConnectServiceCreateConnection(vaultId: string, walletId: string, walletConnectServiceCreateConnectionRequest: WalletConnectServiceCreateConnectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Connection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletConnectServiceCreateConnection(vaultId, walletId, walletConnectServiceCreateConnectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletConnectApi.walletConnectServiceCreateConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Disconnects a wallet connect connection by ID
         * @summary Disconnects a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletConnectServiceDisconnectConnection(vaultId: string, walletId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Connection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletConnectServiceDisconnectConnection(vaultId, walletId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletConnectApi.walletConnectServiceDisconnectConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a wallet connect connection by ID
         * @summary Get a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletConnectServiceGetConnection(vaultId: string, walletId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Connection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletConnectServiceGetConnection(vaultId, walletId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletConnectApi.walletConnectServiceGetConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all wallet connect connections for the wallet
         * @summary List connections for the wallet
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {WalletConnectServiceListConnectionsStatusEnum} status The connection status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletConnectServiceListConnections(vaultId: string, walletId: string, status: WalletConnectServiceListConnectionsStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Connection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletConnectServiceListConnections(vaultId, walletId, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletConnectApi.walletConnectServiceListConnections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all wallet connect connections for the organization
         * @summary List connections for the organization
         * @param {WalletConnectServiceListGlobalConnectionsStatusEnum} status The connection status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletConnectServiceListGlobalConnections(status: WalletConnectServiceListGlobalConnectionsStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Connection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletConnectServiceListGlobalConnections(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletConnectApi.walletConnectServiceListGlobalConnections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reject a wallet connect connection by ID
         * @summary Reject a wallet connect connection
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} walletId The wallet ID that the connection is associated with
         * @param {string} id The connection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletConnectServiceRejectConnection(vaultId: string, walletId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Connection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletConnectServiceRejectConnection(vaultId, walletId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletConnectApi.walletConnectServiceRejectConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletConnectApi - factory interface
 * @export
 */
export const WalletConnectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletConnectApiFp(configuration)
    return {
        /**
         * Accept a wallet connect connection by ID
         * @summary Accept a wallet connect connection
         * @param {WalletConnectApiWalletConnectServiceAcceptConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceAcceptConnection(requestParameters: WalletConnectApiWalletConnectServiceAcceptConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Connection> {
            return localVarFp.walletConnectServiceAcceptConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Proposes a new wallet connect connection using the provided URI
         * @summary Propose a new wallet connect connection
         * @param {WalletConnectApiWalletConnectServiceCreateConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceCreateConnection(requestParameters: WalletConnectApiWalletConnectServiceCreateConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Connection> {
            return localVarFp.walletConnectServiceCreateConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.walletConnectServiceCreateConnectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Disconnects a wallet connect connection by ID
         * @summary Disconnects a wallet connect connection
         * @param {WalletConnectApiWalletConnectServiceDisconnectConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceDisconnectConnection(requestParameters: WalletConnectApiWalletConnectServiceDisconnectConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Connection> {
            return localVarFp.walletConnectServiceDisconnectConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a wallet connect connection by ID
         * @summary Get a wallet connect connection
         * @param {WalletConnectApiWalletConnectServiceGetConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceGetConnection(requestParameters: WalletConnectApiWalletConnectServiceGetConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Connection> {
            return localVarFp.walletConnectServiceGetConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all wallet connect connections for the wallet
         * @summary List connections for the wallet
         * @param {WalletConnectApiWalletConnectServiceListConnectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceListConnections(requestParameters: WalletConnectApiWalletConnectServiceListConnectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Connection>> {
            return localVarFp.walletConnectServiceListConnections(requestParameters.vaultId, requestParameters.walletId, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * List all wallet connect connections for the organization
         * @summary List connections for the organization
         * @param {WalletConnectApiWalletConnectServiceListGlobalConnectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceListGlobalConnections(requestParameters: WalletConnectApiWalletConnectServiceListGlobalConnectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Connection>> {
            return localVarFp.walletConnectServiceListGlobalConnections(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * Reject a wallet connect connection by ID
         * @summary Reject a wallet connect connection
         * @param {WalletConnectApiWalletConnectServiceRejectConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletConnectServiceRejectConnection(requestParameters: WalletConnectApiWalletConnectServiceRejectConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Connection> {
            return localVarFp.walletConnectServiceRejectConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for walletConnectServiceAcceptConnection operation in WalletConnectApi.
 * @export
 * @interface WalletConnectApiWalletConnectServiceAcceptConnectionRequest
 */
export interface WalletConnectApiWalletConnectServiceAcceptConnectionRequest {
    /**
     * The vault ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceAcceptConnection
     */
    readonly vaultId: string

    /**
     * The wallet ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceAcceptConnection
     */
    readonly walletId: string

    /**
     * The connection ID
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceAcceptConnection
     */
    readonly id: string
}

/**
 * Request parameters for walletConnectServiceCreateConnection operation in WalletConnectApi.
 * @export
 * @interface WalletConnectApiWalletConnectServiceCreateConnectionRequest
 */
export interface WalletConnectApiWalletConnectServiceCreateConnectionRequest {
    /**
     * The vault ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceCreateConnection
     */
    readonly vaultId: string

    /**
     * The wallet ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceCreateConnection
     */
    readonly walletId: string

    /**
     * 
     * @type {WalletConnectServiceCreateConnectionRequest}
     * @memberof WalletConnectApiWalletConnectServiceCreateConnection
     */
    readonly walletConnectServiceCreateConnectionRequest: WalletConnectServiceCreateConnectionRequest
}

/**
 * Request parameters for walletConnectServiceDisconnectConnection operation in WalletConnectApi.
 * @export
 * @interface WalletConnectApiWalletConnectServiceDisconnectConnectionRequest
 */
export interface WalletConnectApiWalletConnectServiceDisconnectConnectionRequest {
    /**
     * The vault ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceDisconnectConnection
     */
    readonly vaultId: string

    /**
     * The wallet ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceDisconnectConnection
     */
    readonly walletId: string

    /**
     * The connection ID
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceDisconnectConnection
     */
    readonly id: string
}

/**
 * Request parameters for walletConnectServiceGetConnection operation in WalletConnectApi.
 * @export
 * @interface WalletConnectApiWalletConnectServiceGetConnectionRequest
 */
export interface WalletConnectApiWalletConnectServiceGetConnectionRequest {
    /**
     * The vault ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceGetConnection
     */
    readonly vaultId: string

    /**
     * The wallet ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceGetConnection
     */
    readonly walletId: string

    /**
     * The connection ID
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceGetConnection
     */
    readonly id: string
}

/**
 * Request parameters for walletConnectServiceListConnections operation in WalletConnectApi.
 * @export
 * @interface WalletConnectApiWalletConnectServiceListConnectionsRequest
 */
export interface WalletConnectApiWalletConnectServiceListConnectionsRequest {
    /**
     * The vault ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceListConnections
     */
    readonly vaultId: string

    /**
     * The wallet ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceListConnections
     */
    readonly walletId: string

    /**
     * The connection status
     * @type {'CREATED' | 'PROPOSING' | 'PROPOSED' | 'CONNECTED' | 'DISCONNECTED' | 'REJECTED' | 'UNSUPPORTED' | 'EXPIRED' | 'ERROR'}
     * @memberof WalletConnectApiWalletConnectServiceListConnections
     */
    readonly status: WalletConnectServiceListConnectionsStatusEnum
}

/**
 * Request parameters for walletConnectServiceListGlobalConnections operation in WalletConnectApi.
 * @export
 * @interface WalletConnectApiWalletConnectServiceListGlobalConnectionsRequest
 */
export interface WalletConnectApiWalletConnectServiceListGlobalConnectionsRequest {
    /**
     * The connection status
     * @type {'CREATED' | 'PROPOSING' | 'PROPOSED' | 'CONNECTED' | 'DISCONNECTED' | 'REJECTED' | 'UNSUPPORTED' | 'EXPIRED' | 'ERROR'}
     * @memberof WalletConnectApiWalletConnectServiceListGlobalConnections
     */
    readonly status: WalletConnectServiceListGlobalConnectionsStatusEnum
}

/**
 * Request parameters for walletConnectServiceRejectConnection operation in WalletConnectApi.
 * @export
 * @interface WalletConnectApiWalletConnectServiceRejectConnectionRequest
 */
export interface WalletConnectApiWalletConnectServiceRejectConnectionRequest {
    /**
     * The vault ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceRejectConnection
     */
    readonly vaultId: string

    /**
     * The wallet ID that the connection is associated with
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceRejectConnection
     */
    readonly walletId: string

    /**
     * The connection ID
     * @type {string}
     * @memberof WalletConnectApiWalletConnectServiceRejectConnection
     */
    readonly id: string
}

/**
 * WalletConnectApi - object-oriented interface
 * @export
 * @class WalletConnectApi
 * @extends {BaseAPI}
 */
export class WalletConnectApi extends BaseAPI {
    /**
     * Accept a wallet connect connection by ID
     * @summary Accept a wallet connect connection
     * @param {WalletConnectApiWalletConnectServiceAcceptConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletConnectApi
     */
    public walletConnectServiceAcceptConnection(requestParameters: WalletConnectApiWalletConnectServiceAcceptConnectionRequest, options?: RawAxiosRequestConfig) {
        return WalletConnectApiFp(this.configuration).walletConnectServiceAcceptConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Proposes a new wallet connect connection using the provided URI
     * @summary Propose a new wallet connect connection
     * @param {WalletConnectApiWalletConnectServiceCreateConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletConnectApi
     */
    public walletConnectServiceCreateConnection(requestParameters: WalletConnectApiWalletConnectServiceCreateConnectionRequest, options?: RawAxiosRequestConfig) {
        return WalletConnectApiFp(this.configuration).walletConnectServiceCreateConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.walletConnectServiceCreateConnectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disconnects a wallet connect connection by ID
     * @summary Disconnects a wallet connect connection
     * @param {WalletConnectApiWalletConnectServiceDisconnectConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletConnectApi
     */
    public walletConnectServiceDisconnectConnection(requestParameters: WalletConnectApiWalletConnectServiceDisconnectConnectionRequest, options?: RawAxiosRequestConfig) {
        return WalletConnectApiFp(this.configuration).walletConnectServiceDisconnectConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a wallet connect connection by ID
     * @summary Get a wallet connect connection
     * @param {WalletConnectApiWalletConnectServiceGetConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletConnectApi
     */
    public walletConnectServiceGetConnection(requestParameters: WalletConnectApiWalletConnectServiceGetConnectionRequest, options?: RawAxiosRequestConfig) {
        return WalletConnectApiFp(this.configuration).walletConnectServiceGetConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all wallet connect connections for the wallet
     * @summary List connections for the wallet
     * @param {WalletConnectApiWalletConnectServiceListConnectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletConnectApi
     */
    public walletConnectServiceListConnections(requestParameters: WalletConnectApiWalletConnectServiceListConnectionsRequest, options?: RawAxiosRequestConfig) {
        return WalletConnectApiFp(this.configuration).walletConnectServiceListConnections(requestParameters.vaultId, requestParameters.walletId, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all wallet connect connections for the organization
     * @summary List connections for the organization
     * @param {WalletConnectApiWalletConnectServiceListGlobalConnectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletConnectApi
     */
    public walletConnectServiceListGlobalConnections(requestParameters: WalletConnectApiWalletConnectServiceListGlobalConnectionsRequest, options?: RawAxiosRequestConfig) {
        return WalletConnectApiFp(this.configuration).walletConnectServiceListGlobalConnections(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reject a wallet connect connection by ID
     * @summary Reject a wallet connect connection
     * @param {WalletConnectApiWalletConnectServiceRejectConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletConnectApi
     */
    public walletConnectServiceRejectConnection(requestParameters: WalletConnectApiWalletConnectServiceRejectConnectionRequest, options?: RawAxiosRequestConfig) {
        return WalletConnectApiFp(this.configuration).walletConnectServiceRejectConnection(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const WalletConnectServiceListConnectionsStatusEnum = {
    Created: 'CREATED',
    Proposing: 'PROPOSING',
    Proposed: 'PROPOSED',
    Connected: 'CONNECTED',
    Disconnected: 'DISCONNECTED',
    Rejected: 'REJECTED',
    Unsupported: 'UNSUPPORTED',
    Expired: 'EXPIRED',
    Error: 'ERROR'
} as const;
export type WalletConnectServiceListConnectionsStatusEnum = typeof WalletConnectServiceListConnectionsStatusEnum[keyof typeof WalletConnectServiceListConnectionsStatusEnum];
/**
 * @export
 */
export const WalletConnectServiceListGlobalConnectionsStatusEnum = {
    Created: 'CREATED',
    Proposing: 'PROPOSING',
    Proposed: 'PROPOSED',
    Connected: 'CONNECTED',
    Disconnected: 'DISCONNECTED',
    Rejected: 'REJECTED',
    Unsupported: 'UNSUPPORTED',
    Expired: 'EXPIRED',
    Error: 'ERROR'
} as const;
export type WalletConnectServiceListGlobalConnectionsStatusEnum = typeof WalletConnectServiceListGlobalConnectionsStatusEnum[keyof typeof WalletConnectServiceListGlobalConnectionsStatusEnum];
