/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2CreateVaultRequest } from '../models';
// @ts-ignore
import type { V2ListVaultsResponse } from '../models';
// @ts-ignore
import type { V2Vault } from '../models';
// @ts-ignore
import type { VaultServiceUpdateVaultRequest } from '../models';
/**
 * VaultsApi - axios parameter creator
 * @export
 */
export const VaultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new vault
         * @summary Create a vault
         * @param {V2CreateVaultRequest} v2CreateVaultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceCreateVault: async (v2CreateVaultRequest: V2CreateVaultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateVaultRequest' is not null or undefined
            assertParamExists('vaultServiceCreateVault', 'v2CreateVaultRequest', v2CreateVaultRequest)
            const localVarPath = `/v2/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateVaultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a vault by ID
         * @summary Get a vault
         * @param {string} id The vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetVault: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vaultServiceGetVault', 'id', id)
            const localVarPath = `/v2/vaults/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all vaults within the organization
         * @summary List vaults
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {string} [correlationId] Correlation ID for tracking various actions on the vault
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListVaults: async (pageSize?: number, pageToken?: string, correlationId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (correlationId !== undefined) {
                localVarQueryParameter['correlationId'] = correlationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a vault\'s name and description by ID
         * @summary Update a vault
         * @param {string} id The vault ID
         * @param {VaultServiceUpdateVaultRequest} vaultServiceUpdateVaultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceUpdateVault: async (id: string, vaultServiceUpdateVaultRequest: VaultServiceUpdateVaultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vaultServiceUpdateVault', 'id', id)
            // verify required parameter 'vaultServiceUpdateVaultRequest' is not null or undefined
            assertParamExists('vaultServiceUpdateVault', 'vaultServiceUpdateVaultRequest', vaultServiceUpdateVaultRequest)
            const localVarPath = `/v2/vaults/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaultServiceUpdateVaultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaultsApi - functional programming interface
 * @export
 */
export const VaultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VaultsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new vault
         * @summary Create a vault
         * @param {V2CreateVaultRequest} v2CreateVaultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceCreateVault(v2CreateVaultRequest: V2CreateVaultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Vault>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceCreateVault(v2CreateVaultRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultsApi.vaultServiceCreateVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a vault by ID
         * @summary Get a vault
         * @param {string} id The vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceGetVault(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Vault>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceGetVault(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultsApi.vaultServiceGetVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all vaults within the organization
         * @summary List vaults
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {string} [correlationId] Correlation ID for tracking various actions on the vault
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceListVaults(pageSize?: number, pageToken?: string, correlationId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListVaultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceListVaults(pageSize, pageToken, correlationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultsApi.vaultServiceListVaults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a vault\'s name and description by ID
         * @summary Update a vault
         * @param {string} id The vault ID
         * @param {VaultServiceUpdateVaultRequest} vaultServiceUpdateVaultRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceUpdateVault(id: string, vaultServiceUpdateVaultRequest: VaultServiceUpdateVaultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Vault>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceUpdateVault(id, vaultServiceUpdateVaultRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultsApi.vaultServiceUpdateVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VaultsApi - factory interface
 * @export
 */
export const VaultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VaultsApiFp(configuration)
    return {
        /**
         * Create a new vault
         * @summary Create a vault
         * @param {VaultsApiVaultServiceCreateVaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceCreateVault(requestParameters: VaultsApiVaultServiceCreateVaultRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Vault> {
            return localVarFp.vaultServiceCreateVault(requestParameters.v2CreateVaultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a vault by ID
         * @summary Get a vault
         * @param {VaultsApiVaultServiceGetVaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetVault(requestParameters: VaultsApiVaultServiceGetVaultRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Vault> {
            return localVarFp.vaultServiceGetVault(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all vaults within the organization
         * @summary List vaults
         * @param {VaultsApiVaultServiceListVaultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListVaults(requestParameters: VaultsApiVaultServiceListVaultsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListVaultsResponse> {
            return localVarFp.vaultServiceListVaults(requestParameters.pageSize, requestParameters.pageToken, requestParameters.correlationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a vault\'s name and description by ID
         * @summary Update a vault
         * @param {VaultsApiVaultServiceUpdateVaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceUpdateVault(requestParameters: VaultsApiVaultServiceUpdateVaultRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Vault> {
            return localVarFp.vaultServiceUpdateVault(requestParameters.id, requestParameters.vaultServiceUpdateVaultRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for vaultServiceCreateVault operation in VaultsApi.
 * @export
 * @interface VaultsApiVaultServiceCreateVaultRequest
 */
export interface VaultsApiVaultServiceCreateVaultRequest {
    /**
     * 
     * @type {V2CreateVaultRequest}
     * @memberof VaultsApiVaultServiceCreateVault
     */
    readonly v2CreateVaultRequest: V2CreateVaultRequest
}

/**
 * Request parameters for vaultServiceGetVault operation in VaultsApi.
 * @export
 * @interface VaultsApiVaultServiceGetVaultRequest
 */
export interface VaultsApiVaultServiceGetVaultRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof VaultsApiVaultServiceGetVault
     */
    readonly id: string
}

/**
 * Request parameters for vaultServiceListVaults operation in VaultsApi.
 * @export
 * @interface VaultsApiVaultServiceListVaultsRequest
 */
export interface VaultsApiVaultServiceListVaultsRequest {
    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof VaultsApiVaultServiceListVaults
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof VaultsApiVaultServiceListVaults
     */
    readonly pageToken?: string

    /**
     * Correlation ID for tracking various actions on the vault
     * @type {string}
     * @memberof VaultsApiVaultServiceListVaults
     */
    readonly correlationId?: string
}

/**
 * Request parameters for vaultServiceUpdateVault operation in VaultsApi.
 * @export
 * @interface VaultsApiVaultServiceUpdateVaultRequest
 */
export interface VaultsApiVaultServiceUpdateVaultRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof VaultsApiVaultServiceUpdateVault
     */
    readonly id: string

    /**
     * 
     * @type {VaultServiceUpdateVaultRequest}
     * @memberof VaultsApiVaultServiceUpdateVault
     */
    readonly vaultServiceUpdateVaultRequest: VaultServiceUpdateVaultRequest
}

/**
 * VaultsApi - object-oriented interface
 * @export
 * @class VaultsApi
 * @extends {BaseAPI}
 */
export class VaultsApi extends BaseAPI {
    /**
     * Create a new vault
     * @summary Create a vault
     * @param {VaultsApiVaultServiceCreateVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public vaultServiceCreateVault(requestParameters: VaultsApiVaultServiceCreateVaultRequest, options?: RawAxiosRequestConfig) {
        return VaultsApiFp(this.configuration).vaultServiceCreateVault(requestParameters.v2CreateVaultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a vault by ID
     * @summary Get a vault
     * @param {VaultsApiVaultServiceGetVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public vaultServiceGetVault(requestParameters: VaultsApiVaultServiceGetVaultRequest, options?: RawAxiosRequestConfig) {
        return VaultsApiFp(this.configuration).vaultServiceGetVault(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all vaults within the organization
     * @summary List vaults
     * @param {VaultsApiVaultServiceListVaultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public vaultServiceListVaults(requestParameters: VaultsApiVaultServiceListVaultsRequest = {}, options?: RawAxiosRequestConfig) {
        return VaultsApiFp(this.configuration).vaultServiceListVaults(requestParameters.pageSize, requestParameters.pageToken, requestParameters.correlationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a vault\'s name and description by ID
     * @summary Update a vault
     * @param {VaultsApiVaultServiceUpdateVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public vaultServiceUpdateVault(requestParameters: VaultsApiVaultServiceUpdateVaultRequest, options?: RawAxiosRequestConfig) {
        return VaultsApiFp(this.configuration).vaultServiceUpdateVault(requestParameters.id, requestParameters.vaultServiceUpdateVaultRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

