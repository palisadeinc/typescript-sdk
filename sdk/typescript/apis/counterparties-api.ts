/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CounterpartyServiceUpdateCounterpartyRequest } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2Counterparty } from '../models';
// @ts-ignore
import type { V2CreateCounterpartyRequest } from '../models';
// @ts-ignore
import type { V2ListCounterpartiesResponse } from '../models';
/**
 * CounterpartiesApi - axios parameter creator
 * @export
 */
export const CounterpartiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new counterparty
         * @summary Create counterparties
         * @param {V2CreateCounterpartyRequest} v2CreateCounterpartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceCreateCounterparty: async (v2CreateCounterpartyRequest: V2CreateCounterpartyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateCounterpartyRequest' is not null or undefined
            assertParamExists('counterpartyServiceCreateCounterparty', 'v2CreateCounterpartyRequest', v2CreateCounterpartyRequest)
            const localVarPath = `/v2/counterparties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateCounterpartyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a counterparty
         * @summary Delete counterparties
         * @param {string} id The counterparty ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceDeleteCounterparty: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('counterpartyServiceDeleteCounterparty', 'id', id)
            const localVarPath = `/v2/counterparties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a counterparty
         * @summary Get counterparties
         * @param {string} id The counterparty ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceGetCounterparty: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('counterpartyServiceGetCounterparty', 'id', id)
            const localVarPath = `/v2/counterparties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List counterparties
         * @summary List counterparties
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceListCounterparties: async (pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/counterparties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a counterparty
         * @summary Update counterparties
         * @param {string} id The counterparty ID
         * @param {CounterpartyServiceUpdateCounterpartyRequest} counterpartyServiceUpdateCounterpartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceUpdateCounterparty: async (id: string, counterpartyServiceUpdateCounterpartyRequest: CounterpartyServiceUpdateCounterpartyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('counterpartyServiceUpdateCounterparty', 'id', id)
            // verify required parameter 'counterpartyServiceUpdateCounterpartyRequest' is not null or undefined
            assertParamExists('counterpartyServiceUpdateCounterparty', 'counterpartyServiceUpdateCounterpartyRequest', counterpartyServiceUpdateCounterpartyRequest)
            const localVarPath = `/v2/counterparties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(counterpartyServiceUpdateCounterpartyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CounterpartiesApi - functional programming interface
 * @export
 */
export const CounterpartiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CounterpartiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new counterparty
         * @summary Create counterparties
         * @param {V2CreateCounterpartyRequest} v2CreateCounterpartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceCreateCounterparty(v2CreateCounterpartyRequest: V2CreateCounterpartyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Counterparty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceCreateCounterparty(v2CreateCounterpartyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounterpartiesApi.counterpartyServiceCreateCounterparty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a counterparty
         * @summary Delete counterparties
         * @param {string} id The counterparty ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceDeleteCounterparty(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceDeleteCounterparty(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounterpartiesApi.counterpartyServiceDeleteCounterparty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a counterparty
         * @summary Get counterparties
         * @param {string} id The counterparty ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceGetCounterparty(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Counterparty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceGetCounterparty(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounterpartiesApi.counterpartyServiceGetCounterparty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List counterparties
         * @summary List counterparties
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceListCounterparties(pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListCounterpartiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceListCounterparties(pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounterpartiesApi.counterpartyServiceListCounterparties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a counterparty
         * @summary Update counterparties
         * @param {string} id The counterparty ID
         * @param {CounterpartyServiceUpdateCounterpartyRequest} counterpartyServiceUpdateCounterpartyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceUpdateCounterparty(id: string, counterpartyServiceUpdateCounterpartyRequest: CounterpartyServiceUpdateCounterpartyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Counterparty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceUpdateCounterparty(id, counterpartyServiceUpdateCounterpartyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CounterpartiesApi.counterpartyServiceUpdateCounterparty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CounterpartiesApi - factory interface
 * @export
 */
export const CounterpartiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CounterpartiesApiFp(configuration)
    return {
        /**
         * Create a new counterparty
         * @summary Create counterparties
         * @param {CounterpartiesApiCounterpartyServiceCreateCounterpartyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceCreateCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceCreateCounterpartyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Counterparty> {
            return localVarFp.counterpartyServiceCreateCounterparty(requestParameters.v2CreateCounterpartyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a counterparty
         * @summary Delete counterparties
         * @param {CounterpartiesApiCounterpartyServiceDeleteCounterpartyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceDeleteCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceDeleteCounterpartyRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.counterpartyServiceDeleteCounterparty(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a counterparty
         * @summary Get counterparties
         * @param {CounterpartiesApiCounterpartyServiceGetCounterpartyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceGetCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceGetCounterpartyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Counterparty> {
            return localVarFp.counterpartyServiceGetCounterparty(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List counterparties
         * @summary List counterparties
         * @param {CounterpartiesApiCounterpartyServiceListCounterpartiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceListCounterparties(requestParameters: CounterpartiesApiCounterpartyServiceListCounterpartiesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListCounterpartiesResponse> {
            return localVarFp.counterpartyServiceListCounterparties(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a counterparty
         * @summary Update counterparties
         * @param {CounterpartiesApiCounterpartyServiceUpdateCounterpartyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceUpdateCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceUpdateCounterpartyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Counterparty> {
            return localVarFp.counterpartyServiceUpdateCounterparty(requestParameters.id, requestParameters.counterpartyServiceUpdateCounterpartyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for counterpartyServiceCreateCounterparty operation in CounterpartiesApi.
 * @export
 * @interface CounterpartiesApiCounterpartyServiceCreateCounterpartyRequest
 */
export interface CounterpartiesApiCounterpartyServiceCreateCounterpartyRequest {
    /**
     * 
     * @type {V2CreateCounterpartyRequest}
     * @memberof CounterpartiesApiCounterpartyServiceCreateCounterparty
     */
    readonly v2CreateCounterpartyRequest: V2CreateCounterpartyRequest
}

/**
 * Request parameters for counterpartyServiceDeleteCounterparty operation in CounterpartiesApi.
 * @export
 * @interface CounterpartiesApiCounterpartyServiceDeleteCounterpartyRequest
 */
export interface CounterpartiesApiCounterpartyServiceDeleteCounterpartyRequest {
    /**
     * The counterparty ID
     * @type {string}
     * @memberof CounterpartiesApiCounterpartyServiceDeleteCounterparty
     */
    readonly id: string
}

/**
 * Request parameters for counterpartyServiceGetCounterparty operation in CounterpartiesApi.
 * @export
 * @interface CounterpartiesApiCounterpartyServiceGetCounterpartyRequest
 */
export interface CounterpartiesApiCounterpartyServiceGetCounterpartyRequest {
    /**
     * The counterparty ID
     * @type {string}
     * @memberof CounterpartiesApiCounterpartyServiceGetCounterparty
     */
    readonly id: string
}

/**
 * Request parameters for counterpartyServiceListCounterparties operation in CounterpartiesApi.
 * @export
 * @interface CounterpartiesApiCounterpartyServiceListCounterpartiesRequest
 */
export interface CounterpartiesApiCounterpartyServiceListCounterpartiesRequest {
    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof CounterpartiesApiCounterpartyServiceListCounterparties
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof CounterpartiesApiCounterpartyServiceListCounterparties
     */
    readonly pageToken?: string
}

/**
 * Request parameters for counterpartyServiceUpdateCounterparty operation in CounterpartiesApi.
 * @export
 * @interface CounterpartiesApiCounterpartyServiceUpdateCounterpartyRequest
 */
export interface CounterpartiesApiCounterpartyServiceUpdateCounterpartyRequest {
    /**
     * The counterparty ID
     * @type {string}
     * @memberof CounterpartiesApiCounterpartyServiceUpdateCounterparty
     */
    readonly id: string

    /**
     * 
     * @type {CounterpartyServiceUpdateCounterpartyRequest}
     * @memberof CounterpartiesApiCounterpartyServiceUpdateCounterparty
     */
    readonly counterpartyServiceUpdateCounterpartyRequest: CounterpartyServiceUpdateCounterpartyRequest
}

/**
 * CounterpartiesApi - object-oriented interface
 * @export
 * @class CounterpartiesApi
 * @extends {BaseAPI}
 */
export class CounterpartiesApi extends BaseAPI {
    /**
     * Create a new counterparty
     * @summary Create counterparties
     * @param {CounterpartiesApiCounterpartyServiceCreateCounterpartyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartiesApi
     */
    public counterpartyServiceCreateCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceCreateCounterpartyRequest, options?: RawAxiosRequestConfig) {
        return CounterpartiesApiFp(this.configuration).counterpartyServiceCreateCounterparty(requestParameters.v2CreateCounterpartyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a counterparty
     * @summary Delete counterparties
     * @param {CounterpartiesApiCounterpartyServiceDeleteCounterpartyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartiesApi
     */
    public counterpartyServiceDeleteCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceDeleteCounterpartyRequest, options?: RawAxiosRequestConfig) {
        return CounterpartiesApiFp(this.configuration).counterpartyServiceDeleteCounterparty(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a counterparty
     * @summary Get counterparties
     * @param {CounterpartiesApiCounterpartyServiceGetCounterpartyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartiesApi
     */
    public counterpartyServiceGetCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceGetCounterpartyRequest, options?: RawAxiosRequestConfig) {
        return CounterpartiesApiFp(this.configuration).counterpartyServiceGetCounterparty(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List counterparties
     * @summary List counterparties
     * @param {CounterpartiesApiCounterpartyServiceListCounterpartiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartiesApi
     */
    public counterpartyServiceListCounterparties(requestParameters: CounterpartiesApiCounterpartyServiceListCounterpartiesRequest = {}, options?: RawAxiosRequestConfig) {
        return CounterpartiesApiFp(this.configuration).counterpartyServiceListCounterparties(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a counterparty
     * @summary Update counterparties
     * @param {CounterpartiesApiCounterpartyServiceUpdateCounterpartyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CounterpartiesApi
     */
    public counterpartyServiceUpdateCounterparty(requestParameters: CounterpartiesApiCounterpartyServiceUpdateCounterpartyRequest, options?: RawAxiosRequestConfig) {
        return CounterpartiesApiFp(this.configuration).counterpartyServiceUpdateCounterparty(requestParameters.id, requestParameters.counterpartyServiceUpdateCounterpartyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

