/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2GetOrgBalancesResponse } from '../models';
// @ts-ignore
import type { V2GetVaultBalancesResponse } from '../models';
// @ts-ignore
import type { V2GetWalletBalancesResponse } from '../models';
/**
 * BalancesApi - axios parameter creator
 * @export
 */
export const BalancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the balance of an organization
         * @summary Get Organization Balances
         * @param {string} [currencyCode] The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetOrgBalances: async (currencyCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the balances of a vault
         * @summary Get Vault Balances
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} [currencyCode] The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetVaultBalances: async (vaultId: string, currencyCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('balanceServiceGetVaultBalances', 'vaultId', vaultId)
            const localVarPath = `/v2/vaults/{vaultId}/balances`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the balances of a wallet
         * @summary Get Wallet Balances
         * @param {string} vaultId 
         * @param {string} walletId 
         * @param {string} [currencyCode] The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetWalletBalances: async (vaultId: string, walletId: string, currencyCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('balanceServiceGetWalletBalances', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('balanceServiceGetWalletBalances', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/balances`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BalancesApi - functional programming interface
 * @export
 */
export const BalancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BalancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the balance of an organization
         * @summary Get Organization Balances
         * @param {string} [currencyCode] The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceServiceGetOrgBalances(currencyCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetOrgBalancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceServiceGetOrgBalances(currencyCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BalancesApi.balanceServiceGetOrgBalances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the balances of a vault
         * @summary Get Vault Balances
         * @param {string} vaultId The vault ID that the connection is associated with
         * @param {string} [currencyCode] The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceServiceGetVaultBalances(vaultId: string, currencyCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetVaultBalancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceServiceGetVaultBalances(vaultId, currencyCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BalancesApi.balanceServiceGetVaultBalances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the balances of a wallet
         * @summary Get Wallet Balances
         * @param {string} vaultId 
         * @param {string} walletId 
         * @param {string} [currencyCode] The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceServiceGetWalletBalances(vaultId: string, walletId: string, currencyCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetWalletBalancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceServiceGetWalletBalances(vaultId, walletId, currencyCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BalancesApi.balanceServiceGetWalletBalances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BalancesApi - factory interface
 * @export
 */
export const BalancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BalancesApiFp(configuration)
    return {
        /**
         * Get the balance of an organization
         * @summary Get Organization Balances
         * @param {BalancesApiBalanceServiceGetOrgBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetOrgBalances(requestParameters: BalancesApiBalanceServiceGetOrgBalancesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2GetOrgBalancesResponse> {
            return localVarFp.balanceServiceGetOrgBalances(requestParameters.currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the balances of a vault
         * @summary Get Vault Balances
         * @param {BalancesApiBalanceServiceGetVaultBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetVaultBalances(requestParameters: BalancesApiBalanceServiceGetVaultBalancesRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2GetVaultBalancesResponse> {
            return localVarFp.balanceServiceGetVaultBalances(requestParameters.vaultId, requestParameters.currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the balances of a wallet
         * @summary Get Wallet Balances
         * @param {BalancesApiBalanceServiceGetWalletBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetWalletBalances(requestParameters: BalancesApiBalanceServiceGetWalletBalancesRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2GetWalletBalancesResponse> {
            return localVarFp.balanceServiceGetWalletBalances(requestParameters.vaultId, requestParameters.walletId, requestParameters.currencyCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for balanceServiceGetOrgBalances operation in BalancesApi.
 * @export
 * @interface BalancesApiBalanceServiceGetOrgBalancesRequest
 */
export interface BalancesApiBalanceServiceGetOrgBalancesRequest {
    /**
     * The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
     * @type {string}
     * @memberof BalancesApiBalanceServiceGetOrgBalances
     */
    readonly currencyCode?: string
}

/**
 * Request parameters for balanceServiceGetVaultBalances operation in BalancesApi.
 * @export
 * @interface BalancesApiBalanceServiceGetVaultBalancesRequest
 */
export interface BalancesApiBalanceServiceGetVaultBalancesRequest {
    /**
     * The vault ID that the connection is associated with
     * @type {string}
     * @memberof BalancesApiBalanceServiceGetVaultBalances
     */
    readonly vaultId: string

    /**
     * The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
     * @type {string}
     * @memberof BalancesApiBalanceServiceGetVaultBalances
     */
    readonly currencyCode?: string
}

/**
 * Request parameters for balanceServiceGetWalletBalances operation in BalancesApi.
 * @export
 * @interface BalancesApiBalanceServiceGetWalletBalancesRequest
 */
export interface BalancesApiBalanceServiceGetWalletBalancesRequest {
    /**
     * 
     * @type {string}
     * @memberof BalancesApiBalanceServiceGetWalletBalances
     */
    readonly vaultId: string

    /**
     * 
     * @type {string}
     * @memberof BalancesApiBalanceServiceGetWalletBalances
     */
    readonly walletId: string

    /**
     * The currency code to be used for the fiat value. When omitted, \&#39;USD\&#39; will be used.
     * @type {string}
     * @memberof BalancesApiBalanceServiceGetWalletBalances
     */
    readonly currencyCode?: string
}

/**
 * BalancesApi - object-oriented interface
 * @export
 * @class BalancesApi
 * @extends {BaseAPI}
 */
export class BalancesApi extends BaseAPI {
    /**
     * Get the balance of an organization
     * @summary Get Organization Balances
     * @param {BalancesApiBalanceServiceGetOrgBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancesApi
     */
    public balanceServiceGetOrgBalances(requestParameters: BalancesApiBalanceServiceGetOrgBalancesRequest = {}, options?: RawAxiosRequestConfig) {
        return BalancesApiFp(this.configuration).balanceServiceGetOrgBalances(requestParameters.currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the balances of a vault
     * @summary Get Vault Balances
     * @param {BalancesApiBalanceServiceGetVaultBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancesApi
     */
    public balanceServiceGetVaultBalances(requestParameters: BalancesApiBalanceServiceGetVaultBalancesRequest, options?: RawAxiosRequestConfig) {
        return BalancesApiFp(this.configuration).balanceServiceGetVaultBalances(requestParameters.vaultId, requestParameters.currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the balances of a wallet
     * @summary Get Wallet Balances
     * @param {BalancesApiBalanceServiceGetWalletBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancesApi
     */
    public balanceServiceGetWalletBalances(requestParameters: BalancesApiBalanceServiceGetWalletBalancesRequest, options?: RawAxiosRequestConfig) {
        return BalancesApiFp(this.configuration).balanceServiceGetWalletBalances(requestParameters.vaultId, requestParameters.walletId, requestParameters.currencyCode, options).then((request) => request(this.axios, this.basePath));
    }
}

