/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CounterpartyServiceCreateAddressRequest } from '../models';
// @ts-ignore
import type { Counterpartyv2Address } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2ListAddressesResponse } from '../models';
// @ts-ignore
import type { V2ListGlobalAddressesResponse } from '../models';
/**
 * AddressesApi - axios parameter creator
 * @export
 */
export const AddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new address
         * @summary Create addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {CounterpartyServiceCreateAddressRequest} counterpartyServiceCreateAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceCreateAddress: async (counterpartyId: string, counterpartyServiceCreateAddressRequest: CounterpartyServiceCreateAddressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counterpartyId' is not null or undefined
            assertParamExists('counterpartyServiceCreateAddress', 'counterpartyId', counterpartyId)
            // verify required parameter 'counterpartyServiceCreateAddressRequest' is not null or undefined
            assertParamExists('counterpartyServiceCreateAddress', 'counterpartyServiceCreateAddressRequest', counterpartyServiceCreateAddressRequest)
            const localVarPath = `/v2/counterparties/{counterpartyId}/addresses`
                .replace(`{${"counterpartyId"}}`, encodeURIComponent(String(counterpartyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(counterpartyServiceCreateAddressRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an address
         * @summary Delete addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {string} addressId The address ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceDeleteAddress: async (counterpartyId: string, addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counterpartyId' is not null or undefined
            assertParamExists('counterpartyServiceDeleteAddress', 'counterpartyId', counterpartyId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('counterpartyServiceDeleteAddress', 'addressId', addressId)
            const localVarPath = `/v2/counterparties/{counterpartyId}/addresses/{addressId}`
                .replace(`{${"counterpartyId"}}`, encodeURIComponent(String(counterpartyId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an address
         * @summary Get addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {string} addressId The address ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceGetAddress: async (counterpartyId: string, addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counterpartyId' is not null or undefined
            assertParamExists('counterpartyServiceGetAddress', 'counterpartyId', counterpartyId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('counterpartyServiceGetAddress', 'addressId', addressId)
            const localVarPath = `/v2/counterparties/{counterpartyId}/addresses/{addressId}`
                .replace(`{${"counterpartyId"}}`, encodeURIComponent(String(counterpartyId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all addresses within a counterparty
         * @summary List counterparty addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceListAddresses: async (counterpartyId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'counterpartyId' is not null or undefined
            assertParamExists('counterpartyServiceListAddresses', 'counterpartyId', counterpartyId)
            const localVarPath = `/v2/counterparties/{counterpartyId}/addresses`
                .replace(`{${"counterpartyId"}}`, encodeURIComponent(String(counterpartyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all addresses within the organization
         * @summary List organization addresses
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {string} [address] The on-chain address to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceListGlobalAddresses: async (pageSize?: number, pageToken?: string, address?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressesApi - functional programming interface
 * @export
 */
export const AddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new address
         * @summary Create addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {CounterpartyServiceCreateAddressRequest} counterpartyServiceCreateAddressRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceCreateAddress(counterpartyId: string, counterpartyServiceCreateAddressRequest: CounterpartyServiceCreateAddressRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Counterpartyv2Address>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceCreateAddress(counterpartyId, counterpartyServiceCreateAddressRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressesApi.counterpartyServiceCreateAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an address
         * @summary Delete addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {string} addressId The address ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceDeleteAddress(counterpartyId: string, addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceDeleteAddress(counterpartyId, addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressesApi.counterpartyServiceDeleteAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get an address
         * @summary Get addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {string} addressId The address ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceGetAddress(counterpartyId: string, addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Counterpartyv2Address>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceGetAddress(counterpartyId, addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressesApi.counterpartyServiceGetAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all addresses within a counterparty
         * @summary List counterparty addresses
         * @param {string} counterpartyId The counterparty ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceListAddresses(counterpartyId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceListAddresses(counterpartyId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressesApi.counterpartyServiceListAddresses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all addresses within the organization
         * @summary List organization addresses
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {string} [address] The on-chain address to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async counterpartyServiceListGlobalAddresses(pageSize?: number, pageToken?: string, address?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListGlobalAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.counterpartyServiceListGlobalAddresses(pageSize, pageToken, address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressesApi.counterpartyServiceListGlobalAddresses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AddressesApi - factory interface
 * @export
 */
export const AddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressesApiFp(configuration)
    return {
        /**
         * Create a new address
         * @summary Create addresses
         * @param {AddressesApiCounterpartyServiceCreateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceCreateAddress(requestParameters: AddressesApiCounterpartyServiceCreateAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<Counterpartyv2Address> {
            return localVarFp.counterpartyServiceCreateAddress(requestParameters.counterpartyId, requestParameters.counterpartyServiceCreateAddressRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an address
         * @summary Delete addresses
         * @param {AddressesApiCounterpartyServiceDeleteAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceDeleteAddress(requestParameters: AddressesApiCounterpartyServiceDeleteAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.counterpartyServiceDeleteAddress(requestParameters.counterpartyId, requestParameters.addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an address
         * @summary Get addresses
         * @param {AddressesApiCounterpartyServiceGetAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceGetAddress(requestParameters: AddressesApiCounterpartyServiceGetAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<Counterpartyv2Address> {
            return localVarFp.counterpartyServiceGetAddress(requestParameters.counterpartyId, requestParameters.addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all addresses within a counterparty
         * @summary List counterparty addresses
         * @param {AddressesApiCounterpartyServiceListAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceListAddresses(requestParameters: AddressesApiCounterpartyServiceListAddressesRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListAddressesResponse> {
            return localVarFp.counterpartyServiceListAddresses(requestParameters.counterpartyId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * List all addresses within the organization
         * @summary List organization addresses
         * @param {AddressesApiCounterpartyServiceListGlobalAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterpartyServiceListGlobalAddresses(requestParameters: AddressesApiCounterpartyServiceListGlobalAddressesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListGlobalAddressesResponse> {
            return localVarFp.counterpartyServiceListGlobalAddresses(requestParameters.pageSize, requestParameters.pageToken, requestParameters.address, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for counterpartyServiceCreateAddress operation in AddressesApi.
 * @export
 * @interface AddressesApiCounterpartyServiceCreateAddressRequest
 */
export interface AddressesApiCounterpartyServiceCreateAddressRequest {
    /**
     * The counterparty ID
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceCreateAddress
     */
    readonly counterpartyId: string

    /**
     * 
     * @type {CounterpartyServiceCreateAddressRequest}
     * @memberof AddressesApiCounterpartyServiceCreateAddress
     */
    readonly counterpartyServiceCreateAddressRequest: CounterpartyServiceCreateAddressRequest
}

/**
 * Request parameters for counterpartyServiceDeleteAddress operation in AddressesApi.
 * @export
 * @interface AddressesApiCounterpartyServiceDeleteAddressRequest
 */
export interface AddressesApiCounterpartyServiceDeleteAddressRequest {
    /**
     * The counterparty ID
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceDeleteAddress
     */
    readonly counterpartyId: string

    /**
     * The address ID
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceDeleteAddress
     */
    readonly addressId: string
}

/**
 * Request parameters for counterpartyServiceGetAddress operation in AddressesApi.
 * @export
 * @interface AddressesApiCounterpartyServiceGetAddressRequest
 */
export interface AddressesApiCounterpartyServiceGetAddressRequest {
    /**
     * The counterparty ID
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceGetAddress
     */
    readonly counterpartyId: string

    /**
     * The address ID
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceGetAddress
     */
    readonly addressId: string
}

/**
 * Request parameters for counterpartyServiceListAddresses operation in AddressesApi.
 * @export
 * @interface AddressesApiCounterpartyServiceListAddressesRequest
 */
export interface AddressesApiCounterpartyServiceListAddressesRequest {
    /**
     * The counterparty ID
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceListAddresses
     */
    readonly counterpartyId: string

    /**
     * The number of results to return per page (default 50, max 100)
     * @type {number}
     * @memberof AddressesApiCounterpartyServiceListAddresses
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceListAddresses
     */
    readonly pageToken?: string
}

/**
 * Request parameters for counterpartyServiceListGlobalAddresses operation in AddressesApi.
 * @export
 * @interface AddressesApiCounterpartyServiceListGlobalAddressesRequest
 */
export interface AddressesApiCounterpartyServiceListGlobalAddressesRequest {
    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof AddressesApiCounterpartyServiceListGlobalAddresses
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceListGlobalAddresses
     */
    readonly pageToken?: string

    /**
     * The on-chain address to search for
     * @type {string}
     * @memberof AddressesApiCounterpartyServiceListGlobalAddresses
     */
    readonly address?: string
}

/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
export class AddressesApi extends BaseAPI {
    /**
     * Create a new address
     * @summary Create addresses
     * @param {AddressesApiCounterpartyServiceCreateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public counterpartyServiceCreateAddress(requestParameters: AddressesApiCounterpartyServiceCreateAddressRequest, options?: RawAxiosRequestConfig) {
        return AddressesApiFp(this.configuration).counterpartyServiceCreateAddress(requestParameters.counterpartyId, requestParameters.counterpartyServiceCreateAddressRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an address
     * @summary Delete addresses
     * @param {AddressesApiCounterpartyServiceDeleteAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public counterpartyServiceDeleteAddress(requestParameters: AddressesApiCounterpartyServiceDeleteAddressRequest, options?: RawAxiosRequestConfig) {
        return AddressesApiFp(this.configuration).counterpartyServiceDeleteAddress(requestParameters.counterpartyId, requestParameters.addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an address
     * @summary Get addresses
     * @param {AddressesApiCounterpartyServiceGetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public counterpartyServiceGetAddress(requestParameters: AddressesApiCounterpartyServiceGetAddressRequest, options?: RawAxiosRequestConfig) {
        return AddressesApiFp(this.configuration).counterpartyServiceGetAddress(requestParameters.counterpartyId, requestParameters.addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all addresses within a counterparty
     * @summary List counterparty addresses
     * @param {AddressesApiCounterpartyServiceListAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public counterpartyServiceListAddresses(requestParameters: AddressesApiCounterpartyServiceListAddressesRequest, options?: RawAxiosRequestConfig) {
        return AddressesApiFp(this.configuration).counterpartyServiceListAddresses(requestParameters.counterpartyId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all addresses within the organization
     * @summary List organization addresses
     * @param {AddressesApiCounterpartyServiceListGlobalAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public counterpartyServiceListGlobalAddresses(requestParameters: AddressesApiCounterpartyServiceListGlobalAddressesRequest = {}, options?: RawAxiosRequestConfig) {
        return AddressesApiFp(this.configuration).counterpartyServiceListGlobalAddresses(requestParameters.pageSize, requestParameters.pageToken, requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }
}

