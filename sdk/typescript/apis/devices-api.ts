/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeviceServiceTrustOrganizationRequest } from '../models';
// @ts-ignore
import type { DeviceServiceUpdateDeviceApprovalStatusRequest } from '../models';
// @ts-ignore
import type { DeviceServiceUpdateDeviceDisplayNameRequest } from '../models';
// @ts-ignore
import type { DeviceServiceUpdateDeviceEnabledStatusRequest } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2AddDeviceMetadataRequest } from '../models';
// @ts-ignore
import type { V2CreateDeviceRequest } from '../models';
// @ts-ignore
import type { V2Device } from '../models';
// @ts-ignore
import type { V2GetDeviceCredentialsResponse } from '../models';
// @ts-ignore
import type { V2GetPushTokenResponse } from '../models';
// @ts-ignore
import type { V2PairDeviceWithCredentialRequest } from '../models';
// @ts-ignore
import type { V2PairingCredentials } from '../models';
// @ts-ignore
import type { V2SetDeviceVersionRequest } from '../models';
// @ts-ignore
import type { V2TrustedOrganization } from '../models';
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add key/value metadata to the device specified in the JWT
         * @summary Add device metadata
         * @param {V2AddDeviceMetadataRequest} v2AddDeviceMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceAddDeviceMetadata: async (v2AddDeviceMetadataRequest: V2AddDeviceMetadataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2AddDeviceMetadataRequest' is not null or undefined
            assertParamExists('deviceServiceAddDeviceMetadata', 'v2AddDeviceMetadataRequest', v2AddDeviceMetadataRequest)
            const localVarPath = `/v2/devices/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2AddDeviceMetadataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new device in your organization ready to pair with a physical device
         * @summary Create a new device
         * @param {V2CreateDeviceRequest} v2CreateDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceCreateDevice: async (v2CreateDeviceRequest: V2CreateDeviceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateDeviceRequest' is not null or undefined
            assertParamExists('deviceServiceCreateDevice', 'v2CreateDeviceRequest', v2CreateDeviceRequest)
            const localVarPath = `/v2/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific device by ID. This action can only be performed for unapproved devices at this time.
         * @summary Delete a device
         * @param {string} id The device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceDeleteDevice: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceServiceDeleteDevice', 'id', id)
            const localVarPath = `/v2/devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific device by ID
         * @summary Get a device
         * @param {string} id The device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetDevice: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceServiceGetDevice', 'id', id)
            const localVarPath = `/v2/devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get device credentials for the device specified in the JWT
         * @summary Get device credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetDeviceCredentials: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/devices/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a new set of pairing credentials for a device by ID
         * @summary Get device pairing credentials
         * @param {string} id The device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetDevicePairingCredentials: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceServiceGetDevicePairingCredentials', 'id', id)
            const localVarPath = `/v2/devices/{id}/pairing-credentials`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a new push notification token for the device specified in the JWT
         * @summary Get push notification token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetPushToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/devices/push-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the device specified in the JWT
         * @summary Get device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetSelf: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/devices/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all devices associated with a user or organization
         * @summary List all devices
         * @param {DeviceServiceListDevicesDeviceTypeEnum} deviceType The device type
         * @param {DeviceServiceListDevicesDeviceOwnerEnum} [deviceOwner] The device owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceListDevices: async (deviceType: DeviceServiceListDevicesDeviceTypeEnum, deviceOwner?: DeviceServiceListDevicesDeviceOwnerEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceType' is not null or undefined
            assertParamExists('deviceServiceListDevices', 'deviceType', deviceType)
            const localVarPath = `/v2/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (deviceType !== undefined) {
                localVarQueryParameter['deviceType'] = deviceType;
            }

            if (deviceOwner !== undefined) {
                localVarQueryParameter['deviceOwner'] = deviceOwner;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pair the device specified in the JWT
         * @summary Pair a device with an organization
         * @param {V2PairDeviceWithCredentialRequest} v2PairDeviceWithCredentialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServicePairDeviceWithCredential: async (v2PairDeviceWithCredentialRequest: V2PairDeviceWithCredentialRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2PairDeviceWithCredentialRequest' is not null or undefined
            assertParamExists('deviceServicePairDeviceWithCredential', 'v2PairDeviceWithCredentialRequest', v2PairDeviceWithCredentialRequest)
            const localVarPath = `/v2/devices/pair-with-credential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2PairDeviceWithCredentialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the version of the device specified in the JWT
         * @summary Set device version
         * @param {V2SetDeviceVersionRequest} v2SetDeviceVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceSetDeviceVersion: async (v2SetDeviceVersionRequest: V2SetDeviceVersionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2SetDeviceVersionRequest' is not null or undefined
            assertParamExists('deviceServiceSetDeviceVersion', 'v2SetDeviceVersionRequest', v2SetDeviceVersionRequest)
            const localVarPath = `/v2/devices/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2SetDeviceVersionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trust a new organization to use this device in it\'s controls
         * @summary Trust organization
         * @param {string} id The device ID
         * @param {DeviceServiceTrustOrganizationRequest} deviceServiceTrustOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceTrustOrganization: async (id: string, deviceServiceTrustOrganizationRequest: DeviceServiceTrustOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceServiceTrustOrganization', 'id', id)
            // verify required parameter 'deviceServiceTrustOrganizationRequest' is not null or undefined
            assertParamExists('deviceServiceTrustOrganization', 'deviceServiceTrustOrganizationRequest', deviceServiceTrustOrganizationRequest)
            const localVarPath = `/v2/devices/{id}/trust-organization`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceServiceTrustOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the approval status of a device by ID
         * @summary Update device approval status
         * @param {string} id The device ID
         * @param {DeviceServiceUpdateDeviceApprovalStatusRequest} deviceServiceUpdateDeviceApprovalStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceUpdateDeviceApprovalStatus: async (id: string, deviceServiceUpdateDeviceApprovalStatusRequest: DeviceServiceUpdateDeviceApprovalStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceServiceUpdateDeviceApprovalStatus', 'id', id)
            // verify required parameter 'deviceServiceUpdateDeviceApprovalStatusRequest' is not null or undefined
            assertParamExists('deviceServiceUpdateDeviceApprovalStatus', 'deviceServiceUpdateDeviceApprovalStatusRequest', deviceServiceUpdateDeviceApprovalStatusRequest)
            const localVarPath = `/v2/devices/{id}/approval-status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceServiceUpdateDeviceApprovalStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the display name of a device by ID
         * @summary Update device display name
         * @param {string} id The device ID
         * @param {DeviceServiceUpdateDeviceDisplayNameRequest} deviceServiceUpdateDeviceDisplayNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceUpdateDeviceDisplayName: async (id: string, deviceServiceUpdateDeviceDisplayNameRequest: DeviceServiceUpdateDeviceDisplayNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceServiceUpdateDeviceDisplayName', 'id', id)
            // verify required parameter 'deviceServiceUpdateDeviceDisplayNameRequest' is not null or undefined
            assertParamExists('deviceServiceUpdateDeviceDisplayName', 'deviceServiceUpdateDeviceDisplayNameRequest', deviceServiceUpdateDeviceDisplayNameRequest)
            const localVarPath = `/v2/devices/{id}/display-name`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceServiceUpdateDeviceDisplayNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the enabled status of a device by ID
         * @summary Update device enabled status
         * @param {string} id The device ID
         * @param {DeviceServiceUpdateDeviceEnabledStatusRequest} deviceServiceUpdateDeviceEnabledStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceUpdateDeviceEnabledStatus: async (id: string, deviceServiceUpdateDeviceEnabledStatusRequest: DeviceServiceUpdateDeviceEnabledStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceServiceUpdateDeviceEnabledStatus', 'id', id)
            // verify required parameter 'deviceServiceUpdateDeviceEnabledStatusRequest' is not null or undefined
            assertParamExists('deviceServiceUpdateDeviceEnabledStatus', 'deviceServiceUpdateDeviceEnabledStatusRequest', deviceServiceUpdateDeviceEnabledStatusRequest)
            const localVarPath = `/v2/devices/{id}/enabled-status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceServiceUpdateDeviceEnabledStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add key/value metadata to the device specified in the JWT
         * @summary Add device metadata
         * @param {V2AddDeviceMetadataRequest} v2AddDeviceMetadataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceAddDeviceMetadata(v2AddDeviceMetadataRequest: V2AddDeviceMetadataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceAddDeviceMetadata(v2AddDeviceMetadataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceAddDeviceMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new device in your organization ready to pair with a physical device
         * @summary Create a new device
         * @param {V2CreateDeviceRequest} v2CreateDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceCreateDevice(v2CreateDeviceRequest: V2CreateDeviceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceCreateDevice(v2CreateDeviceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceCreateDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific device by ID. This action can only be performed for unapproved devices at this time.
         * @summary Delete a device
         * @param {string} id The device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceDeleteDevice(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceDeleteDevice(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceDeleteDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific device by ID
         * @summary Get a device
         * @param {string} id The device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceGetDevice(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceGetDevice(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceGetDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get device credentials for the device specified in the JWT
         * @summary Get device credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceGetDeviceCredentials(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetDeviceCredentialsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceGetDeviceCredentials(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceGetDeviceCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a new set of pairing credentials for a device by ID
         * @summary Get device pairing credentials
         * @param {string} id The device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceGetDevicePairingCredentials(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2PairingCredentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceGetDevicePairingCredentials(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceGetDevicePairingCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a new push notification token for the device specified in the JWT
         * @summary Get push notification token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceGetPushToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetPushTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceGetPushToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceGetPushToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the device specified in the JWT
         * @summary Get device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceGetSelf(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceGetSelf(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceGetSelf']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all devices associated with a user or organization
         * @summary List all devices
         * @param {DeviceServiceListDevicesDeviceTypeEnum} deviceType The device type
         * @param {DeviceServiceListDevicesDeviceOwnerEnum} [deviceOwner] The device owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceListDevices(deviceType: DeviceServiceListDevicesDeviceTypeEnum, deviceOwner?: DeviceServiceListDevicesDeviceOwnerEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Device>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceListDevices(deviceType, deviceOwner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceListDevices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pair the device specified in the JWT
         * @summary Pair a device with an organization
         * @param {V2PairDeviceWithCredentialRequest} v2PairDeviceWithCredentialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServicePairDeviceWithCredential(v2PairDeviceWithCredentialRequest: V2PairDeviceWithCredentialRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServicePairDeviceWithCredential(v2PairDeviceWithCredentialRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServicePairDeviceWithCredential']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the version of the device specified in the JWT
         * @summary Set device version
         * @param {V2SetDeviceVersionRequest} v2SetDeviceVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceSetDeviceVersion(v2SetDeviceVersionRequest: V2SetDeviceVersionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceSetDeviceVersion(v2SetDeviceVersionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceSetDeviceVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trust a new organization to use this device in it\'s controls
         * @summary Trust organization
         * @param {string} id The device ID
         * @param {DeviceServiceTrustOrganizationRequest} deviceServiceTrustOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceTrustOrganization(id: string, deviceServiceTrustOrganizationRequest: DeviceServiceTrustOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2TrustedOrganization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceTrustOrganization(id, deviceServiceTrustOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceTrustOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the approval status of a device by ID
         * @summary Update device approval status
         * @param {string} id The device ID
         * @param {DeviceServiceUpdateDeviceApprovalStatusRequest} deviceServiceUpdateDeviceApprovalStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceUpdateDeviceApprovalStatus(id: string, deviceServiceUpdateDeviceApprovalStatusRequest: DeviceServiceUpdateDeviceApprovalStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceUpdateDeviceApprovalStatus(id, deviceServiceUpdateDeviceApprovalStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceUpdateDeviceApprovalStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the display name of a device by ID
         * @summary Update device display name
         * @param {string} id The device ID
         * @param {DeviceServiceUpdateDeviceDisplayNameRequest} deviceServiceUpdateDeviceDisplayNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceUpdateDeviceDisplayName(id: string, deviceServiceUpdateDeviceDisplayNameRequest: DeviceServiceUpdateDeviceDisplayNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceUpdateDeviceDisplayName(id, deviceServiceUpdateDeviceDisplayNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceUpdateDeviceDisplayName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the enabled status of a device by ID
         * @summary Update device enabled status
         * @param {string} id The device ID
         * @param {DeviceServiceUpdateDeviceEnabledStatusRequest} deviceServiceUpdateDeviceEnabledStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceServiceUpdateDeviceEnabledStatus(id: string, deviceServiceUpdateDeviceEnabledStatusRequest: DeviceServiceUpdateDeviceEnabledStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceServiceUpdateDeviceEnabledStatus(id, deviceServiceUpdateDeviceEnabledStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deviceServiceUpdateDeviceEnabledStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * Add key/value metadata to the device specified in the JWT
         * @summary Add device metadata
         * @param {DevicesApiDeviceServiceAddDeviceMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceAddDeviceMetadata(requestParameters: DevicesApiDeviceServiceAddDeviceMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deviceServiceAddDeviceMetadata(requestParameters.v2AddDeviceMetadataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new device in your organization ready to pair with a physical device
         * @summary Create a new device
         * @param {DevicesApiDeviceServiceCreateDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceCreateDevice(requestParameters: DevicesApiDeviceServiceCreateDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServiceCreateDevice(requestParameters.v2CreateDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific device by ID. This action can only be performed for unapproved devices at this time.
         * @summary Delete a device
         * @param {DevicesApiDeviceServiceDeleteDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceDeleteDevice(requestParameters: DevicesApiDeviceServiceDeleteDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServiceDeleteDevice(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific device by ID
         * @summary Get a device
         * @param {DevicesApiDeviceServiceGetDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetDevice(requestParameters: DevicesApiDeviceServiceGetDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServiceGetDevice(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get device credentials for the device specified in the JWT
         * @summary Get device credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetDeviceCredentials(options?: RawAxiosRequestConfig): AxiosPromise<V2GetDeviceCredentialsResponse> {
            return localVarFp.deviceServiceGetDeviceCredentials(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a new set of pairing credentials for a device by ID
         * @summary Get device pairing credentials
         * @param {DevicesApiDeviceServiceGetDevicePairingCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetDevicePairingCredentials(requestParameters: DevicesApiDeviceServiceGetDevicePairingCredentialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2PairingCredentials> {
            return localVarFp.deviceServiceGetDevicePairingCredentials(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a new push notification token for the device specified in the JWT
         * @summary Get push notification token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetPushToken(options?: RawAxiosRequestConfig): AxiosPromise<V2GetPushTokenResponse> {
            return localVarFp.deviceServiceGetPushToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the device specified in the JWT
         * @summary Get device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceGetSelf(options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServiceGetSelf(options).then((request) => request(axios, basePath));
        },
        /**
         * List all devices associated with a user or organization
         * @summary List all devices
         * @param {DevicesApiDeviceServiceListDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceListDevices(requestParameters: DevicesApiDeviceServiceListDevicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Device>> {
            return localVarFp.deviceServiceListDevices(requestParameters.deviceType, requestParameters.deviceOwner, options).then((request) => request(axios, basePath));
        },
        /**
         * Pair the device specified in the JWT
         * @summary Pair a device with an organization
         * @param {DevicesApiDeviceServicePairDeviceWithCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServicePairDeviceWithCredential(requestParameters: DevicesApiDeviceServicePairDeviceWithCredentialRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServicePairDeviceWithCredential(requestParameters.v2PairDeviceWithCredentialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the version of the device specified in the JWT
         * @summary Set device version
         * @param {DevicesApiDeviceServiceSetDeviceVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceSetDeviceVersion(requestParameters: DevicesApiDeviceServiceSetDeviceVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deviceServiceSetDeviceVersion(requestParameters.v2SetDeviceVersionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Trust a new organization to use this device in it\'s controls
         * @summary Trust organization
         * @param {DevicesApiDeviceServiceTrustOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceTrustOrganization(requestParameters: DevicesApiDeviceServiceTrustOrganizationRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2TrustedOrganization> {
            return localVarFp.deviceServiceTrustOrganization(requestParameters.id, requestParameters.deviceServiceTrustOrganizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the approval status of a device by ID
         * @summary Update device approval status
         * @param {DevicesApiDeviceServiceUpdateDeviceApprovalStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceUpdateDeviceApprovalStatus(requestParameters: DevicesApiDeviceServiceUpdateDeviceApprovalStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServiceUpdateDeviceApprovalStatus(requestParameters.id, requestParameters.deviceServiceUpdateDeviceApprovalStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the display name of a device by ID
         * @summary Update device display name
         * @param {DevicesApiDeviceServiceUpdateDeviceDisplayNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceUpdateDeviceDisplayName(requestParameters: DevicesApiDeviceServiceUpdateDeviceDisplayNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServiceUpdateDeviceDisplayName(requestParameters.id, requestParameters.deviceServiceUpdateDeviceDisplayNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the enabled status of a device by ID
         * @summary Update device enabled status
         * @param {DevicesApiDeviceServiceUpdateDeviceEnabledStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceServiceUpdateDeviceEnabledStatus(requestParameters: DevicesApiDeviceServiceUpdateDeviceEnabledStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Device> {
            return localVarFp.deviceServiceUpdateDeviceEnabledStatus(requestParameters.id, requestParameters.deviceServiceUpdateDeviceEnabledStatusRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deviceServiceAddDeviceMetadata operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceAddDeviceMetadataRequest
 */
export interface DevicesApiDeviceServiceAddDeviceMetadataRequest {
    /**
     * 
     * @type {V2AddDeviceMetadataRequest}
     * @memberof DevicesApiDeviceServiceAddDeviceMetadata
     */
    readonly v2AddDeviceMetadataRequest: V2AddDeviceMetadataRequest
}

/**
 * Request parameters for deviceServiceCreateDevice operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceCreateDeviceRequest
 */
export interface DevicesApiDeviceServiceCreateDeviceRequest {
    /**
     * 
     * @type {V2CreateDeviceRequest}
     * @memberof DevicesApiDeviceServiceCreateDevice
     */
    readonly v2CreateDeviceRequest: V2CreateDeviceRequest
}

/**
 * Request parameters for deviceServiceDeleteDevice operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceDeleteDeviceRequest
 */
export interface DevicesApiDeviceServiceDeleteDeviceRequest {
    /**
     * The device ID
     * @type {string}
     * @memberof DevicesApiDeviceServiceDeleteDevice
     */
    readonly id: string
}

/**
 * Request parameters for deviceServiceGetDevice operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceGetDeviceRequest
 */
export interface DevicesApiDeviceServiceGetDeviceRequest {
    /**
     * The device ID
     * @type {string}
     * @memberof DevicesApiDeviceServiceGetDevice
     */
    readonly id: string
}

/**
 * Request parameters for deviceServiceGetDevicePairingCredentials operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceGetDevicePairingCredentialsRequest
 */
export interface DevicesApiDeviceServiceGetDevicePairingCredentialsRequest {
    /**
     * The device ID
     * @type {string}
     * @memberof DevicesApiDeviceServiceGetDevicePairingCredentials
     */
    readonly id: string
}

/**
 * Request parameters for deviceServiceListDevices operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceListDevicesRequest
 */
export interface DevicesApiDeviceServiceListDevicesRequest {
    /**
     * The device type
     * @type {'MOBILE' | 'CLOUD'}
     * @memberof DevicesApiDeviceServiceListDevices
     */
    readonly deviceType: DeviceServiceListDevicesDeviceTypeEnum

    /**
     * The device owner
     * @type {'THIS_ORGANIZATION' | 'TRUSTED_ORGANIZATION'}
     * @memberof DevicesApiDeviceServiceListDevices
     */
    readonly deviceOwner?: DeviceServiceListDevicesDeviceOwnerEnum
}

/**
 * Request parameters for deviceServicePairDeviceWithCredential operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServicePairDeviceWithCredentialRequest
 */
export interface DevicesApiDeviceServicePairDeviceWithCredentialRequest {
    /**
     * 
     * @type {V2PairDeviceWithCredentialRequest}
     * @memberof DevicesApiDeviceServicePairDeviceWithCredential
     */
    readonly v2PairDeviceWithCredentialRequest: V2PairDeviceWithCredentialRequest
}

/**
 * Request parameters for deviceServiceSetDeviceVersion operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceSetDeviceVersionRequest
 */
export interface DevicesApiDeviceServiceSetDeviceVersionRequest {
    /**
     * 
     * @type {V2SetDeviceVersionRequest}
     * @memberof DevicesApiDeviceServiceSetDeviceVersion
     */
    readonly v2SetDeviceVersionRequest: V2SetDeviceVersionRequest
}

/**
 * Request parameters for deviceServiceTrustOrganization operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceTrustOrganizationRequest
 */
export interface DevicesApiDeviceServiceTrustOrganizationRequest {
    /**
     * The device ID
     * @type {string}
     * @memberof DevicesApiDeviceServiceTrustOrganization
     */
    readonly id: string

    /**
     * 
     * @type {DeviceServiceTrustOrganizationRequest}
     * @memberof DevicesApiDeviceServiceTrustOrganization
     */
    readonly deviceServiceTrustOrganizationRequest: DeviceServiceTrustOrganizationRequest
}

/**
 * Request parameters for deviceServiceUpdateDeviceApprovalStatus operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceUpdateDeviceApprovalStatusRequest
 */
export interface DevicesApiDeviceServiceUpdateDeviceApprovalStatusRequest {
    /**
     * The device ID
     * @type {string}
     * @memberof DevicesApiDeviceServiceUpdateDeviceApprovalStatus
     */
    readonly id: string

    /**
     * 
     * @type {DeviceServiceUpdateDeviceApprovalStatusRequest}
     * @memberof DevicesApiDeviceServiceUpdateDeviceApprovalStatus
     */
    readonly deviceServiceUpdateDeviceApprovalStatusRequest: DeviceServiceUpdateDeviceApprovalStatusRequest
}

/**
 * Request parameters for deviceServiceUpdateDeviceDisplayName operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceUpdateDeviceDisplayNameRequest
 */
export interface DevicesApiDeviceServiceUpdateDeviceDisplayNameRequest {
    /**
     * The device ID
     * @type {string}
     * @memberof DevicesApiDeviceServiceUpdateDeviceDisplayName
     */
    readonly id: string

    /**
     * 
     * @type {DeviceServiceUpdateDeviceDisplayNameRequest}
     * @memberof DevicesApiDeviceServiceUpdateDeviceDisplayName
     */
    readonly deviceServiceUpdateDeviceDisplayNameRequest: DeviceServiceUpdateDeviceDisplayNameRequest
}

/**
 * Request parameters for deviceServiceUpdateDeviceEnabledStatus operation in DevicesApi.
 * @export
 * @interface DevicesApiDeviceServiceUpdateDeviceEnabledStatusRequest
 */
export interface DevicesApiDeviceServiceUpdateDeviceEnabledStatusRequest {
    /**
     * The device ID
     * @type {string}
     * @memberof DevicesApiDeviceServiceUpdateDeviceEnabledStatus
     */
    readonly id: string

    /**
     * 
     * @type {DeviceServiceUpdateDeviceEnabledStatusRequest}
     * @memberof DevicesApiDeviceServiceUpdateDeviceEnabledStatus
     */
    readonly deviceServiceUpdateDeviceEnabledStatusRequest: DeviceServiceUpdateDeviceEnabledStatusRequest
}

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * Add key/value metadata to the device specified in the JWT
     * @summary Add device metadata
     * @param {DevicesApiDeviceServiceAddDeviceMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceAddDeviceMetadata(requestParameters: DevicesApiDeviceServiceAddDeviceMetadataRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceAddDeviceMetadata(requestParameters.v2AddDeviceMetadataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new device in your organization ready to pair with a physical device
     * @summary Create a new device
     * @param {DevicesApiDeviceServiceCreateDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceCreateDevice(requestParameters: DevicesApiDeviceServiceCreateDeviceRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceCreateDevice(requestParameters.v2CreateDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific device by ID. This action can only be performed for unapproved devices at this time.
     * @summary Delete a device
     * @param {DevicesApiDeviceServiceDeleteDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceDeleteDevice(requestParameters: DevicesApiDeviceServiceDeleteDeviceRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceDeleteDevice(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific device by ID
     * @summary Get a device
     * @param {DevicesApiDeviceServiceGetDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceGetDevice(requestParameters: DevicesApiDeviceServiceGetDeviceRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceGetDevice(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get device credentials for the device specified in the JWT
     * @summary Get device credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceGetDeviceCredentials(options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceGetDeviceCredentials(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a new set of pairing credentials for a device by ID
     * @summary Get device pairing credentials
     * @param {DevicesApiDeviceServiceGetDevicePairingCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceGetDevicePairingCredentials(requestParameters: DevicesApiDeviceServiceGetDevicePairingCredentialsRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceGetDevicePairingCredentials(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a new push notification token for the device specified in the JWT
     * @summary Get push notification token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceGetPushToken(options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceGetPushToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the device specified in the JWT
     * @summary Get device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceGetSelf(options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceGetSelf(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all devices associated with a user or organization
     * @summary List all devices
     * @param {DevicesApiDeviceServiceListDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceListDevices(requestParameters: DevicesApiDeviceServiceListDevicesRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceListDevices(requestParameters.deviceType, requestParameters.deviceOwner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pair the device specified in the JWT
     * @summary Pair a device with an organization
     * @param {DevicesApiDeviceServicePairDeviceWithCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServicePairDeviceWithCredential(requestParameters: DevicesApiDeviceServicePairDeviceWithCredentialRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServicePairDeviceWithCredential(requestParameters.v2PairDeviceWithCredentialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the version of the device specified in the JWT
     * @summary Set device version
     * @param {DevicesApiDeviceServiceSetDeviceVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceSetDeviceVersion(requestParameters: DevicesApiDeviceServiceSetDeviceVersionRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceSetDeviceVersion(requestParameters.v2SetDeviceVersionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trust a new organization to use this device in it\'s controls
     * @summary Trust organization
     * @param {DevicesApiDeviceServiceTrustOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceTrustOrganization(requestParameters: DevicesApiDeviceServiceTrustOrganizationRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceTrustOrganization(requestParameters.id, requestParameters.deviceServiceTrustOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the approval status of a device by ID
     * @summary Update device approval status
     * @param {DevicesApiDeviceServiceUpdateDeviceApprovalStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceUpdateDeviceApprovalStatus(requestParameters: DevicesApiDeviceServiceUpdateDeviceApprovalStatusRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceUpdateDeviceApprovalStatus(requestParameters.id, requestParameters.deviceServiceUpdateDeviceApprovalStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the display name of a device by ID
     * @summary Update device display name
     * @param {DevicesApiDeviceServiceUpdateDeviceDisplayNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceUpdateDeviceDisplayName(requestParameters: DevicesApiDeviceServiceUpdateDeviceDisplayNameRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceUpdateDeviceDisplayName(requestParameters.id, requestParameters.deviceServiceUpdateDeviceDisplayNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the enabled status of a device by ID
     * @summary Update device enabled status
     * @param {DevicesApiDeviceServiceUpdateDeviceEnabledStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deviceServiceUpdateDeviceEnabledStatus(requestParameters: DevicesApiDeviceServiceUpdateDeviceEnabledStatusRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deviceServiceUpdateDeviceEnabledStatus(requestParameters.id, requestParameters.deviceServiceUpdateDeviceEnabledStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DeviceServiceListDevicesDeviceTypeEnum = {
    Mobile: 'MOBILE',
    Cloud: 'CLOUD'
} as const;
export type DeviceServiceListDevicesDeviceTypeEnum = typeof DeviceServiceListDevicesDeviceTypeEnum[keyof typeof DeviceServiceListDevicesDeviceTypeEnum];
/**
 * @export
 */
export const DeviceServiceListDevicesDeviceOwnerEnum = {
    ThisOrganization: 'THIS_ORGANIZATION',
    TrustedOrganization: 'TRUSTED_ORGANIZATION'
} as const;
export type DeviceServiceListDevicesDeviceOwnerEnum = typeof DeviceServiceListDevicesDeviceOwnerEnum[keyof typeof DeviceServiceListDevicesDeviceOwnerEnum];
