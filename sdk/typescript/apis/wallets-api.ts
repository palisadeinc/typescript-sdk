/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2GetWalletSequenceResponse } from '../models';
// @ts-ignore
import type { V2ListGlobalWalletsResponse } from '../models';
// @ts-ignore
import type { V2ListVaultWalletsResponse } from '../models';
// @ts-ignore
import type { VaultServiceCreateWalletRequest } from '../models';
// @ts-ignore
import type { VaultServiceUpdateWalletRequest } from '../models';
// @ts-ignore
import type { VaultServiceUpdateWalletSettingsRequest } from '../models';
// @ts-ignore
import type { Vaultv2Wallet } from '../models';
/**
 * WalletsApi - axios parameter creator
 * @export
 */
export const WalletsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new HSM or MPC wallet within a vault
         * @summary Create a wallet
         * @param {string} vaultId The vault ID
         * @param {VaultServiceCreateWalletRequest} vaultServiceCreateWalletRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceCreateWallet: async (vaultId: string, vaultServiceCreateWalletRequest: VaultServiceCreateWalletRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceCreateWallet', 'vaultId', vaultId)
            // verify required parameter 'vaultServiceCreateWalletRequest' is not null or undefined
            assertParamExists('vaultServiceCreateWallet', 'vaultServiceCreateWalletRequest', vaultServiceCreateWalletRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaultServiceCreateWalletRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a wallet by ID (A wallet can only be deleted if it is in PROVISIONING_FAILED status)
         * @summary Delete a wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceDeleteWallet: async (vaultId: string, walletId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceDeleteWallet', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceDeleteWallet', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a wallet by ID
         * @summary Get a wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetWallet: async (vaultId: string, walletId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceGetWallet', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceGetWallet', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a wallet by its unique ID
         * @summary Get a wallet by ID
         * @param {string} id The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetWalletByID: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vaultServiceGetWalletByID', 'id', id)
            const localVarPath = `/v2/wallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get blockchain nonce/sequence of a specific wallet by ID
         * @summary Get a wallet nonce/sequence
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetWalletSequence: async (vaultId: string, walletId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceGetWalletSequence', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceGetWalletSequence', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/sequence`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all wallets within the organization
         * @summary List organization wallets
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {VaultServiceListGlobalWalletsBlockchainEnum} [blockchain] The blockchain of the wallet
         * @param {string} [correlationId] Correlation ID for tracking various actions on the wallet
         * @param {string} [address] The wallet address to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListGlobalWallets: async (pageSize?: number, pageToken?: string, blockchain?: VaultServiceListGlobalWalletsBlockchainEnum, correlationId?: string, address?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (blockchain !== undefined) {
                localVarQueryParameter['blockchain'] = blockchain;
            }

            if (correlationId !== undefined) {
                localVarQueryParameter['correlationId'] = correlationId;
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all wallets within a vault
         * @summary List vault wallets
         * @param {string} vaultId The vault ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {VaultServiceListVaultWalletsBlockchainEnum} [blockchain] The blockchain of the wallet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListVaultWallets: async (vaultId: string, pageSize?: number, pageToken?: string, blockchain?: VaultServiceListVaultWalletsBlockchainEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceListVaultWallets', 'vaultId', vaultId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (blockchain !== undefined) {
                localVarQueryParameter['blockchain'] = blockchain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a wallet\'s name and description by ID
         * @summary Update a wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {VaultServiceUpdateWalletRequest} vaultServiceUpdateWalletRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceUpdateWallet: async (vaultId: string, walletId: string, vaultServiceUpdateWalletRequest: VaultServiceUpdateWalletRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceUpdateWallet', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceUpdateWallet', 'walletId', walletId)
            // verify required parameter 'vaultServiceUpdateWalletRequest' is not null or undefined
            assertParamExists('vaultServiceUpdateWallet', 'vaultServiceUpdateWalletRequest', vaultServiceUpdateWalletRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaultServiceUpdateWalletRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a wallet\'s settings by ID
         * @summary Update a wallet\'s settings
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {VaultServiceUpdateWalletSettingsRequest} vaultServiceUpdateWalletSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceUpdateWalletSettings: async (vaultId: string, walletId: string, vaultServiceUpdateWalletSettingsRequest: VaultServiceUpdateWalletSettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceUpdateWalletSettings', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceUpdateWalletSettings', 'walletId', walletId)
            // verify required parameter 'vaultServiceUpdateWalletSettingsRequest' is not null or undefined
            assertParamExists('vaultServiceUpdateWalletSettings', 'vaultServiceUpdateWalletSettingsRequest', vaultServiceUpdateWalletSettingsRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/settings`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaultServiceUpdateWalletSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletsApi - functional programming interface
 * @export
 */
export const WalletsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new HSM or MPC wallet within a vault
         * @summary Create a wallet
         * @param {string} vaultId The vault ID
         * @param {VaultServiceCreateWalletRequest} vaultServiceCreateWalletRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceCreateWallet(vaultId: string, vaultServiceCreateWalletRequest: VaultServiceCreateWalletRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vaultv2Wallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceCreateWallet(vaultId, vaultServiceCreateWalletRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceCreateWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a wallet by ID (A wallet can only be deleted if it is in PROVISIONING_FAILED status)
         * @summary Delete a wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceDeleteWallet(vaultId: string, walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceDeleteWallet(vaultId, walletId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceDeleteWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a wallet by ID
         * @summary Get a wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceGetWallet(vaultId: string, walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vaultv2Wallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceGetWallet(vaultId, walletId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceGetWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a wallet by its unique ID
         * @summary Get a wallet by ID
         * @param {string} id The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceGetWalletByID(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vaultv2Wallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceGetWalletByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceGetWalletByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get blockchain nonce/sequence of a specific wallet by ID
         * @summary Get a wallet nonce/sequence
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceGetWalletSequence(vaultId: string, walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetWalletSequenceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceGetWalletSequence(vaultId, walletId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceGetWalletSequence']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all wallets within the organization
         * @summary List organization wallets
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {VaultServiceListGlobalWalletsBlockchainEnum} [blockchain] The blockchain of the wallet
         * @param {string} [correlationId] Correlation ID for tracking various actions on the wallet
         * @param {string} [address] The wallet address to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceListGlobalWallets(pageSize?: number, pageToken?: string, blockchain?: VaultServiceListGlobalWalletsBlockchainEnum, correlationId?: string, address?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListGlobalWalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceListGlobalWallets(pageSize, pageToken, blockchain, correlationId, address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceListGlobalWallets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all wallets within a vault
         * @summary List vault wallets
         * @param {string} vaultId The vault ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {VaultServiceListVaultWalletsBlockchainEnum} [blockchain] The blockchain of the wallet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceListVaultWallets(vaultId: string, pageSize?: number, pageToken?: string, blockchain?: VaultServiceListVaultWalletsBlockchainEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListVaultWalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceListVaultWallets(vaultId, pageSize, pageToken, blockchain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceListVaultWallets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a wallet\'s name and description by ID
         * @summary Update a wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {VaultServiceUpdateWalletRequest} vaultServiceUpdateWalletRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceUpdateWallet(vaultId: string, walletId: string, vaultServiceUpdateWalletRequest: VaultServiceUpdateWalletRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vaultv2Wallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceUpdateWallet(vaultId, walletId, vaultServiceUpdateWalletRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceUpdateWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a wallet\'s settings by ID
         * @summary Update a wallet\'s settings
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {VaultServiceUpdateWalletSettingsRequest} vaultServiceUpdateWalletSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceUpdateWalletSettings(vaultId: string, walletId: string, vaultServiceUpdateWalletSettingsRequest: VaultServiceUpdateWalletSettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vaultv2Wallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceUpdateWalletSettings(vaultId, walletId, vaultServiceUpdateWalletSettingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletsApi.vaultServiceUpdateWalletSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletsApi - factory interface
 * @export
 */
export const WalletsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletsApiFp(configuration)
    return {
        /**
         * Create a new HSM or MPC wallet within a vault
         * @summary Create a wallet
         * @param {WalletsApiVaultServiceCreateWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceCreateWallet(requestParameters: WalletsApiVaultServiceCreateWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vaultv2Wallet> {
            return localVarFp.vaultServiceCreateWallet(requestParameters.vaultId, requestParameters.vaultServiceCreateWalletRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a wallet by ID (A wallet can only be deleted if it is in PROVISIONING_FAILED status)
         * @summary Delete a wallet
         * @param {WalletsApiVaultServiceDeleteWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceDeleteWallet(requestParameters: WalletsApiVaultServiceDeleteWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.vaultServiceDeleteWallet(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a wallet by ID
         * @summary Get a wallet
         * @param {WalletsApiVaultServiceGetWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetWallet(requestParameters: WalletsApiVaultServiceGetWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vaultv2Wallet> {
            return localVarFp.vaultServiceGetWallet(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a wallet by its unique ID
         * @summary Get a wallet by ID
         * @param {WalletsApiVaultServiceGetWalletByIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetWalletByID(requestParameters: WalletsApiVaultServiceGetWalletByIDRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vaultv2Wallet> {
            return localVarFp.vaultServiceGetWalletByID(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get blockchain nonce/sequence of a specific wallet by ID
         * @summary Get a wallet nonce/sequence
         * @param {WalletsApiVaultServiceGetWalletSequenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceGetWalletSequence(requestParameters: WalletsApiVaultServiceGetWalletSequenceRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2GetWalletSequenceResponse> {
            return localVarFp.vaultServiceGetWalletSequence(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all wallets within the organization
         * @summary List organization wallets
         * @param {WalletsApiVaultServiceListGlobalWalletsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListGlobalWallets(requestParameters: WalletsApiVaultServiceListGlobalWalletsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListGlobalWalletsResponse> {
            return localVarFp.vaultServiceListGlobalWallets(requestParameters.pageSize, requestParameters.pageToken, requestParameters.blockchain, requestParameters.correlationId, requestParameters.address, options).then((request) => request(axios, basePath));
        },
        /**
         * List all wallets within a vault
         * @summary List vault wallets
         * @param {WalletsApiVaultServiceListVaultWalletsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListVaultWallets(requestParameters: WalletsApiVaultServiceListVaultWalletsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListVaultWalletsResponse> {
            return localVarFp.vaultServiceListVaultWallets(requestParameters.vaultId, requestParameters.pageSize, requestParameters.pageToken, requestParameters.blockchain, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a wallet\'s name and description by ID
         * @summary Update a wallet
         * @param {WalletsApiVaultServiceUpdateWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceUpdateWallet(requestParameters: WalletsApiVaultServiceUpdateWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vaultv2Wallet> {
            return localVarFp.vaultServiceUpdateWallet(requestParameters.vaultId, requestParameters.walletId, requestParameters.vaultServiceUpdateWalletRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a wallet\'s settings by ID
         * @summary Update a wallet\'s settings
         * @param {WalletsApiVaultServiceUpdateWalletSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceUpdateWalletSettings(requestParameters: WalletsApiVaultServiceUpdateWalletSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vaultv2Wallet> {
            return localVarFp.vaultServiceUpdateWalletSettings(requestParameters.vaultId, requestParameters.walletId, requestParameters.vaultServiceUpdateWalletSettingsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for vaultServiceCreateWallet operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceCreateWalletRequest
 */
export interface WalletsApiVaultServiceCreateWalletRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletsApiVaultServiceCreateWallet
     */
    readonly vaultId: string

    /**
     * 
     * @type {VaultServiceCreateWalletRequest}
     * @memberof WalletsApiVaultServiceCreateWallet
     */
    readonly vaultServiceCreateWalletRequest: VaultServiceCreateWalletRequest
}

/**
 * Request parameters for vaultServiceDeleteWallet operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceDeleteWalletRequest
 */
export interface WalletsApiVaultServiceDeleteWalletRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletsApiVaultServiceDeleteWallet
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletsApiVaultServiceDeleteWallet
     */
    readonly walletId: string
}

/**
 * Request parameters for vaultServiceGetWallet operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceGetWalletRequest
 */
export interface WalletsApiVaultServiceGetWalletRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletsApiVaultServiceGetWallet
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletsApiVaultServiceGetWallet
     */
    readonly walletId: string
}

/**
 * Request parameters for vaultServiceGetWalletByID operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceGetWalletByIDRequest
 */
export interface WalletsApiVaultServiceGetWalletByIDRequest {
    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletsApiVaultServiceGetWalletByID
     */
    readonly id: string
}

/**
 * Request parameters for vaultServiceGetWalletSequence operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceGetWalletSequenceRequest
 */
export interface WalletsApiVaultServiceGetWalletSequenceRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletsApiVaultServiceGetWalletSequence
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletsApiVaultServiceGetWalletSequence
     */
    readonly walletId: string
}

/**
 * Request parameters for vaultServiceListGlobalWallets operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceListGlobalWalletsRequest
 */
export interface WalletsApiVaultServiceListGlobalWalletsRequest {
    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof WalletsApiVaultServiceListGlobalWallets
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof WalletsApiVaultServiceListGlobalWallets
     */
    readonly pageToken?: string

    /**
     * The blockchain of the wallet
     * @type {'AVALANCHE' | 'ETHEREUM' | 'XRP_LEDGER' | 'POLYGON' | 'BNBCHAIN' | 'BASE' | 'HEDERA' | 'ARBITRUM' | 'ONE_MONEY' | 'SOLANA' | 'TRON' | 'BITCOIN'}
     * @memberof WalletsApiVaultServiceListGlobalWallets
     */
    readonly blockchain?: VaultServiceListGlobalWalletsBlockchainEnum

    /**
     * Correlation ID for tracking various actions on the wallet
     * @type {string}
     * @memberof WalletsApiVaultServiceListGlobalWallets
     */
    readonly correlationId?: string

    /**
     * The wallet address to filter by
     * @type {string}
     * @memberof WalletsApiVaultServiceListGlobalWallets
     */
    readonly address?: string
}

/**
 * Request parameters for vaultServiceListVaultWallets operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceListVaultWalletsRequest
 */
export interface WalletsApiVaultServiceListVaultWalletsRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletsApiVaultServiceListVaultWallets
     */
    readonly vaultId: string

    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof WalletsApiVaultServiceListVaultWallets
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof WalletsApiVaultServiceListVaultWallets
     */
    readonly pageToken?: string

    /**
     * The blockchain of the wallet
     * @type {'AVALANCHE' | 'ETHEREUM' | 'XRP_LEDGER' | 'POLYGON' | 'BNBCHAIN' | 'BASE' | 'HEDERA' | 'ARBITRUM' | 'ONE_MONEY' | 'SOLANA' | 'TRON' | 'BITCOIN'}
     * @memberof WalletsApiVaultServiceListVaultWallets
     */
    readonly blockchain?: VaultServiceListVaultWalletsBlockchainEnum
}

/**
 * Request parameters for vaultServiceUpdateWallet operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceUpdateWalletRequest
 */
export interface WalletsApiVaultServiceUpdateWalletRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletsApiVaultServiceUpdateWallet
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletsApiVaultServiceUpdateWallet
     */
    readonly walletId: string

    /**
     * 
     * @type {VaultServiceUpdateWalletRequest}
     * @memberof WalletsApiVaultServiceUpdateWallet
     */
    readonly vaultServiceUpdateWalletRequest: VaultServiceUpdateWalletRequest
}

/**
 * Request parameters for vaultServiceUpdateWalletSettings operation in WalletsApi.
 * @export
 * @interface WalletsApiVaultServiceUpdateWalletSettingsRequest
 */
export interface WalletsApiVaultServiceUpdateWalletSettingsRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletsApiVaultServiceUpdateWalletSettings
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletsApiVaultServiceUpdateWalletSettings
     */
    readonly walletId: string

    /**
     * 
     * @type {VaultServiceUpdateWalletSettingsRequest}
     * @memberof WalletsApiVaultServiceUpdateWalletSettings
     */
    readonly vaultServiceUpdateWalletSettingsRequest: VaultServiceUpdateWalletSettingsRequest
}

/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
export class WalletsApi extends BaseAPI {
    /**
     * Create a new HSM or MPC wallet within a vault
     * @summary Create a wallet
     * @param {WalletsApiVaultServiceCreateWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceCreateWallet(requestParameters: WalletsApiVaultServiceCreateWalletRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceCreateWallet(requestParameters.vaultId, requestParameters.vaultServiceCreateWalletRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a wallet by ID (A wallet can only be deleted if it is in PROVISIONING_FAILED status)
     * @summary Delete a wallet
     * @param {WalletsApiVaultServiceDeleteWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceDeleteWallet(requestParameters: WalletsApiVaultServiceDeleteWalletRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceDeleteWallet(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a wallet by ID
     * @summary Get a wallet
     * @param {WalletsApiVaultServiceGetWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceGetWallet(requestParameters: WalletsApiVaultServiceGetWalletRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceGetWallet(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a wallet by its unique ID
     * @summary Get a wallet by ID
     * @param {WalletsApiVaultServiceGetWalletByIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceGetWalletByID(requestParameters: WalletsApiVaultServiceGetWalletByIDRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceGetWalletByID(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get blockchain nonce/sequence of a specific wallet by ID
     * @summary Get a wallet nonce/sequence
     * @param {WalletsApiVaultServiceGetWalletSequenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceGetWalletSequence(requestParameters: WalletsApiVaultServiceGetWalletSequenceRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceGetWalletSequence(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all wallets within the organization
     * @summary List organization wallets
     * @param {WalletsApiVaultServiceListGlobalWalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceListGlobalWallets(requestParameters: WalletsApiVaultServiceListGlobalWalletsRequest = {}, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceListGlobalWallets(requestParameters.pageSize, requestParameters.pageToken, requestParameters.blockchain, requestParameters.correlationId, requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all wallets within a vault
     * @summary List vault wallets
     * @param {WalletsApiVaultServiceListVaultWalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceListVaultWallets(requestParameters: WalletsApiVaultServiceListVaultWalletsRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceListVaultWallets(requestParameters.vaultId, requestParameters.pageSize, requestParameters.pageToken, requestParameters.blockchain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a wallet\'s name and description by ID
     * @summary Update a wallet
     * @param {WalletsApiVaultServiceUpdateWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceUpdateWallet(requestParameters: WalletsApiVaultServiceUpdateWalletRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceUpdateWallet(requestParameters.vaultId, requestParameters.walletId, requestParameters.vaultServiceUpdateWalletRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a wallet\'s settings by ID
     * @summary Update a wallet\'s settings
     * @param {WalletsApiVaultServiceUpdateWalletSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    public vaultServiceUpdateWalletSettings(requestParameters: WalletsApiVaultServiceUpdateWalletSettingsRequest, options?: RawAxiosRequestConfig) {
        return WalletsApiFp(this.configuration).vaultServiceUpdateWalletSettings(requestParameters.vaultId, requestParameters.walletId, requestParameters.vaultServiceUpdateWalletSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const VaultServiceListGlobalWalletsBlockchainEnum = {
    Avalanche: 'AVALANCHE',
    Ethereum: 'ETHEREUM',
    XrpLedger: 'XRP_LEDGER',
    Polygon: 'POLYGON',
    Bnbchain: 'BNBCHAIN',
    Base: 'BASE',
    Hedera: 'HEDERA',
    Arbitrum: 'ARBITRUM',
    OneMoney: 'ONE_MONEY',
    Solana: 'SOLANA',
    Tron: 'TRON',
    Bitcoin: 'BITCOIN'
} as const;
export type VaultServiceListGlobalWalletsBlockchainEnum = typeof VaultServiceListGlobalWalletsBlockchainEnum[keyof typeof VaultServiceListGlobalWalletsBlockchainEnum];
/**
 * @export
 */
export const VaultServiceListVaultWalletsBlockchainEnum = {
    Avalanche: 'AVALANCHE',
    Ethereum: 'ETHEREUM',
    XrpLedger: 'XRP_LEDGER',
    Polygon: 'POLYGON',
    Bnbchain: 'BNBCHAIN',
    Base: 'BASE',
    Hedera: 'HEDERA',
    Arbitrum: 'ARBITRUM',
    OneMoney: 'ONE_MONEY',
    Solana: 'SOLANA',
    Tron: 'TRON',
    Bitcoin: 'BITCOIN'
} as const;
export type VaultServiceListVaultWalletsBlockchainEnum = typeof VaultServiceListVaultWalletsBlockchainEnum[keyof typeof VaultServiceListVaultWalletsBlockchainEnum];
