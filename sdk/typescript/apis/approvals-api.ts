/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApprovalServiceUpdateApprovalRequest } from '../models';
// @ts-ignore
import type { Approvalv2ApprovalSummary } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
/**
 * ApprovalsApi - axios parameter creator
 * @export
 */
export const ApprovalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a specific approval summary for the current user
         * @summary Get approval summary
         * @param {string} id The approval summary ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceGetApprovalSummary: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approvalServiceGetApprovalSummary', 'id', id)
            const localVarPath = `/v2/approvals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of approval summaries for the current user
         * @summary List approval summaries
         * @param {ApprovalServiceListApprovalSummariesStatusEnum} [status] The approval status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceListApprovalSummaries: async (status?: ApprovalServiceListApprovalSummariesStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/approvals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the approval summary to either approve or reject the request
         * @summary Update approval summary
         * @param {string} id The approval ID
         * @param {ApprovalServiceUpdateApprovalRequest} approvalServiceUpdateApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceUpdateApproval: async (id: string, approvalServiceUpdateApprovalRequest: ApprovalServiceUpdateApprovalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approvalServiceUpdateApproval', 'id', id)
            // verify required parameter 'approvalServiceUpdateApprovalRequest' is not null or undefined
            assertParamExists('approvalServiceUpdateApproval', 'approvalServiceUpdateApprovalRequest', approvalServiceUpdateApprovalRequest)
            const localVarPath = `/v2/approvals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(approvalServiceUpdateApprovalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApprovalsApi - functional programming interface
 * @export
 */
export const ApprovalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApprovalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a specific approval summary for the current user
         * @summary Get approval summary
         * @param {string} id The approval summary ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceGetApprovalSummary(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Approvalv2ApprovalSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceGetApprovalSummary(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalsApi.approvalServiceGetApprovalSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the list of approval summaries for the current user
         * @summary List approval summaries
         * @param {ApprovalServiceListApprovalSummariesStatusEnum} [status] The approval status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceListApprovalSummaries(status?: ApprovalServiceListApprovalSummariesStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Approvalv2ApprovalSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceListApprovalSummaries(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalsApi.approvalServiceListApprovalSummaries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the approval summary to either approve or reject the request
         * @summary Update approval summary
         * @param {string} id The approval ID
         * @param {ApprovalServiceUpdateApprovalRequest} approvalServiceUpdateApprovalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceUpdateApproval(id: string, approvalServiceUpdateApprovalRequest: ApprovalServiceUpdateApprovalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Approvalv2ApprovalSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceUpdateApproval(id, approvalServiceUpdateApprovalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApprovalsApi.approvalServiceUpdateApproval']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApprovalsApi - factory interface
 * @export
 */
export const ApprovalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApprovalsApiFp(configuration)
    return {
        /**
         * Returns a specific approval summary for the current user
         * @summary Get approval summary
         * @param {ApprovalsApiApprovalServiceGetApprovalSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceGetApprovalSummary(requestParameters: ApprovalsApiApprovalServiceGetApprovalSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<Approvalv2ApprovalSummary> {
            return localVarFp.approvalServiceGetApprovalSummary(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of approval summaries for the current user
         * @summary List approval summaries
         * @param {ApprovalsApiApprovalServiceListApprovalSummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceListApprovalSummaries(requestParameters: ApprovalsApiApprovalServiceListApprovalSummariesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Approvalv2ApprovalSummary>> {
            return localVarFp.approvalServiceListApprovalSummaries(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the approval summary to either approve or reject the request
         * @summary Update approval summary
         * @param {ApprovalsApiApprovalServiceUpdateApprovalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceUpdateApproval(requestParameters: ApprovalsApiApprovalServiceUpdateApprovalRequest, options?: RawAxiosRequestConfig): AxiosPromise<Approvalv2ApprovalSummary> {
            return localVarFp.approvalServiceUpdateApproval(requestParameters.id, requestParameters.approvalServiceUpdateApprovalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approvalServiceGetApprovalSummary operation in ApprovalsApi.
 * @export
 * @interface ApprovalsApiApprovalServiceGetApprovalSummaryRequest
 */
export interface ApprovalsApiApprovalServiceGetApprovalSummaryRequest {
    /**
     * The approval summary ID
     * @type {string}
     * @memberof ApprovalsApiApprovalServiceGetApprovalSummary
     */
    readonly id: string
}

/**
 * Request parameters for approvalServiceListApprovalSummaries operation in ApprovalsApi.
 * @export
 * @interface ApprovalsApiApprovalServiceListApprovalSummariesRequest
 */
export interface ApprovalsApiApprovalServiceListApprovalSummariesRequest {
    /**
     * The approval status
     * @type {'PROCESSING' | 'APPROVED' | 'REJECTED'}
     * @memberof ApprovalsApiApprovalServiceListApprovalSummaries
     */
    readonly status?: ApprovalServiceListApprovalSummariesStatusEnum
}

/**
 * Request parameters for approvalServiceUpdateApproval operation in ApprovalsApi.
 * @export
 * @interface ApprovalsApiApprovalServiceUpdateApprovalRequest
 */
export interface ApprovalsApiApprovalServiceUpdateApprovalRequest {
    /**
     * The approval ID
     * @type {string}
     * @memberof ApprovalsApiApprovalServiceUpdateApproval
     */
    readonly id: string

    /**
     * 
     * @type {ApprovalServiceUpdateApprovalRequest}
     * @memberof ApprovalsApiApprovalServiceUpdateApproval
     */
    readonly approvalServiceUpdateApprovalRequest: ApprovalServiceUpdateApprovalRequest
}

/**
 * ApprovalsApi - object-oriented interface
 * @export
 * @class ApprovalsApi
 * @extends {BaseAPI}
 */
export class ApprovalsApi extends BaseAPI {
    /**
     * Returns a specific approval summary for the current user
     * @summary Get approval summary
     * @param {ApprovalsApiApprovalServiceGetApprovalSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsApi
     */
    public approvalServiceGetApprovalSummary(requestParameters: ApprovalsApiApprovalServiceGetApprovalSummaryRequest, options?: RawAxiosRequestConfig) {
        return ApprovalsApiFp(this.configuration).approvalServiceGetApprovalSummary(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of approval summaries for the current user
     * @summary List approval summaries
     * @param {ApprovalsApiApprovalServiceListApprovalSummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsApi
     */
    public approvalServiceListApprovalSummaries(requestParameters: ApprovalsApiApprovalServiceListApprovalSummariesRequest = {}, options?: RawAxiosRequestConfig) {
        return ApprovalsApiFp(this.configuration).approvalServiceListApprovalSummaries(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the approval summary to either approve or reject the request
     * @summary Update approval summary
     * @param {ApprovalsApiApprovalServiceUpdateApprovalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsApi
     */
    public approvalServiceUpdateApproval(requestParameters: ApprovalsApiApprovalServiceUpdateApprovalRequest, options?: RawAxiosRequestConfig) {
        return ApprovalsApiFp(this.configuration).approvalServiceUpdateApproval(requestParameters.id, requestParameters.approvalServiceUpdateApprovalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApprovalServiceListApprovalSummariesStatusEnum = {
    Processing: 'PROCESSING',
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
} as const;
export type ApprovalServiceListApprovalSummariesStatusEnum = typeof ApprovalServiceListApprovalSummariesStatusEnum[keyof typeof ApprovalServiceListApprovalSummariesStatusEnum];
