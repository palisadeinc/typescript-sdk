/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitAMMCreateRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitAMMDepositRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitAMMWithdrawRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitAccountSetRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitClawbackRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitOfferCancelRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitOfferCreateRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitSignerListSetRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSubmitTrustSetRequest } from '../models';
// @ts-ignore
import type { Transactionsv2Transaction } from '../models';
/**
 * TransactionsXRPApi - axios parameter creator
 * @export
 */
export const TransactionsXRPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new XRP AMM Create transaction
         * @summary Create a new XRP AMM Create transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAMMCreateRequest} transactionsServiceSubmitAMMCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAMMCreate: async (vaultId: string, walletId: string, transactionsServiceSubmitAMMCreateRequest: TransactionsServiceSubmitAMMCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMCreate', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMCreate', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitAMMCreateRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMCreate', 'transactionsServiceSubmitAMMCreateRequest', transactionsServiceSubmitAMMCreateRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/amm-create`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitAMMCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP AMM Deposit transaction
         * @summary Create a new XRP AMM Deposit transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAMMDepositRequest} transactionsServiceSubmitAMMDepositRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAMMDeposit: async (vaultId: string, walletId: string, transactionsServiceSubmitAMMDepositRequest: TransactionsServiceSubmitAMMDepositRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMDeposit', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMDeposit', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitAMMDepositRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMDeposit', 'transactionsServiceSubmitAMMDepositRequest', transactionsServiceSubmitAMMDepositRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/amm-deposit`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitAMMDepositRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP AMM Withdraw transaction
         * @summary Create a new XRP AMM Withdraw transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAMMWithdrawRequest} transactionsServiceSubmitAMMWithdrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAMMWithdraw: async (vaultId: string, walletId: string, transactionsServiceSubmitAMMWithdrawRequest: TransactionsServiceSubmitAMMWithdrawRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMWithdraw', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMWithdraw', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitAMMWithdrawRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitAMMWithdraw', 'transactionsServiceSubmitAMMWithdrawRequest', transactionsServiceSubmitAMMWithdrawRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/amm-withdraw`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitAMMWithdrawRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP Account Set transaction
         * @summary Create a new XRP Account Set transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAccountSetRequest} transactionsServiceSubmitAccountSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAccountSet: async (vaultId: string, walletId: string, transactionsServiceSubmitAccountSetRequest: TransactionsServiceSubmitAccountSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAccountSet', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitAccountSet', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitAccountSetRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitAccountSet', 'transactionsServiceSubmitAccountSetRequest', transactionsServiceSubmitAccountSetRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/account-set`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitAccountSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP Clawback transaction to recover issued tokens
         * @summary Create a new XRP Clawback transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitClawbackRequest} transactionsServiceSubmitClawbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitClawback: async (vaultId: string, walletId: string, transactionsServiceSubmitClawbackRequest: TransactionsServiceSubmitClawbackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitClawback', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitClawback', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitClawbackRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitClawback', 'transactionsServiceSubmitClawbackRequest', transactionsServiceSubmitClawbackRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/clawback`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitClawbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP Offer Cancel transaction
         * @summary Create a new XRP Offer Cancel transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitOfferCancelRequest} transactionsServiceSubmitOfferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitOfferCancel: async (vaultId: string, walletId: string, transactionsServiceSubmitOfferCancelRequest: TransactionsServiceSubmitOfferCancelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitOfferCancel', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitOfferCancel', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitOfferCancelRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitOfferCancel', 'transactionsServiceSubmitOfferCancelRequest', transactionsServiceSubmitOfferCancelRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/offer-cancel`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitOfferCancelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP Offer Create transaction
         * @summary Create a new XRP Offer Create transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitOfferCreateRequest} transactionsServiceSubmitOfferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitOfferCreate: async (vaultId: string, walletId: string, transactionsServiceSubmitOfferCreateRequest: TransactionsServiceSubmitOfferCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitOfferCreate', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitOfferCreate', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitOfferCreateRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitOfferCreate', 'transactionsServiceSubmitOfferCreateRequest', transactionsServiceSubmitOfferCreateRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/offer-create`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitOfferCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP SignerList Set transaction
         * @summary Create a new XRP SignerList Set transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitSignerListSetRequest} transactionsServiceSubmitSignerListSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitSignerListSet: async (vaultId: string, walletId: string, transactionsServiceSubmitSignerListSetRequest: TransactionsServiceSubmitSignerListSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitSignerListSet', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitSignerListSet', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitSignerListSetRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitSignerListSet', 'transactionsServiceSubmitSignerListSetRequest', transactionsServiceSubmitSignerListSetRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/signer-list-set`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitSignerListSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new XRP Trust Set transaction
         * @summary Create a new XRP Trust Set transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitTrustSetRequest} transactionsServiceSubmitTrustSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitTrustSet: async (vaultId: string, walletId: string, transactionsServiceSubmitTrustSetRequest: TransactionsServiceSubmitTrustSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSubmitTrustSet', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSubmitTrustSet', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSubmitTrustSetRequest' is not null or undefined
            assertParamExists('transactionsServiceSubmitTrustSet', 'transactionsServiceSubmitTrustSetRequest', transactionsServiceSubmitTrustSetRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/xrp/trust-set`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSubmitTrustSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsXRPApi - functional programming interface
 * @export
 */
export const TransactionsXRPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsXRPApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new XRP AMM Create transaction
         * @summary Create a new XRP AMM Create transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAMMCreateRequest} transactionsServiceSubmitAMMCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitAMMCreate(vaultId: string, walletId: string, transactionsServiceSubmitAMMCreateRequest: TransactionsServiceSubmitAMMCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitAMMCreate(vaultId, walletId, transactionsServiceSubmitAMMCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitAMMCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP AMM Deposit transaction
         * @summary Create a new XRP AMM Deposit transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAMMDepositRequest} transactionsServiceSubmitAMMDepositRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitAMMDeposit(vaultId: string, walletId: string, transactionsServiceSubmitAMMDepositRequest: TransactionsServiceSubmitAMMDepositRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitAMMDeposit(vaultId, walletId, transactionsServiceSubmitAMMDepositRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitAMMDeposit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP AMM Withdraw transaction
         * @summary Create a new XRP AMM Withdraw transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAMMWithdrawRequest} transactionsServiceSubmitAMMWithdrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitAMMWithdraw(vaultId: string, walletId: string, transactionsServiceSubmitAMMWithdrawRequest: TransactionsServiceSubmitAMMWithdrawRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitAMMWithdraw(vaultId, walletId, transactionsServiceSubmitAMMWithdrawRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitAMMWithdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP Account Set transaction
         * @summary Create a new XRP Account Set transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitAccountSetRequest} transactionsServiceSubmitAccountSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitAccountSet(vaultId: string, walletId: string, transactionsServiceSubmitAccountSetRequest: TransactionsServiceSubmitAccountSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitAccountSet(vaultId, walletId, transactionsServiceSubmitAccountSetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitAccountSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP Clawback transaction to recover issued tokens
         * @summary Create a new XRP Clawback transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitClawbackRequest} transactionsServiceSubmitClawbackRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitClawback(vaultId: string, walletId: string, transactionsServiceSubmitClawbackRequest: TransactionsServiceSubmitClawbackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitClawback(vaultId, walletId, transactionsServiceSubmitClawbackRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitClawback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP Offer Cancel transaction
         * @summary Create a new XRP Offer Cancel transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitOfferCancelRequest} transactionsServiceSubmitOfferCancelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitOfferCancel(vaultId: string, walletId: string, transactionsServiceSubmitOfferCancelRequest: TransactionsServiceSubmitOfferCancelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitOfferCancel(vaultId, walletId, transactionsServiceSubmitOfferCancelRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitOfferCancel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP Offer Create transaction
         * @summary Create a new XRP Offer Create transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitOfferCreateRequest} transactionsServiceSubmitOfferCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitOfferCreate(vaultId: string, walletId: string, transactionsServiceSubmitOfferCreateRequest: TransactionsServiceSubmitOfferCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitOfferCreate(vaultId, walletId, transactionsServiceSubmitOfferCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitOfferCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP SignerList Set transaction
         * @summary Create a new XRP SignerList Set transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitSignerListSetRequest} transactionsServiceSubmitSignerListSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitSignerListSet(vaultId: string, walletId: string, transactionsServiceSubmitSignerListSetRequest: TransactionsServiceSubmitSignerListSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitSignerListSet(vaultId, walletId, transactionsServiceSubmitSignerListSetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitSignerListSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new XRP Trust Set transaction
         * @summary Create a new XRP Trust Set transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSubmitTrustSetRequest} transactionsServiceSubmitTrustSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSubmitTrustSet(vaultId: string, walletId: string, transactionsServiceSubmitTrustSetRequest: TransactionsServiceSubmitTrustSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSubmitTrustSet(vaultId, walletId, transactionsServiceSubmitTrustSetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsXRPApi.transactionsServiceSubmitTrustSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionsXRPApi - factory interface
 * @export
 */
export const TransactionsXRPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsXRPApiFp(configuration)
    return {
        /**
         * Create a new XRP AMM Create transaction
         * @summary Create a new XRP AMM Create transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitAMMCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAMMCreate(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAMMCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitAMMCreate(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAMMCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP AMM Deposit transaction
         * @summary Create a new XRP AMM Deposit transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitAMMDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAMMDeposit(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAMMDepositRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitAMMDeposit(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAMMDepositRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP AMM Withdraw transaction
         * @summary Create a new XRP AMM Withdraw transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitAMMWithdrawRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAMMWithdraw(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAMMWithdrawRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitAMMWithdraw(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAMMWithdrawRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP Account Set transaction
         * @summary Create a new XRP Account Set transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitAccountSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitAccountSet(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAccountSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitAccountSet(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAccountSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP Clawback transaction to recover issued tokens
         * @summary Create a new XRP Clawback transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitClawbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitClawback(requestParameters: TransactionsXRPApiTransactionsServiceSubmitClawbackRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitClawback(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitClawbackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP Offer Cancel transaction
         * @summary Create a new XRP Offer Cancel transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitOfferCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitOfferCancel(requestParameters: TransactionsXRPApiTransactionsServiceSubmitOfferCancelRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitOfferCancel(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitOfferCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP Offer Create transaction
         * @summary Create a new XRP Offer Create transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitOfferCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitOfferCreate(requestParameters: TransactionsXRPApiTransactionsServiceSubmitOfferCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitOfferCreate(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitOfferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP SignerList Set transaction
         * @summary Create a new XRP SignerList Set transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitSignerListSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitSignerListSet(requestParameters: TransactionsXRPApiTransactionsServiceSubmitSignerListSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitSignerListSet(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitSignerListSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new XRP Trust Set transaction
         * @summary Create a new XRP Trust Set transaction
         * @param {TransactionsXRPApiTransactionsServiceSubmitTrustSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSubmitTrustSet(requestParameters: TransactionsXRPApiTransactionsServiceSubmitTrustSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSubmitTrustSet(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitTrustSetRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for transactionsServiceSubmitAMMCreate operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitAMMCreateRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitAMMCreateRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMCreate
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMCreate
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitAMMCreateRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMCreate
     */
    readonly transactionsServiceSubmitAMMCreateRequest: TransactionsServiceSubmitAMMCreateRequest
}

/**
 * Request parameters for transactionsServiceSubmitAMMDeposit operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitAMMDepositRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitAMMDepositRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMDeposit
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMDeposit
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitAMMDepositRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMDeposit
     */
    readonly transactionsServiceSubmitAMMDepositRequest: TransactionsServiceSubmitAMMDepositRequest
}

/**
 * Request parameters for transactionsServiceSubmitAMMWithdraw operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitAMMWithdrawRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitAMMWithdrawRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMWithdraw
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMWithdraw
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitAMMWithdrawRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAMMWithdraw
     */
    readonly transactionsServiceSubmitAMMWithdrawRequest: TransactionsServiceSubmitAMMWithdrawRequest
}

/**
 * Request parameters for transactionsServiceSubmitAccountSet operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitAccountSetRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitAccountSetRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAccountSet
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAccountSet
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitAccountSetRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitAccountSet
     */
    readonly transactionsServiceSubmitAccountSetRequest: TransactionsServiceSubmitAccountSetRequest
}

/**
 * Request parameters for transactionsServiceSubmitClawback operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitClawbackRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitClawbackRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitClawback
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitClawback
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitClawbackRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitClawback
     */
    readonly transactionsServiceSubmitClawbackRequest: TransactionsServiceSubmitClawbackRequest
}

/**
 * Request parameters for transactionsServiceSubmitOfferCancel operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitOfferCancelRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitOfferCancelRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitOfferCancel
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitOfferCancel
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitOfferCancelRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitOfferCancel
     */
    readonly transactionsServiceSubmitOfferCancelRequest: TransactionsServiceSubmitOfferCancelRequest
}

/**
 * Request parameters for transactionsServiceSubmitOfferCreate operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitOfferCreateRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitOfferCreateRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitOfferCreate
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitOfferCreate
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitOfferCreateRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitOfferCreate
     */
    readonly transactionsServiceSubmitOfferCreateRequest: TransactionsServiceSubmitOfferCreateRequest
}

/**
 * Request parameters for transactionsServiceSubmitSignerListSet operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitSignerListSetRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitSignerListSetRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitSignerListSet
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitSignerListSet
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitSignerListSetRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitSignerListSet
     */
    readonly transactionsServiceSubmitSignerListSetRequest: TransactionsServiceSubmitSignerListSetRequest
}

/**
 * Request parameters for transactionsServiceSubmitTrustSet operation in TransactionsXRPApi.
 * @export
 * @interface TransactionsXRPApiTransactionsServiceSubmitTrustSetRequest
 */
export interface TransactionsXRPApiTransactionsServiceSubmitTrustSetRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitTrustSet
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitTrustSet
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSubmitTrustSetRequest}
     * @memberof TransactionsXRPApiTransactionsServiceSubmitTrustSet
     */
    readonly transactionsServiceSubmitTrustSetRequest: TransactionsServiceSubmitTrustSetRequest
}

/**
 * TransactionsXRPApi - object-oriented interface
 * @export
 * @class TransactionsXRPApi
 * @extends {BaseAPI}
 */
export class TransactionsXRPApi extends BaseAPI {
    /**
     * Create a new XRP AMM Create transaction
     * @summary Create a new XRP AMM Create transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitAMMCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitAMMCreate(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAMMCreateRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitAMMCreate(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAMMCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP AMM Deposit transaction
     * @summary Create a new XRP AMM Deposit transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitAMMDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitAMMDeposit(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAMMDepositRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitAMMDeposit(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAMMDepositRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP AMM Withdraw transaction
     * @summary Create a new XRP AMM Withdraw transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitAMMWithdrawRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitAMMWithdraw(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAMMWithdrawRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitAMMWithdraw(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAMMWithdrawRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP Account Set transaction
     * @summary Create a new XRP Account Set transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitAccountSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitAccountSet(requestParameters: TransactionsXRPApiTransactionsServiceSubmitAccountSetRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitAccountSet(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitAccountSetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP Clawback transaction to recover issued tokens
     * @summary Create a new XRP Clawback transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitClawbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitClawback(requestParameters: TransactionsXRPApiTransactionsServiceSubmitClawbackRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitClawback(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitClawbackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP Offer Cancel transaction
     * @summary Create a new XRP Offer Cancel transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitOfferCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitOfferCancel(requestParameters: TransactionsXRPApiTransactionsServiceSubmitOfferCancelRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitOfferCancel(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitOfferCancelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP Offer Create transaction
     * @summary Create a new XRP Offer Create transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitOfferCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitOfferCreate(requestParameters: TransactionsXRPApiTransactionsServiceSubmitOfferCreateRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitOfferCreate(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitOfferCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP SignerList Set transaction
     * @summary Create a new XRP SignerList Set transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitSignerListSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitSignerListSet(requestParameters: TransactionsXRPApiTransactionsServiceSubmitSignerListSetRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitSignerListSet(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitSignerListSetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new XRP Trust Set transaction
     * @summary Create a new XRP Trust Set transaction
     * @param {TransactionsXRPApiTransactionsServiceSubmitTrustSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsXRPApi
     */
    public transactionsServiceSubmitTrustSet(requestParameters: TransactionsXRPApiTransactionsServiceSubmitTrustSetRequest, options?: RawAxiosRequestConfig) {
        return TransactionsXRPApiFp(this.configuration).transactionsServiceSubmitTrustSet(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSubmitTrustSetRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

