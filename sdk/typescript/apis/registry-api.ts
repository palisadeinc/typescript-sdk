/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Commonv2Asset } from '../models';
// @ts-ignore
import type { RegistryManagementServiceManagementUpdateAssetRequest } from '../models';
// @ts-ignore
import type { RegistryManagementServiceManagementUpdateBlockchainRequest } from '../models';
// @ts-ignore
import type { RegistryManagementServiceManagementUpdateCurrencyRequest } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2BlockchainInfo } from '../models';
// @ts-ignore
import type { V2CreateAssetRequest } from '../models';
// @ts-ignore
import type { V2Currency } from '../models';
// @ts-ignore
import type { V2Import } from '../models';
// @ts-ignore
import type { V2ListAssetsRequest } from '../models';
// @ts-ignore
import type { V2ListAssetsResponse } from '../models';
// @ts-ignore
import type { V2ListBlockchainsRequest } from '../models';
// @ts-ignore
import type { V2ListBlockchainsResponse } from '../models';
// @ts-ignore
import type { V2ListCurrenciesRequest } from '../models';
// @ts-ignore
import type { V2ListCurrenciesResponse } from '../models';
// @ts-ignore
import type { V2ManagementCreateBlockchainRequest } from '../models';
// @ts-ignore
import type { V2ManagementCreateCurrencyRequest } from '../models';
// @ts-ignore
import type { V2ManagementGetImportHistoryResponse } from '../models';
// @ts-ignore
import type { V2ManagementGetSyncStatusResponse } from '../models';
// @ts-ignore
import type { V2ManagementTriggerSyncRequest } from '../models';
// @ts-ignore
import type { V2ManagementTriggerSyncResponse } from '../models';
/**
 * RegistryApi - axios parameter creator
 * @export
 */
export const RegistryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new blockchain configuration in the registry
         * @summary Create a new blockchain
         * @param {V2ManagementCreateBlockchainRequest} v2ManagementCreateBlockchainRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementCreateBlockchain: async (v2ManagementCreateBlockchainRequest: V2ManagementCreateBlockchainRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ManagementCreateBlockchainRequest' is not null or undefined
            assertParamExists('registryManagementServiceManagementCreateBlockchain', 'v2ManagementCreateBlockchainRequest', v2ManagementCreateBlockchainRequest)
            const localVarPath = `/v2/blockchains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ManagementCreateBlockchainRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new currency in the registry
         * @summary Create a new currency
         * @param {V2ManagementCreateCurrencyRequest} v2ManagementCreateCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementCreateCurrency: async (v2ManagementCreateCurrencyRequest: V2ManagementCreateCurrencyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ManagementCreateCurrencyRequest' is not null or undefined
            assertParamExists('registryManagementServiceManagementCreateCurrency', 'v2ManagementCreateCurrencyRequest', v2ManagementCreateCurrencyRequest)
            const localVarPath = `/v2/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ManagementCreateCurrencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft delete an asset from the registry
         * @summary Delete an asset
         * @param {string} id Asset ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementDeleteAsset: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registryManagementServiceManagementDeleteAsset', 'id', id)
            const localVarPath = `/v2/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft delete a blockchain from the registry
         * @summary Delete a blockchain
         * @param {RegistryManagementServiceManagementDeleteBlockchainIdEnum} id The blockchain ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementDeleteBlockchain: async (id: RegistryManagementServiceManagementDeleteBlockchainIdEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registryManagementServiceManagementDeleteBlockchain', 'id', id)
            const localVarPath = `/v2/blockchains/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft delete a currency from the registry
         * @summary Delete a currency
         * @param {string} code Currency code to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementDeleteCurrency: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('registryManagementServiceManagementDeleteCurrency', 'code', code)
            const localVarPath = `/v2/currencies/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific import operation
         * @summary Get import details
         * @param {string} importId Import ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementGetImport: async (importId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            assertParamExists('registryManagementServiceManagementGetImport', 'importId', importId)
            const localVarPath = `/v2/sync/imports/{importId}`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the history of sync import operations
         * @summary Get import history
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {string} [source] Filter by import source
         * @param {string} [status] Filter by import status
         * @param {string} [startedAtEq] Exact timestamp match
         * @param {string} [startedAtNotEq] Not equal to timestamp
         * @param {string} [startedAtBefore] Before this timestamp
         * @param {string} [startedAtAfter] After this timestamp
         * @param {string} [startedAtGte] Greater than or equal to timestamp
         * @param {string} [startedAtLte] Less than or equal to timestamp
         * @param {string} [startedAtBetweenStart] Start of time range (inclusive)
         * @param {string} [startedAtBetweenEnd] End of time range (inclusive)
         * @param {boolean} [startedAtIsNull] Check if field is null
         * @param {number} [startedAtRelativeDays] Relative days from now (negative for past, positive for future)
         * @param {string} [completedAtEq] Exact timestamp match
         * @param {string} [completedAtNotEq] Not equal to timestamp
         * @param {string} [completedAtBefore] Before this timestamp
         * @param {string} [completedAtAfter] After this timestamp
         * @param {string} [completedAtGte] Greater than or equal to timestamp
         * @param {string} [completedAtLte] Less than or equal to timestamp
         * @param {string} [completedAtBetweenStart] Start of time range (inclusive)
         * @param {string} [completedAtBetweenEnd] End of time range (inclusive)
         * @param {boolean} [completedAtIsNull] Check if field is null
         * @param {number} [completedAtRelativeDays] Relative days from now (negative for past, positive for future)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementGetImportHistory: async (paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum, source?: string, status?: string, startedAtEq?: string, startedAtNotEq?: string, startedAtBefore?: string, startedAtAfter?: string, startedAtGte?: string, startedAtLte?: string, startedAtBetweenStart?: string, startedAtBetweenEnd?: string, startedAtIsNull?: boolean, startedAtRelativeDays?: number, completedAtEq?: string, completedAtNotEq?: string, completedAtBefore?: string, completedAtAfter?: string, completedAtGte?: string, completedAtLte?: string, completedAtBetweenStart?: string, completedAtBetweenEnd?: string, completedAtIsNull?: boolean, completedAtRelativeDays?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/sync/imports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination.pageSize'] = paginationPageSize;
            }

            if (paginationPageToken !== undefined) {
                localVarQueryParameter['pagination.pageToken'] = paginationPageToken;
            }

            if (paginationOrderBy !== undefined) {
                localVarQueryParameter['pagination.orderBy'] = paginationOrderBy;
            }

            if (paginationOrder !== undefined) {
                localVarQueryParameter['pagination.order'] = paginationOrder;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startedAtEq !== undefined) {
                localVarQueryParameter['startedAt.eq'] = (startedAtEq as any instanceof Date) ?
                    (startedAtEq as any).toISOString() :
                    startedAtEq;
            }

            if (startedAtNotEq !== undefined) {
                localVarQueryParameter['startedAt.notEq'] = (startedAtNotEq as any instanceof Date) ?
                    (startedAtNotEq as any).toISOString() :
                    startedAtNotEq;
            }

            if (startedAtBefore !== undefined) {
                localVarQueryParameter['startedAt.before'] = (startedAtBefore as any instanceof Date) ?
                    (startedAtBefore as any).toISOString() :
                    startedAtBefore;
            }

            if (startedAtAfter !== undefined) {
                localVarQueryParameter['startedAt.after'] = (startedAtAfter as any instanceof Date) ?
                    (startedAtAfter as any).toISOString() :
                    startedAtAfter;
            }

            if (startedAtGte !== undefined) {
                localVarQueryParameter['startedAt.gte'] = (startedAtGte as any instanceof Date) ?
                    (startedAtGte as any).toISOString() :
                    startedAtGte;
            }

            if (startedAtLte !== undefined) {
                localVarQueryParameter['startedAt.lte'] = (startedAtLte as any instanceof Date) ?
                    (startedAtLte as any).toISOString() :
                    startedAtLte;
            }

            if (startedAtBetweenStart !== undefined) {
                localVarQueryParameter['startedAt.between.start'] = (startedAtBetweenStart as any instanceof Date) ?
                    (startedAtBetweenStart as any).toISOString() :
                    startedAtBetweenStart;
            }

            if (startedAtBetweenEnd !== undefined) {
                localVarQueryParameter['startedAt.between.end'] = (startedAtBetweenEnd as any instanceof Date) ?
                    (startedAtBetweenEnd as any).toISOString() :
                    startedAtBetweenEnd;
            }

            if (startedAtIsNull !== undefined) {
                localVarQueryParameter['startedAt.isNull'] = startedAtIsNull;
            }

            if (startedAtRelativeDays !== undefined) {
                localVarQueryParameter['startedAt.relativeDays'] = startedAtRelativeDays;
            }

            if (completedAtEq !== undefined) {
                localVarQueryParameter['completedAt.eq'] = (completedAtEq as any instanceof Date) ?
                    (completedAtEq as any).toISOString() :
                    completedAtEq;
            }

            if (completedAtNotEq !== undefined) {
                localVarQueryParameter['completedAt.notEq'] = (completedAtNotEq as any instanceof Date) ?
                    (completedAtNotEq as any).toISOString() :
                    completedAtNotEq;
            }

            if (completedAtBefore !== undefined) {
                localVarQueryParameter['completedAt.before'] = (completedAtBefore as any instanceof Date) ?
                    (completedAtBefore as any).toISOString() :
                    completedAtBefore;
            }

            if (completedAtAfter !== undefined) {
                localVarQueryParameter['completedAt.after'] = (completedAtAfter as any instanceof Date) ?
                    (completedAtAfter as any).toISOString() :
                    completedAtAfter;
            }

            if (completedAtGte !== undefined) {
                localVarQueryParameter['completedAt.gte'] = (completedAtGte as any instanceof Date) ?
                    (completedAtGte as any).toISOString() :
                    completedAtGte;
            }

            if (completedAtLte !== undefined) {
                localVarQueryParameter['completedAt.lte'] = (completedAtLte as any instanceof Date) ?
                    (completedAtLte as any).toISOString() :
                    completedAtLte;
            }

            if (completedAtBetweenStart !== undefined) {
                localVarQueryParameter['completedAt.between.start'] = (completedAtBetweenStart as any instanceof Date) ?
                    (completedAtBetweenStart as any).toISOString() :
                    completedAtBetweenStart;
            }

            if (completedAtBetweenEnd !== undefined) {
                localVarQueryParameter['completedAt.between.end'] = (completedAtBetweenEnd as any instanceof Date) ?
                    (completedAtBetweenEnd as any).toISOString() :
                    completedAtBetweenEnd;
            }

            if (completedAtIsNull !== undefined) {
                localVarQueryParameter['completedAt.isNull'] = completedAtIsNull;
            }

            if (completedAtRelativeDays !== undefined) {
                localVarQueryParameter['completedAt.relativeDays'] = completedAtRelativeDays;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current status of the sync scheduler
         * @summary Get sync status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementGetSyncStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/sync/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manually trigger a synchronization of assets from CoinGecko
         * @summary Trigger asset sync
         * @param {V2ManagementTriggerSyncRequest} v2ManagementTriggerSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementTriggerSync: async (v2ManagementTriggerSyncRequest: V2ManagementTriggerSyncRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ManagementTriggerSyncRequest' is not null or undefined
            assertParamExists('registryManagementServiceManagementTriggerSync', 'v2ManagementTriggerSyncRequest', v2ManagementTriggerSyncRequest)
            const localVarPath = `/v2/sync:trigger`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ManagementTriggerSyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing asset in the registry
         * @summary Update an asset
         * @param {string} id Asset ID to update
         * @param {RegistryManagementServiceManagementUpdateAssetRequest} registryManagementServiceManagementUpdateAssetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementUpdateAsset: async (id: string, registryManagementServiceManagementUpdateAssetRequest: RegistryManagementServiceManagementUpdateAssetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registryManagementServiceManagementUpdateAsset', 'id', id)
            // verify required parameter 'registryManagementServiceManagementUpdateAssetRequest' is not null or undefined
            assertParamExists('registryManagementServiceManagementUpdateAsset', 'registryManagementServiceManagementUpdateAssetRequest', registryManagementServiceManagementUpdateAssetRequest)
            const localVarPath = `/v2/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryManagementServiceManagementUpdateAssetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing blockchain configuration
         * @summary Update a blockchain
         * @param {RegistryManagementServiceManagementUpdateBlockchainIdEnum} id The blockchain ID to update
         * @param {RegistryManagementServiceManagementUpdateBlockchainRequest} registryManagementServiceManagementUpdateBlockchainRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementUpdateBlockchain: async (id: RegistryManagementServiceManagementUpdateBlockchainIdEnum, registryManagementServiceManagementUpdateBlockchainRequest: RegistryManagementServiceManagementUpdateBlockchainRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registryManagementServiceManagementUpdateBlockchain', 'id', id)
            // verify required parameter 'registryManagementServiceManagementUpdateBlockchainRequest' is not null or undefined
            assertParamExists('registryManagementServiceManagementUpdateBlockchain', 'registryManagementServiceManagementUpdateBlockchainRequest', registryManagementServiceManagementUpdateBlockchainRequest)
            const localVarPath = `/v2/blockchains/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryManagementServiceManagementUpdateBlockchainRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing currency in the registry
         * @summary Update a currency
         * @param {string} code Currency code to update
         * @param {RegistryManagementServiceManagementUpdateCurrencyRequest} registryManagementServiceManagementUpdateCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementUpdateCurrency: async (code: string, registryManagementServiceManagementUpdateCurrencyRequest: RegistryManagementServiceManagementUpdateCurrencyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('registryManagementServiceManagementUpdateCurrency', 'code', code)
            // verify required parameter 'registryManagementServiceManagementUpdateCurrencyRequest' is not null or undefined
            assertParamExists('registryManagementServiceManagementUpdateCurrency', 'registryManagementServiceManagementUpdateCurrencyRequest', registryManagementServiceManagementUpdateCurrencyRequest)
            const localVarPath = `/v2/currencies/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryManagementServiceManagementUpdateCurrencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new asset in the registry
         * @summary Create a new asset
         * @param {V2CreateAssetRequest} v2CreateAssetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceCreateAsset: async (v2CreateAssetRequest: V2CreateAssetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateAssetRequest' is not null or undefined
            assertParamExists('registryServiceCreateAsset', 'v2CreateAssetRequest', v2CreateAssetRequest)
            const localVarPath = `/v2/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateAssetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get asset configuration by ID
         * @summary Get an asset
         * @param {string} id Asset ID in format blockchain:contract:symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceGetAsset: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registryServiceGetAsset', 'id', id)
            const localVarPath = `/v2/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get blockchain configuration by ID
         * @summary Get a blockchain
         * @param {RegistryServiceGetBlockchainIdEnum} id The blockchain ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceGetBlockchain: async (id: RegistryServiceGetBlockchainIdEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registryServiceGetBlockchain', 'id', id)
            const localVarPath = `/v2/blockchains/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get currency configuration by code
         * @summary Get a currency
         * @param {string} code ISO 4217 currency code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceGetCurrency: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('registryServiceGetCurrency', 'code', code)
            const localVarPath = `/v2/currencies/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List assets
         * @param {V2ListAssetsRequest} v2ListAssetsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListAssets: async (v2ListAssetsRequest: V2ListAssetsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ListAssetsRequest' is not null or undefined
            assertParamExists('registryServiceListAssets', 'v2ListAssetsRequest', v2ListAssetsRequest)
            const localVarPath = `/v2/assets:list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ListAssetsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List assets
         * @param {number} [filterBlockchainEq] Equals
         * @param {number} [filterBlockchainNotEq] Not equal to
         * @param {Array<number>} [filterBlockchainIn] Value is in the list
         * @param {Array<number>} [filterBlockchainNotIn] Value is not in the list
         * @param {boolean} [filterBlockchainIsNull] Check if field is null
         * @param {number} [filterBlockchainGt] Greater than
         * @param {number} [filterBlockchainGte] Greater than or equal to
         * @param {number} [filterBlockchainLt] Less than
         * @param {number} [filterBlockchainLte] Less than or equal to
         * @param {boolean} [filterEnabledEq] Equals
         * @param {boolean} [filterEnabledIsNull] Check if field is null
         * @param {boolean} [filterIsVettedEq] Equals
         * @param {boolean} [filterIsVettedIsNull] Check if field is null
         * @param {number} [filterStandardEq] Equals
         * @param {number} [filterStandardNotEq] Not equal to
         * @param {Array<number>} [filterStandardIn] Value is in the list
         * @param {Array<number>} [filterStandardNotIn] Value is not in the list
         * @param {boolean} [filterStandardIsNull] Check if field is null
         * @param {number} [filterStandardGt] Greater than
         * @param {number} [filterStandardGte] Greater than or equal to
         * @param {number} [filterStandardLt] Less than
         * @param {number} [filterStandardLte] Less than or equal to
         * @param {string} [filterOrganizationIdEq] Exact match
         * @param {string} [filterOrganizationIdNotEq] Not equal to
         * @param {string} [filterOrganizationIdContains] Contains substring (case-insensitive)
         * @param {string} [filterOrganizationIdStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterOrganizationIdEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterOrganizationIdIn] Value is in the list
         * @param {Array<string>} [filterOrganizationIdNotIn] Value is not in the list
         * @param {string} [filterOrganizationIdRegex] Regular expression match
         * @param {boolean} [filterOrganizationIdIsNull] Check if field is null
         * @param {string} [filterOrganizationIdFuzzyValue] Value to match against
         * @param {number} [filterOrganizationIdFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterSymbolEq] Exact match
         * @param {string} [filterSymbolNotEq] Not equal to
         * @param {string} [filterSymbolContains] Contains substring (case-insensitive)
         * @param {string} [filterSymbolStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterSymbolEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterSymbolIn] Value is in the list
         * @param {Array<string>} [filterSymbolNotIn] Value is not in the list
         * @param {string} [filterSymbolRegex] Regular expression match
         * @param {boolean} [filterSymbolIsNull] Check if field is null
         * @param {string} [filterSymbolFuzzyValue] Value to match against
         * @param {number} [filterSymbolFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterNameEq] Exact match
         * @param {string} [filterNameNotEq] Not equal to
         * @param {string} [filterNameContains] Contains substring (case-insensitive)
         * @param {string} [filterNameStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterNameEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterNameIn] Value is in the list
         * @param {Array<string>} [filterNameNotIn] Value is not in the list
         * @param {string} [filterNameRegex] Regular expression match
         * @param {boolean} [filterNameIsNull] Check if field is null
         * @param {string} [filterNameFuzzyValue] Value to match against
         * @param {number} [filterNameFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterContractAddressEq] Exact match
         * @param {string} [filterContractAddressNotEq] Not equal to
         * @param {string} [filterContractAddressContains] Contains substring (case-insensitive)
         * @param {string} [filterContractAddressStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterContractAddressEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterContractAddressIn] Value is in the list
         * @param {Array<string>} [filterContractAddressNotIn] Value is not in the list
         * @param {string} [filterContractAddressRegex] Regular expression match
         * @param {boolean} [filterContractAddressIsNull] Check if field is null
         * @param {string} [filterContractAddressFuzzyValue] Value to match against
         * @param {number} [filterContractAddressFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterSourceEq] Exact match
         * @param {string} [filterSourceNotEq] Not equal to
         * @param {string} [filterSourceContains] Contains substring (case-insensitive)
         * @param {string} [filterSourceStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterSourceEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterSourceIn] Value is in the list
         * @param {Array<string>} [filterSourceNotIn] Value is not in the list
         * @param {string} [filterSourceRegex] Regular expression match
         * @param {boolean} [filterSourceIsNull] Check if field is null
         * @param {string} [filterSourceFuzzyValue] Value to match against
         * @param {number} [filterSourceFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterLastSyncedAtEq] Exact timestamp match
         * @param {string} [filterLastSyncedAtNotEq] Not equal to timestamp
         * @param {string} [filterLastSyncedAtBefore] Before this timestamp
         * @param {string} [filterLastSyncedAtAfter] After this timestamp
         * @param {string} [filterLastSyncedAtGte] Greater than or equal to timestamp
         * @param {string} [filterLastSyncedAtLte] Less than or equal to timestamp
         * @param {string} [filterLastSyncedAtBetweenStart] Start of time range (inclusive)
         * @param {string} [filterLastSyncedAtBetweenEnd] End of time range (inclusive)
         * @param {boolean} [filterLastSyncedAtIsNull] Check if field is null
         * @param {number} [filterLastSyncedAtRelativeDays] Relative days from now (negative for past, positive for future)
         * @param {boolean} [filterHasChecksumEq] Equals
         * @param {boolean} [filterHasChecksumIsNull] Check if field is null
         * @param {string} [searchTerm] Search term
         * @param {Array<string>} [searchFields] Fields to search in
         * @param {RegistryServiceListAssets2SearchTypeEnum} [searchType] Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
         * @param {number} [searchMinScore] Minimum relevance score for fuzzy/fulltext search
         * @param {boolean} [searchOptionsCaseSensitive] Enable case-sensitive search (default: false)
         * @param {number} [searchOptionsMinTermLength] Minimum search term length
         * @param {number} [searchOptionsMaxResults] Maximum number of results to return
         * @param {boolean} [searchOptionsMultiTermAnd] Use AND logic for multiple terms (default: false for OR)
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryServiceListAssets2PaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListAssets2: async (filterBlockchainEq?: number, filterBlockchainNotEq?: number, filterBlockchainIn?: Array<number>, filterBlockchainNotIn?: Array<number>, filterBlockchainIsNull?: boolean, filterBlockchainGt?: number, filterBlockchainGte?: number, filterBlockchainLt?: number, filterBlockchainLte?: number, filterEnabledEq?: boolean, filterEnabledIsNull?: boolean, filterIsVettedEq?: boolean, filterIsVettedIsNull?: boolean, filterStandardEq?: number, filterStandardNotEq?: number, filterStandardIn?: Array<number>, filterStandardNotIn?: Array<number>, filterStandardIsNull?: boolean, filterStandardGt?: number, filterStandardGte?: number, filterStandardLt?: number, filterStandardLte?: number, filterOrganizationIdEq?: string, filterOrganizationIdNotEq?: string, filterOrganizationIdContains?: string, filterOrganizationIdStartsWith?: string, filterOrganizationIdEndsWith?: string, filterOrganizationIdIn?: Array<string>, filterOrganizationIdNotIn?: Array<string>, filterOrganizationIdRegex?: string, filterOrganizationIdIsNull?: boolean, filterOrganizationIdFuzzyValue?: string, filterOrganizationIdFuzzyMinSimilarity?: number, filterSymbolEq?: string, filterSymbolNotEq?: string, filterSymbolContains?: string, filterSymbolStartsWith?: string, filterSymbolEndsWith?: string, filterSymbolIn?: Array<string>, filterSymbolNotIn?: Array<string>, filterSymbolRegex?: string, filterSymbolIsNull?: boolean, filterSymbolFuzzyValue?: string, filterSymbolFuzzyMinSimilarity?: number, filterNameEq?: string, filterNameNotEq?: string, filterNameContains?: string, filterNameStartsWith?: string, filterNameEndsWith?: string, filterNameIn?: Array<string>, filterNameNotIn?: Array<string>, filterNameRegex?: string, filterNameIsNull?: boolean, filterNameFuzzyValue?: string, filterNameFuzzyMinSimilarity?: number, filterContractAddressEq?: string, filterContractAddressNotEq?: string, filterContractAddressContains?: string, filterContractAddressStartsWith?: string, filterContractAddressEndsWith?: string, filterContractAddressIn?: Array<string>, filterContractAddressNotIn?: Array<string>, filterContractAddressRegex?: string, filterContractAddressIsNull?: boolean, filterContractAddressFuzzyValue?: string, filterContractAddressFuzzyMinSimilarity?: number, filterSourceEq?: string, filterSourceNotEq?: string, filterSourceContains?: string, filterSourceStartsWith?: string, filterSourceEndsWith?: string, filterSourceIn?: Array<string>, filterSourceNotIn?: Array<string>, filterSourceRegex?: string, filterSourceIsNull?: boolean, filterSourceFuzzyValue?: string, filterSourceFuzzyMinSimilarity?: number, filterLastSyncedAtEq?: string, filterLastSyncedAtNotEq?: string, filterLastSyncedAtBefore?: string, filterLastSyncedAtAfter?: string, filterLastSyncedAtGte?: string, filterLastSyncedAtLte?: string, filterLastSyncedAtBetweenStart?: string, filterLastSyncedAtBetweenEnd?: string, filterLastSyncedAtIsNull?: boolean, filterLastSyncedAtRelativeDays?: number, filterHasChecksumEq?: boolean, filterHasChecksumIsNull?: boolean, searchTerm?: string, searchFields?: Array<string>, searchType?: RegistryServiceListAssets2SearchTypeEnum, searchMinScore?: number, searchOptionsCaseSensitive?: boolean, searchOptionsMinTermLength?: number, searchOptionsMaxResults?: number, searchOptionsMultiTermAnd?: boolean, paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryServiceListAssets2PaginationOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filterBlockchainEq !== undefined) {
                localVarQueryParameter['filter.blockchain.eq'] = filterBlockchainEq;
            }

            if (filterBlockchainNotEq !== undefined) {
                localVarQueryParameter['filter.blockchain.notEq'] = filterBlockchainNotEq;
            }

            if (filterBlockchainIn) {
                localVarQueryParameter['filter.blockchain.in'] = filterBlockchainIn;
            }

            if (filterBlockchainNotIn) {
                localVarQueryParameter['filter.blockchain.notIn'] = filterBlockchainNotIn;
            }

            if (filterBlockchainIsNull !== undefined) {
                localVarQueryParameter['filter.blockchain.isNull'] = filterBlockchainIsNull;
            }

            if (filterBlockchainGt !== undefined) {
                localVarQueryParameter['filter.blockchain.gt'] = filterBlockchainGt;
            }

            if (filterBlockchainGte !== undefined) {
                localVarQueryParameter['filter.blockchain.gte'] = filterBlockchainGte;
            }

            if (filterBlockchainLt !== undefined) {
                localVarQueryParameter['filter.blockchain.lt'] = filterBlockchainLt;
            }

            if (filterBlockchainLte !== undefined) {
                localVarQueryParameter['filter.blockchain.lte'] = filterBlockchainLte;
            }

            if (filterEnabledEq !== undefined) {
                localVarQueryParameter['filter.enabled.eq'] = filterEnabledEq;
            }

            if (filterEnabledIsNull !== undefined) {
                localVarQueryParameter['filter.enabled.isNull'] = filterEnabledIsNull;
            }

            if (filterIsVettedEq !== undefined) {
                localVarQueryParameter['filter.isVetted.eq'] = filterIsVettedEq;
            }

            if (filterIsVettedIsNull !== undefined) {
                localVarQueryParameter['filter.isVetted.isNull'] = filterIsVettedIsNull;
            }

            if (filterStandardEq !== undefined) {
                localVarQueryParameter['filter.standard.eq'] = filterStandardEq;
            }

            if (filterStandardNotEq !== undefined) {
                localVarQueryParameter['filter.standard.notEq'] = filterStandardNotEq;
            }

            if (filterStandardIn) {
                localVarQueryParameter['filter.standard.in'] = filterStandardIn;
            }

            if (filterStandardNotIn) {
                localVarQueryParameter['filter.standard.notIn'] = filterStandardNotIn;
            }

            if (filterStandardIsNull !== undefined) {
                localVarQueryParameter['filter.standard.isNull'] = filterStandardIsNull;
            }

            if (filterStandardGt !== undefined) {
                localVarQueryParameter['filter.standard.gt'] = filterStandardGt;
            }

            if (filterStandardGte !== undefined) {
                localVarQueryParameter['filter.standard.gte'] = filterStandardGte;
            }

            if (filterStandardLt !== undefined) {
                localVarQueryParameter['filter.standard.lt'] = filterStandardLt;
            }

            if (filterStandardLte !== undefined) {
                localVarQueryParameter['filter.standard.lte'] = filterStandardLte;
            }

            if (filterOrganizationIdEq !== undefined) {
                localVarQueryParameter['filter.organizationId.eq'] = filterOrganizationIdEq;
            }

            if (filterOrganizationIdNotEq !== undefined) {
                localVarQueryParameter['filter.organizationId.notEq'] = filterOrganizationIdNotEq;
            }

            if (filterOrganizationIdContains !== undefined) {
                localVarQueryParameter['filter.organizationId.contains'] = filterOrganizationIdContains;
            }

            if (filterOrganizationIdStartsWith !== undefined) {
                localVarQueryParameter['filter.organizationId.startsWith'] = filterOrganizationIdStartsWith;
            }

            if (filterOrganizationIdEndsWith !== undefined) {
                localVarQueryParameter['filter.organizationId.endsWith'] = filterOrganizationIdEndsWith;
            }

            if (filterOrganizationIdIn) {
                localVarQueryParameter['filter.organizationId.in'] = filterOrganizationIdIn;
            }

            if (filterOrganizationIdNotIn) {
                localVarQueryParameter['filter.organizationId.notIn'] = filterOrganizationIdNotIn;
            }

            if (filterOrganizationIdRegex !== undefined) {
                localVarQueryParameter['filter.organizationId.regex'] = filterOrganizationIdRegex;
            }

            if (filterOrganizationIdIsNull !== undefined) {
                localVarQueryParameter['filter.organizationId.isNull'] = filterOrganizationIdIsNull;
            }

            if (filterOrganizationIdFuzzyValue !== undefined) {
                localVarQueryParameter['filter.organizationId.fuzzy.value'] = filterOrganizationIdFuzzyValue;
            }

            if (filterOrganizationIdFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.organizationId.fuzzy.minSimilarity'] = filterOrganizationIdFuzzyMinSimilarity;
            }

            if (filterSymbolEq !== undefined) {
                localVarQueryParameter['filter.symbol.eq'] = filterSymbolEq;
            }

            if (filterSymbolNotEq !== undefined) {
                localVarQueryParameter['filter.symbol.notEq'] = filterSymbolNotEq;
            }

            if (filterSymbolContains !== undefined) {
                localVarQueryParameter['filter.symbol.contains'] = filterSymbolContains;
            }

            if (filterSymbolStartsWith !== undefined) {
                localVarQueryParameter['filter.symbol.startsWith'] = filterSymbolStartsWith;
            }

            if (filterSymbolEndsWith !== undefined) {
                localVarQueryParameter['filter.symbol.endsWith'] = filterSymbolEndsWith;
            }

            if (filterSymbolIn) {
                localVarQueryParameter['filter.symbol.in'] = filterSymbolIn;
            }

            if (filterSymbolNotIn) {
                localVarQueryParameter['filter.symbol.notIn'] = filterSymbolNotIn;
            }

            if (filterSymbolRegex !== undefined) {
                localVarQueryParameter['filter.symbol.regex'] = filterSymbolRegex;
            }

            if (filterSymbolIsNull !== undefined) {
                localVarQueryParameter['filter.symbol.isNull'] = filterSymbolIsNull;
            }

            if (filterSymbolFuzzyValue !== undefined) {
                localVarQueryParameter['filter.symbol.fuzzy.value'] = filterSymbolFuzzyValue;
            }

            if (filterSymbolFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.symbol.fuzzy.minSimilarity'] = filterSymbolFuzzyMinSimilarity;
            }

            if (filterNameEq !== undefined) {
                localVarQueryParameter['filter.name.eq'] = filterNameEq;
            }

            if (filterNameNotEq !== undefined) {
                localVarQueryParameter['filter.name.notEq'] = filterNameNotEq;
            }

            if (filterNameContains !== undefined) {
                localVarQueryParameter['filter.name.contains'] = filterNameContains;
            }

            if (filterNameStartsWith !== undefined) {
                localVarQueryParameter['filter.name.startsWith'] = filterNameStartsWith;
            }

            if (filterNameEndsWith !== undefined) {
                localVarQueryParameter['filter.name.endsWith'] = filterNameEndsWith;
            }

            if (filterNameIn) {
                localVarQueryParameter['filter.name.in'] = filterNameIn;
            }

            if (filterNameNotIn) {
                localVarQueryParameter['filter.name.notIn'] = filterNameNotIn;
            }

            if (filterNameRegex !== undefined) {
                localVarQueryParameter['filter.name.regex'] = filterNameRegex;
            }

            if (filterNameIsNull !== undefined) {
                localVarQueryParameter['filter.name.isNull'] = filterNameIsNull;
            }

            if (filterNameFuzzyValue !== undefined) {
                localVarQueryParameter['filter.name.fuzzy.value'] = filterNameFuzzyValue;
            }

            if (filterNameFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.name.fuzzy.minSimilarity'] = filterNameFuzzyMinSimilarity;
            }

            if (filterContractAddressEq !== undefined) {
                localVarQueryParameter['filter.contractAddress.eq'] = filterContractAddressEq;
            }

            if (filterContractAddressNotEq !== undefined) {
                localVarQueryParameter['filter.contractAddress.notEq'] = filterContractAddressNotEq;
            }

            if (filterContractAddressContains !== undefined) {
                localVarQueryParameter['filter.contractAddress.contains'] = filterContractAddressContains;
            }

            if (filterContractAddressStartsWith !== undefined) {
                localVarQueryParameter['filter.contractAddress.startsWith'] = filterContractAddressStartsWith;
            }

            if (filterContractAddressEndsWith !== undefined) {
                localVarQueryParameter['filter.contractAddress.endsWith'] = filterContractAddressEndsWith;
            }

            if (filterContractAddressIn) {
                localVarQueryParameter['filter.contractAddress.in'] = filterContractAddressIn;
            }

            if (filterContractAddressNotIn) {
                localVarQueryParameter['filter.contractAddress.notIn'] = filterContractAddressNotIn;
            }

            if (filterContractAddressRegex !== undefined) {
                localVarQueryParameter['filter.contractAddress.regex'] = filterContractAddressRegex;
            }

            if (filterContractAddressIsNull !== undefined) {
                localVarQueryParameter['filter.contractAddress.isNull'] = filterContractAddressIsNull;
            }

            if (filterContractAddressFuzzyValue !== undefined) {
                localVarQueryParameter['filter.contractAddress.fuzzy.value'] = filterContractAddressFuzzyValue;
            }

            if (filterContractAddressFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.contractAddress.fuzzy.minSimilarity'] = filterContractAddressFuzzyMinSimilarity;
            }

            if (filterSourceEq !== undefined) {
                localVarQueryParameter['filter.source.eq'] = filterSourceEq;
            }

            if (filterSourceNotEq !== undefined) {
                localVarQueryParameter['filter.source.notEq'] = filterSourceNotEq;
            }

            if (filterSourceContains !== undefined) {
                localVarQueryParameter['filter.source.contains'] = filterSourceContains;
            }

            if (filterSourceStartsWith !== undefined) {
                localVarQueryParameter['filter.source.startsWith'] = filterSourceStartsWith;
            }

            if (filterSourceEndsWith !== undefined) {
                localVarQueryParameter['filter.source.endsWith'] = filterSourceEndsWith;
            }

            if (filterSourceIn) {
                localVarQueryParameter['filter.source.in'] = filterSourceIn;
            }

            if (filterSourceNotIn) {
                localVarQueryParameter['filter.source.notIn'] = filterSourceNotIn;
            }

            if (filterSourceRegex !== undefined) {
                localVarQueryParameter['filter.source.regex'] = filterSourceRegex;
            }

            if (filterSourceIsNull !== undefined) {
                localVarQueryParameter['filter.source.isNull'] = filterSourceIsNull;
            }

            if (filterSourceFuzzyValue !== undefined) {
                localVarQueryParameter['filter.source.fuzzy.value'] = filterSourceFuzzyValue;
            }

            if (filterSourceFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.source.fuzzy.minSimilarity'] = filterSourceFuzzyMinSimilarity;
            }

            if (filterLastSyncedAtEq !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.eq'] = (filterLastSyncedAtEq as any instanceof Date) ?
                    (filterLastSyncedAtEq as any).toISOString() :
                    filterLastSyncedAtEq;
            }

            if (filterLastSyncedAtNotEq !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.notEq'] = (filterLastSyncedAtNotEq as any instanceof Date) ?
                    (filterLastSyncedAtNotEq as any).toISOString() :
                    filterLastSyncedAtNotEq;
            }

            if (filterLastSyncedAtBefore !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.before'] = (filterLastSyncedAtBefore as any instanceof Date) ?
                    (filterLastSyncedAtBefore as any).toISOString() :
                    filterLastSyncedAtBefore;
            }

            if (filterLastSyncedAtAfter !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.after'] = (filterLastSyncedAtAfter as any instanceof Date) ?
                    (filterLastSyncedAtAfter as any).toISOString() :
                    filterLastSyncedAtAfter;
            }

            if (filterLastSyncedAtGte !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.gte'] = (filterLastSyncedAtGte as any instanceof Date) ?
                    (filterLastSyncedAtGte as any).toISOString() :
                    filterLastSyncedAtGte;
            }

            if (filterLastSyncedAtLte !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.lte'] = (filterLastSyncedAtLte as any instanceof Date) ?
                    (filterLastSyncedAtLte as any).toISOString() :
                    filterLastSyncedAtLte;
            }

            if (filterLastSyncedAtBetweenStart !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.between.start'] = (filterLastSyncedAtBetweenStart as any instanceof Date) ?
                    (filterLastSyncedAtBetweenStart as any).toISOString() :
                    filterLastSyncedAtBetweenStart;
            }

            if (filterLastSyncedAtBetweenEnd !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.between.end'] = (filterLastSyncedAtBetweenEnd as any instanceof Date) ?
                    (filterLastSyncedAtBetweenEnd as any).toISOString() :
                    filterLastSyncedAtBetweenEnd;
            }

            if (filterLastSyncedAtIsNull !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.isNull'] = filterLastSyncedAtIsNull;
            }

            if (filterLastSyncedAtRelativeDays !== undefined) {
                localVarQueryParameter['filter.lastSyncedAt.relativeDays'] = filterLastSyncedAtRelativeDays;
            }

            if (filterHasChecksumEq !== undefined) {
                localVarQueryParameter['filter.hasChecksum.eq'] = filterHasChecksumEq;
            }

            if (filterHasChecksumIsNull !== undefined) {
                localVarQueryParameter['filter.hasChecksum.isNull'] = filterHasChecksumIsNull;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['search.term'] = searchTerm;
            }

            if (searchFields) {
                localVarQueryParameter['search.fields'] = searchFields;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search.type'] = searchType;
            }

            if (searchMinScore !== undefined) {
                localVarQueryParameter['search.minScore'] = searchMinScore;
            }

            if (searchOptionsCaseSensitive !== undefined) {
                localVarQueryParameter['search.options.caseSensitive'] = searchOptionsCaseSensitive;
            }

            if (searchOptionsMinTermLength !== undefined) {
                localVarQueryParameter['search.options.minTermLength'] = searchOptionsMinTermLength;
            }

            if (searchOptionsMaxResults !== undefined) {
                localVarQueryParameter['search.options.maxResults'] = searchOptionsMaxResults;
            }

            if (searchOptionsMultiTermAnd !== undefined) {
                localVarQueryParameter['search.options.multiTermAnd'] = searchOptionsMultiTermAnd;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination.pageSize'] = paginationPageSize;
            }

            if (paginationPageToken !== undefined) {
                localVarQueryParameter['pagination.pageToken'] = paginationPageToken;
            }

            if (paginationOrderBy !== undefined) {
                localVarQueryParameter['pagination.orderBy'] = paginationOrderBy;
            }

            if (paginationOrder !== undefined) {
                localVarQueryParameter['pagination.order'] = paginationOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List blockchains
         * @param {V2ListBlockchainsRequest} v2ListBlockchainsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListBlockchains: async (v2ListBlockchainsRequest: V2ListBlockchainsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ListBlockchainsRequest' is not null or undefined
            assertParamExists('registryServiceListBlockchains', 'v2ListBlockchainsRequest', v2ListBlockchainsRequest)
            const localVarPath = `/v2/blockchains:list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ListBlockchainsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List blockchains
         * @param {number} [filterStatusEq] Equals
         * @param {number} [filterStatusNotEq] Not equal to
         * @param {Array<number>} [filterStatusIn] Value is in the list
         * @param {Array<number>} [filterStatusNotIn] Value is not in the list
         * @param {boolean} [filterStatusIsNull] Check if field is null
         * @param {number} [filterStatusGt] Greater than
         * @param {number} [filterStatusGte] Greater than or equal to
         * @param {number} [filterStatusLt] Less than
         * @param {number} [filterStatusLte] Less than or equal to
         * @param {string} [filterNameEq] Exact match
         * @param {string} [filterNameNotEq] Not equal to
         * @param {string} [filterNameContains] Contains substring (case-insensitive)
         * @param {string} [filterNameStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterNameEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterNameIn] Value is in the list
         * @param {Array<string>} [filterNameNotIn] Value is not in the list
         * @param {string} [filterNameRegex] Regular expression match
         * @param {boolean} [filterNameIsNull] Check if field is null
         * @param {string} [filterNameFuzzyValue] Value to match against
         * @param {number} [filterNameFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterChainIdEq] Exact match
         * @param {string} [filterChainIdNotEq] Not equal to
         * @param {string} [filterChainIdContains] Contains substring (case-insensitive)
         * @param {string} [filterChainIdStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterChainIdEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterChainIdIn] Value is in the list
         * @param {Array<string>} [filterChainIdNotIn] Value is not in the list
         * @param {string} [filterChainIdRegex] Regular expression match
         * @param {boolean} [filterChainIdIsNull] Check if field is null
         * @param {string} [filterChainIdFuzzyValue] Value to match against
         * @param {number} [filterChainIdFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {number} [filterChecksumTypeEq] Equals
         * @param {number} [filterChecksumTypeNotEq] Not equal to
         * @param {Array<number>} [filterChecksumTypeIn] Value is in the list
         * @param {Array<number>} [filterChecksumTypeNotIn] Value is not in the list
         * @param {boolean} [filterChecksumTypeIsNull] Check if field is null
         * @param {number} [filterChecksumTypeGt] Greater than
         * @param {number} [filterChecksumTypeGte] Greater than or equal to
         * @param {number} [filterChecksumTypeLt] Less than
         * @param {number} [filterChecksumTypeLte] Less than or equal to
         * @param {string} [filterChainEq] Exact match
         * @param {string} [filterChainNotEq] Not equal to
         * @param {string} [filterChainContains] Contains substring (case-insensitive)
         * @param {string} [filterChainStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterChainEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterChainIn] Value is in the list
         * @param {Array<string>} [filterChainNotIn] Value is not in the list
         * @param {string} [filterChainRegex] Regular expression match
         * @param {boolean} [filterChainIsNull] Check if field is null
         * @param {string} [filterChainFuzzyValue] Value to match against
         * @param {number} [filterChainFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [searchTerm] Search term
         * @param {Array<string>} [searchFields] Fields to search in
         * @param {RegistryServiceListBlockchains2SearchTypeEnum} [searchType] Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
         * @param {number} [searchMinScore] Minimum relevance score for fuzzy/fulltext search
         * @param {boolean} [searchOptionsCaseSensitive] Enable case-sensitive search (default: false)
         * @param {number} [searchOptionsMinTermLength] Minimum search term length
         * @param {number} [searchOptionsMaxResults] Maximum number of results to return
         * @param {boolean} [searchOptionsMultiTermAnd] Use AND logic for multiple terms (default: false for OR)
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryServiceListBlockchains2PaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListBlockchains2: async (filterStatusEq?: number, filterStatusNotEq?: number, filterStatusIn?: Array<number>, filterStatusNotIn?: Array<number>, filterStatusIsNull?: boolean, filterStatusGt?: number, filterStatusGte?: number, filterStatusLt?: number, filterStatusLte?: number, filterNameEq?: string, filterNameNotEq?: string, filterNameContains?: string, filterNameStartsWith?: string, filterNameEndsWith?: string, filterNameIn?: Array<string>, filterNameNotIn?: Array<string>, filterNameRegex?: string, filterNameIsNull?: boolean, filterNameFuzzyValue?: string, filterNameFuzzyMinSimilarity?: number, filterChainIdEq?: string, filterChainIdNotEq?: string, filterChainIdContains?: string, filterChainIdStartsWith?: string, filterChainIdEndsWith?: string, filterChainIdIn?: Array<string>, filterChainIdNotIn?: Array<string>, filterChainIdRegex?: string, filterChainIdIsNull?: boolean, filterChainIdFuzzyValue?: string, filterChainIdFuzzyMinSimilarity?: number, filterChecksumTypeEq?: number, filterChecksumTypeNotEq?: number, filterChecksumTypeIn?: Array<number>, filterChecksumTypeNotIn?: Array<number>, filterChecksumTypeIsNull?: boolean, filterChecksumTypeGt?: number, filterChecksumTypeGte?: number, filterChecksumTypeLt?: number, filterChecksumTypeLte?: number, filterChainEq?: string, filterChainNotEq?: string, filterChainContains?: string, filterChainStartsWith?: string, filterChainEndsWith?: string, filterChainIn?: Array<string>, filterChainNotIn?: Array<string>, filterChainRegex?: string, filterChainIsNull?: boolean, filterChainFuzzyValue?: string, filterChainFuzzyMinSimilarity?: number, searchTerm?: string, searchFields?: Array<string>, searchType?: RegistryServiceListBlockchains2SearchTypeEnum, searchMinScore?: number, searchOptionsCaseSensitive?: boolean, searchOptionsMinTermLength?: number, searchOptionsMaxResults?: number, searchOptionsMultiTermAnd?: boolean, paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryServiceListBlockchains2PaginationOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/blockchains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filterStatusEq !== undefined) {
                localVarQueryParameter['filter.status.eq'] = filterStatusEq;
            }

            if (filterStatusNotEq !== undefined) {
                localVarQueryParameter['filter.status.notEq'] = filterStatusNotEq;
            }

            if (filterStatusIn) {
                localVarQueryParameter['filter.status.in'] = filterStatusIn;
            }

            if (filterStatusNotIn) {
                localVarQueryParameter['filter.status.notIn'] = filterStatusNotIn;
            }

            if (filterStatusIsNull !== undefined) {
                localVarQueryParameter['filter.status.isNull'] = filterStatusIsNull;
            }

            if (filterStatusGt !== undefined) {
                localVarQueryParameter['filter.status.gt'] = filterStatusGt;
            }

            if (filterStatusGte !== undefined) {
                localVarQueryParameter['filter.status.gte'] = filterStatusGte;
            }

            if (filterStatusLt !== undefined) {
                localVarQueryParameter['filter.status.lt'] = filterStatusLt;
            }

            if (filterStatusLte !== undefined) {
                localVarQueryParameter['filter.status.lte'] = filterStatusLte;
            }

            if (filterNameEq !== undefined) {
                localVarQueryParameter['filter.name.eq'] = filterNameEq;
            }

            if (filterNameNotEq !== undefined) {
                localVarQueryParameter['filter.name.notEq'] = filterNameNotEq;
            }

            if (filterNameContains !== undefined) {
                localVarQueryParameter['filter.name.contains'] = filterNameContains;
            }

            if (filterNameStartsWith !== undefined) {
                localVarQueryParameter['filter.name.startsWith'] = filterNameStartsWith;
            }

            if (filterNameEndsWith !== undefined) {
                localVarQueryParameter['filter.name.endsWith'] = filterNameEndsWith;
            }

            if (filterNameIn) {
                localVarQueryParameter['filter.name.in'] = filterNameIn;
            }

            if (filterNameNotIn) {
                localVarQueryParameter['filter.name.notIn'] = filterNameNotIn;
            }

            if (filterNameRegex !== undefined) {
                localVarQueryParameter['filter.name.regex'] = filterNameRegex;
            }

            if (filterNameIsNull !== undefined) {
                localVarQueryParameter['filter.name.isNull'] = filterNameIsNull;
            }

            if (filterNameFuzzyValue !== undefined) {
                localVarQueryParameter['filter.name.fuzzy.value'] = filterNameFuzzyValue;
            }

            if (filterNameFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.name.fuzzy.minSimilarity'] = filterNameFuzzyMinSimilarity;
            }

            if (filterChainIdEq !== undefined) {
                localVarQueryParameter['filter.chainId.eq'] = filterChainIdEq;
            }

            if (filterChainIdNotEq !== undefined) {
                localVarQueryParameter['filter.chainId.notEq'] = filterChainIdNotEq;
            }

            if (filterChainIdContains !== undefined) {
                localVarQueryParameter['filter.chainId.contains'] = filterChainIdContains;
            }

            if (filterChainIdStartsWith !== undefined) {
                localVarQueryParameter['filter.chainId.startsWith'] = filterChainIdStartsWith;
            }

            if (filterChainIdEndsWith !== undefined) {
                localVarQueryParameter['filter.chainId.endsWith'] = filterChainIdEndsWith;
            }

            if (filterChainIdIn) {
                localVarQueryParameter['filter.chainId.in'] = filterChainIdIn;
            }

            if (filterChainIdNotIn) {
                localVarQueryParameter['filter.chainId.notIn'] = filterChainIdNotIn;
            }

            if (filterChainIdRegex !== undefined) {
                localVarQueryParameter['filter.chainId.regex'] = filterChainIdRegex;
            }

            if (filterChainIdIsNull !== undefined) {
                localVarQueryParameter['filter.chainId.isNull'] = filterChainIdIsNull;
            }

            if (filterChainIdFuzzyValue !== undefined) {
                localVarQueryParameter['filter.chainId.fuzzy.value'] = filterChainIdFuzzyValue;
            }

            if (filterChainIdFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.chainId.fuzzy.minSimilarity'] = filterChainIdFuzzyMinSimilarity;
            }

            if (filterChecksumTypeEq !== undefined) {
                localVarQueryParameter['filter.checksumType.eq'] = filterChecksumTypeEq;
            }

            if (filterChecksumTypeNotEq !== undefined) {
                localVarQueryParameter['filter.checksumType.notEq'] = filterChecksumTypeNotEq;
            }

            if (filterChecksumTypeIn) {
                localVarQueryParameter['filter.checksumType.in'] = filterChecksumTypeIn;
            }

            if (filterChecksumTypeNotIn) {
                localVarQueryParameter['filter.checksumType.notIn'] = filterChecksumTypeNotIn;
            }

            if (filterChecksumTypeIsNull !== undefined) {
                localVarQueryParameter['filter.checksumType.isNull'] = filterChecksumTypeIsNull;
            }

            if (filterChecksumTypeGt !== undefined) {
                localVarQueryParameter['filter.checksumType.gt'] = filterChecksumTypeGt;
            }

            if (filterChecksumTypeGte !== undefined) {
                localVarQueryParameter['filter.checksumType.gte'] = filterChecksumTypeGte;
            }

            if (filterChecksumTypeLt !== undefined) {
                localVarQueryParameter['filter.checksumType.lt'] = filterChecksumTypeLt;
            }

            if (filterChecksumTypeLte !== undefined) {
                localVarQueryParameter['filter.checksumType.lte'] = filterChecksumTypeLte;
            }

            if (filterChainEq !== undefined) {
                localVarQueryParameter['filter.chain.eq'] = filterChainEq;
            }

            if (filterChainNotEq !== undefined) {
                localVarQueryParameter['filter.chain.notEq'] = filterChainNotEq;
            }

            if (filterChainContains !== undefined) {
                localVarQueryParameter['filter.chain.contains'] = filterChainContains;
            }

            if (filterChainStartsWith !== undefined) {
                localVarQueryParameter['filter.chain.startsWith'] = filterChainStartsWith;
            }

            if (filterChainEndsWith !== undefined) {
                localVarQueryParameter['filter.chain.endsWith'] = filterChainEndsWith;
            }

            if (filterChainIn) {
                localVarQueryParameter['filter.chain.in'] = filterChainIn;
            }

            if (filterChainNotIn) {
                localVarQueryParameter['filter.chain.notIn'] = filterChainNotIn;
            }

            if (filterChainRegex !== undefined) {
                localVarQueryParameter['filter.chain.regex'] = filterChainRegex;
            }

            if (filterChainIsNull !== undefined) {
                localVarQueryParameter['filter.chain.isNull'] = filterChainIsNull;
            }

            if (filterChainFuzzyValue !== undefined) {
                localVarQueryParameter['filter.chain.fuzzy.value'] = filterChainFuzzyValue;
            }

            if (filterChainFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.chain.fuzzy.minSimilarity'] = filterChainFuzzyMinSimilarity;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['search.term'] = searchTerm;
            }

            if (searchFields) {
                localVarQueryParameter['search.fields'] = searchFields;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search.type'] = searchType;
            }

            if (searchMinScore !== undefined) {
                localVarQueryParameter['search.minScore'] = searchMinScore;
            }

            if (searchOptionsCaseSensitive !== undefined) {
                localVarQueryParameter['search.options.caseSensitive'] = searchOptionsCaseSensitive;
            }

            if (searchOptionsMinTermLength !== undefined) {
                localVarQueryParameter['search.options.minTermLength'] = searchOptionsMinTermLength;
            }

            if (searchOptionsMaxResults !== undefined) {
                localVarQueryParameter['search.options.maxResults'] = searchOptionsMaxResults;
            }

            if (searchOptionsMultiTermAnd !== undefined) {
                localVarQueryParameter['search.options.multiTermAnd'] = searchOptionsMultiTermAnd;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination.pageSize'] = paginationPageSize;
            }

            if (paginationPageToken !== undefined) {
                localVarQueryParameter['pagination.pageToken'] = paginationPageToken;
            }

            if (paginationOrderBy !== undefined) {
                localVarQueryParameter['pagination.orderBy'] = paginationOrderBy;
            }

            if (paginationOrder !== undefined) {
                localVarQueryParameter['pagination.order'] = paginationOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List currencies
         * @param {V2ListCurrenciesRequest} v2ListCurrenciesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListCurrencies: async (v2ListCurrenciesRequest: V2ListCurrenciesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ListCurrenciesRequest' is not null or undefined
            assertParamExists('registryServiceListCurrencies', 'v2ListCurrenciesRequest', v2ListCurrenciesRequest)
            const localVarPath = `/v2/currencies:list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ListCurrenciesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List currencies
         * @param {boolean} [filterEnabledEq] Equals
         * @param {boolean} [filterEnabledIsNull] Check if field is null
         * @param {string} [filterNameEq] Exact match
         * @param {string} [filterNameNotEq] Not equal to
         * @param {string} [filterNameContains] Contains substring (case-insensitive)
         * @param {string} [filterNameStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterNameEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterNameIn] Value is in the list
         * @param {Array<string>} [filterNameNotIn] Value is not in the list
         * @param {string} [filterNameRegex] Regular expression match
         * @param {boolean} [filterNameIsNull] Check if field is null
         * @param {string} [filterNameFuzzyValue] Value to match against
         * @param {number} [filterNameFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterCodeEq] Exact match
         * @param {string} [filterCodeNotEq] Not equal to
         * @param {string} [filterCodeContains] Contains substring (case-insensitive)
         * @param {string} [filterCodeStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterCodeEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterCodeIn] Value is in the list
         * @param {Array<string>} [filterCodeNotIn] Value is not in the list
         * @param {string} [filterCodeRegex] Regular expression match
         * @param {boolean} [filterCodeIsNull] Check if field is null
         * @param {string} [filterCodeFuzzyValue] Value to match against
         * @param {number} [filterCodeFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterSymbolEq] Exact match
         * @param {string} [filterSymbolNotEq] Not equal to
         * @param {string} [filterSymbolContains] Contains substring (case-insensitive)
         * @param {string} [filterSymbolStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterSymbolEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterSymbolIn] Value is in the list
         * @param {Array<string>} [filterSymbolNotIn] Value is not in the list
         * @param {string} [filterSymbolRegex] Regular expression match
         * @param {boolean} [filterSymbolIsNull] Check if field is null
         * @param {string} [filterSymbolFuzzyValue] Value to match against
         * @param {number} [filterSymbolFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [searchTerm] Search term
         * @param {Array<string>} [searchFields] Fields to search in
         * @param {RegistryServiceListCurrencies2SearchTypeEnum} [searchType] Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
         * @param {number} [searchMinScore] Minimum relevance score for fuzzy/fulltext search
         * @param {boolean} [searchOptionsCaseSensitive] Enable case-sensitive search (default: false)
         * @param {number} [searchOptionsMinTermLength] Minimum search term length
         * @param {number} [searchOptionsMaxResults] Maximum number of results to return
         * @param {boolean} [searchOptionsMultiTermAnd] Use AND logic for multiple terms (default: false for OR)
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryServiceListCurrencies2PaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListCurrencies2: async (filterEnabledEq?: boolean, filterEnabledIsNull?: boolean, filterNameEq?: string, filterNameNotEq?: string, filterNameContains?: string, filterNameStartsWith?: string, filterNameEndsWith?: string, filterNameIn?: Array<string>, filterNameNotIn?: Array<string>, filterNameRegex?: string, filterNameIsNull?: boolean, filterNameFuzzyValue?: string, filterNameFuzzyMinSimilarity?: number, filterCodeEq?: string, filterCodeNotEq?: string, filterCodeContains?: string, filterCodeStartsWith?: string, filterCodeEndsWith?: string, filterCodeIn?: Array<string>, filterCodeNotIn?: Array<string>, filterCodeRegex?: string, filterCodeIsNull?: boolean, filterCodeFuzzyValue?: string, filterCodeFuzzyMinSimilarity?: number, filterSymbolEq?: string, filterSymbolNotEq?: string, filterSymbolContains?: string, filterSymbolStartsWith?: string, filterSymbolEndsWith?: string, filterSymbolIn?: Array<string>, filterSymbolNotIn?: Array<string>, filterSymbolRegex?: string, filterSymbolIsNull?: boolean, filterSymbolFuzzyValue?: string, filterSymbolFuzzyMinSimilarity?: number, searchTerm?: string, searchFields?: Array<string>, searchType?: RegistryServiceListCurrencies2SearchTypeEnum, searchMinScore?: number, searchOptionsCaseSensitive?: boolean, searchOptionsMinTermLength?: number, searchOptionsMaxResults?: number, searchOptionsMultiTermAnd?: boolean, paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryServiceListCurrencies2PaginationOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filterEnabledEq !== undefined) {
                localVarQueryParameter['filter.enabled.eq'] = filterEnabledEq;
            }

            if (filterEnabledIsNull !== undefined) {
                localVarQueryParameter['filter.enabled.isNull'] = filterEnabledIsNull;
            }

            if (filterNameEq !== undefined) {
                localVarQueryParameter['filter.name.eq'] = filterNameEq;
            }

            if (filterNameNotEq !== undefined) {
                localVarQueryParameter['filter.name.notEq'] = filterNameNotEq;
            }

            if (filterNameContains !== undefined) {
                localVarQueryParameter['filter.name.contains'] = filterNameContains;
            }

            if (filterNameStartsWith !== undefined) {
                localVarQueryParameter['filter.name.startsWith'] = filterNameStartsWith;
            }

            if (filterNameEndsWith !== undefined) {
                localVarQueryParameter['filter.name.endsWith'] = filterNameEndsWith;
            }

            if (filterNameIn) {
                localVarQueryParameter['filter.name.in'] = filterNameIn;
            }

            if (filterNameNotIn) {
                localVarQueryParameter['filter.name.notIn'] = filterNameNotIn;
            }

            if (filterNameRegex !== undefined) {
                localVarQueryParameter['filter.name.regex'] = filterNameRegex;
            }

            if (filterNameIsNull !== undefined) {
                localVarQueryParameter['filter.name.isNull'] = filterNameIsNull;
            }

            if (filterNameFuzzyValue !== undefined) {
                localVarQueryParameter['filter.name.fuzzy.value'] = filterNameFuzzyValue;
            }

            if (filterNameFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.name.fuzzy.minSimilarity'] = filterNameFuzzyMinSimilarity;
            }

            if (filterCodeEq !== undefined) {
                localVarQueryParameter['filter.code.eq'] = filterCodeEq;
            }

            if (filterCodeNotEq !== undefined) {
                localVarQueryParameter['filter.code.notEq'] = filterCodeNotEq;
            }

            if (filterCodeContains !== undefined) {
                localVarQueryParameter['filter.code.contains'] = filterCodeContains;
            }

            if (filterCodeStartsWith !== undefined) {
                localVarQueryParameter['filter.code.startsWith'] = filterCodeStartsWith;
            }

            if (filterCodeEndsWith !== undefined) {
                localVarQueryParameter['filter.code.endsWith'] = filterCodeEndsWith;
            }

            if (filterCodeIn) {
                localVarQueryParameter['filter.code.in'] = filterCodeIn;
            }

            if (filterCodeNotIn) {
                localVarQueryParameter['filter.code.notIn'] = filterCodeNotIn;
            }

            if (filterCodeRegex !== undefined) {
                localVarQueryParameter['filter.code.regex'] = filterCodeRegex;
            }

            if (filterCodeIsNull !== undefined) {
                localVarQueryParameter['filter.code.isNull'] = filterCodeIsNull;
            }

            if (filterCodeFuzzyValue !== undefined) {
                localVarQueryParameter['filter.code.fuzzy.value'] = filterCodeFuzzyValue;
            }

            if (filterCodeFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.code.fuzzy.minSimilarity'] = filterCodeFuzzyMinSimilarity;
            }

            if (filterSymbolEq !== undefined) {
                localVarQueryParameter['filter.symbol.eq'] = filterSymbolEq;
            }

            if (filterSymbolNotEq !== undefined) {
                localVarQueryParameter['filter.symbol.notEq'] = filterSymbolNotEq;
            }

            if (filterSymbolContains !== undefined) {
                localVarQueryParameter['filter.symbol.contains'] = filterSymbolContains;
            }

            if (filterSymbolStartsWith !== undefined) {
                localVarQueryParameter['filter.symbol.startsWith'] = filterSymbolStartsWith;
            }

            if (filterSymbolEndsWith !== undefined) {
                localVarQueryParameter['filter.symbol.endsWith'] = filterSymbolEndsWith;
            }

            if (filterSymbolIn) {
                localVarQueryParameter['filter.symbol.in'] = filterSymbolIn;
            }

            if (filterSymbolNotIn) {
                localVarQueryParameter['filter.symbol.notIn'] = filterSymbolNotIn;
            }

            if (filterSymbolRegex !== undefined) {
                localVarQueryParameter['filter.symbol.regex'] = filterSymbolRegex;
            }

            if (filterSymbolIsNull !== undefined) {
                localVarQueryParameter['filter.symbol.isNull'] = filterSymbolIsNull;
            }

            if (filterSymbolFuzzyValue !== undefined) {
                localVarQueryParameter['filter.symbol.fuzzy.value'] = filterSymbolFuzzyValue;
            }

            if (filterSymbolFuzzyMinSimilarity !== undefined) {
                localVarQueryParameter['filter.symbol.fuzzy.minSimilarity'] = filterSymbolFuzzyMinSimilarity;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['search.term'] = searchTerm;
            }

            if (searchFields) {
                localVarQueryParameter['search.fields'] = searchFields;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search.type'] = searchType;
            }

            if (searchMinScore !== undefined) {
                localVarQueryParameter['search.minScore'] = searchMinScore;
            }

            if (searchOptionsCaseSensitive !== undefined) {
                localVarQueryParameter['search.options.caseSensitive'] = searchOptionsCaseSensitive;
            }

            if (searchOptionsMinTermLength !== undefined) {
                localVarQueryParameter['search.options.minTermLength'] = searchOptionsMinTermLength;
            }

            if (searchOptionsMaxResults !== undefined) {
                localVarQueryParameter['search.options.maxResults'] = searchOptionsMaxResults;
            }

            if (searchOptionsMultiTermAnd !== undefined) {
                localVarQueryParameter['search.options.multiTermAnd'] = searchOptionsMultiTermAnd;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination.pageSize'] = paginationPageSize;
            }

            if (paginationPageToken !== undefined) {
                localVarQueryParameter['pagination.pageToken'] = paginationPageToken;
            }

            if (paginationOrderBy !== undefined) {
                localVarQueryParameter['pagination.orderBy'] = paginationOrderBy;
            }

            if (paginationOrder !== undefined) {
                localVarQueryParameter['pagination.order'] = paginationOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistryApi - functional programming interface
 * @export
 */
export const RegistryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistryApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new blockchain configuration in the registry
         * @summary Create a new blockchain
         * @param {V2ManagementCreateBlockchainRequest} v2ManagementCreateBlockchainRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementCreateBlockchain(v2ManagementCreateBlockchainRequest: V2ManagementCreateBlockchainRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2BlockchainInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementCreateBlockchain(v2ManagementCreateBlockchainRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementCreateBlockchain']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new currency in the registry
         * @summary Create a new currency
         * @param {V2ManagementCreateCurrencyRequest} v2ManagementCreateCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementCreateCurrency(v2ManagementCreateCurrencyRequest: V2ManagementCreateCurrencyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Currency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementCreateCurrency(v2ManagementCreateCurrencyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementCreateCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Soft delete an asset from the registry
         * @summary Delete an asset
         * @param {string} id Asset ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementDeleteAsset(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementDeleteAsset(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementDeleteAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Soft delete a blockchain from the registry
         * @summary Delete a blockchain
         * @param {RegistryManagementServiceManagementDeleteBlockchainIdEnum} id The blockchain ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementDeleteBlockchain(id: RegistryManagementServiceManagementDeleteBlockchainIdEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementDeleteBlockchain(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementDeleteBlockchain']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Soft delete a currency from the registry
         * @summary Delete a currency
         * @param {string} code Currency code to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementDeleteCurrency(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementDeleteCurrency(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementDeleteCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of a specific import operation
         * @summary Get import details
         * @param {string} importId Import ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementGetImport(importId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Import>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementGetImport(importId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementGetImport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the history of sync import operations
         * @summary Get import history
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {string} [source] Filter by import source
         * @param {string} [status] Filter by import status
         * @param {string} [startedAtEq] Exact timestamp match
         * @param {string} [startedAtNotEq] Not equal to timestamp
         * @param {string} [startedAtBefore] Before this timestamp
         * @param {string} [startedAtAfter] After this timestamp
         * @param {string} [startedAtGte] Greater than or equal to timestamp
         * @param {string} [startedAtLte] Less than or equal to timestamp
         * @param {string} [startedAtBetweenStart] Start of time range (inclusive)
         * @param {string} [startedAtBetweenEnd] End of time range (inclusive)
         * @param {boolean} [startedAtIsNull] Check if field is null
         * @param {number} [startedAtRelativeDays] Relative days from now (negative for past, positive for future)
         * @param {string} [completedAtEq] Exact timestamp match
         * @param {string} [completedAtNotEq] Not equal to timestamp
         * @param {string} [completedAtBefore] Before this timestamp
         * @param {string} [completedAtAfter] After this timestamp
         * @param {string} [completedAtGte] Greater than or equal to timestamp
         * @param {string} [completedAtLte] Less than or equal to timestamp
         * @param {string} [completedAtBetweenStart] Start of time range (inclusive)
         * @param {string} [completedAtBetweenEnd] End of time range (inclusive)
         * @param {boolean} [completedAtIsNull] Check if field is null
         * @param {number} [completedAtRelativeDays] Relative days from now (negative for past, positive for future)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementGetImportHistory(paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum, source?: string, status?: string, startedAtEq?: string, startedAtNotEq?: string, startedAtBefore?: string, startedAtAfter?: string, startedAtGte?: string, startedAtLte?: string, startedAtBetweenStart?: string, startedAtBetweenEnd?: string, startedAtIsNull?: boolean, startedAtRelativeDays?: number, completedAtEq?: string, completedAtNotEq?: string, completedAtBefore?: string, completedAtAfter?: string, completedAtGte?: string, completedAtLte?: string, completedAtBetweenStart?: string, completedAtBetweenEnd?: string, completedAtIsNull?: boolean, completedAtRelativeDays?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ManagementGetImportHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementGetImportHistory(paginationPageSize, paginationPageToken, paginationOrderBy, paginationOrder, source, status, startedAtEq, startedAtNotEq, startedAtBefore, startedAtAfter, startedAtGte, startedAtLte, startedAtBetweenStart, startedAtBetweenEnd, startedAtIsNull, startedAtRelativeDays, completedAtEq, completedAtNotEq, completedAtBefore, completedAtAfter, completedAtGte, completedAtLte, completedAtBetweenStart, completedAtBetweenEnd, completedAtIsNull, completedAtRelativeDays, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementGetImportHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the current status of the sync scheduler
         * @summary Get sync status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementGetSyncStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ManagementGetSyncStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementGetSyncStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementGetSyncStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Manually trigger a synchronization of assets from CoinGecko
         * @summary Trigger asset sync
         * @param {V2ManagementTriggerSyncRequest} v2ManagementTriggerSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementTriggerSync(v2ManagementTriggerSyncRequest: V2ManagementTriggerSyncRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ManagementTriggerSyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementTriggerSync(v2ManagementTriggerSyncRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementTriggerSync']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing asset in the registry
         * @summary Update an asset
         * @param {string} id Asset ID to update
         * @param {RegistryManagementServiceManagementUpdateAssetRequest} registryManagementServiceManagementUpdateAssetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementUpdateAsset(id: string, registryManagementServiceManagementUpdateAssetRequest: RegistryManagementServiceManagementUpdateAssetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Commonv2Asset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementUpdateAsset(id, registryManagementServiceManagementUpdateAssetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementUpdateAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing blockchain configuration
         * @summary Update a blockchain
         * @param {RegistryManagementServiceManagementUpdateBlockchainIdEnum} id The blockchain ID to update
         * @param {RegistryManagementServiceManagementUpdateBlockchainRequest} registryManagementServiceManagementUpdateBlockchainRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementUpdateBlockchain(id: RegistryManagementServiceManagementUpdateBlockchainIdEnum, registryManagementServiceManagementUpdateBlockchainRequest: RegistryManagementServiceManagementUpdateBlockchainRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2BlockchainInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementUpdateBlockchain(id, registryManagementServiceManagementUpdateBlockchainRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementUpdateBlockchain']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing currency in the registry
         * @summary Update a currency
         * @param {string} code Currency code to update
         * @param {RegistryManagementServiceManagementUpdateCurrencyRequest} registryManagementServiceManagementUpdateCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryManagementServiceManagementUpdateCurrency(code: string, registryManagementServiceManagementUpdateCurrencyRequest: RegistryManagementServiceManagementUpdateCurrencyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Currency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryManagementServiceManagementUpdateCurrency(code, registryManagementServiceManagementUpdateCurrencyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryManagementServiceManagementUpdateCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new asset in the registry
         * @summary Create a new asset
         * @param {V2CreateAssetRequest} v2CreateAssetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceCreateAsset(v2CreateAssetRequest: V2CreateAssetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Commonv2Asset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceCreateAsset(v2CreateAssetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceCreateAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get asset configuration by ID
         * @summary Get an asset
         * @param {string} id Asset ID in format blockchain:contract:symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceGetAsset(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Commonv2Asset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceGetAsset(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceGetAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get blockchain configuration by ID
         * @summary Get a blockchain
         * @param {RegistryServiceGetBlockchainIdEnum} id The blockchain ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceGetBlockchain(id: RegistryServiceGetBlockchainIdEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2BlockchainInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceGetBlockchain(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceGetBlockchain']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get currency configuration by code
         * @summary Get a currency
         * @param {string} code ISO 4217 currency code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceGetCurrency(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Currency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceGetCurrency(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceGetCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List assets
         * @param {V2ListAssetsRequest} v2ListAssetsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceListAssets(v2ListAssetsRequest: V2ListAssetsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceListAssets(v2ListAssetsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceListAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List assets
         * @param {number} [filterBlockchainEq] Equals
         * @param {number} [filterBlockchainNotEq] Not equal to
         * @param {Array<number>} [filterBlockchainIn] Value is in the list
         * @param {Array<number>} [filterBlockchainNotIn] Value is not in the list
         * @param {boolean} [filterBlockchainIsNull] Check if field is null
         * @param {number} [filterBlockchainGt] Greater than
         * @param {number} [filterBlockchainGte] Greater than or equal to
         * @param {number} [filterBlockchainLt] Less than
         * @param {number} [filterBlockchainLte] Less than or equal to
         * @param {boolean} [filterEnabledEq] Equals
         * @param {boolean} [filterEnabledIsNull] Check if field is null
         * @param {boolean} [filterIsVettedEq] Equals
         * @param {boolean} [filterIsVettedIsNull] Check if field is null
         * @param {number} [filterStandardEq] Equals
         * @param {number} [filterStandardNotEq] Not equal to
         * @param {Array<number>} [filterStandardIn] Value is in the list
         * @param {Array<number>} [filterStandardNotIn] Value is not in the list
         * @param {boolean} [filterStandardIsNull] Check if field is null
         * @param {number} [filterStandardGt] Greater than
         * @param {number} [filterStandardGte] Greater than or equal to
         * @param {number} [filterStandardLt] Less than
         * @param {number} [filterStandardLte] Less than or equal to
         * @param {string} [filterOrganizationIdEq] Exact match
         * @param {string} [filterOrganizationIdNotEq] Not equal to
         * @param {string} [filterOrganizationIdContains] Contains substring (case-insensitive)
         * @param {string} [filterOrganizationIdStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterOrganizationIdEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterOrganizationIdIn] Value is in the list
         * @param {Array<string>} [filterOrganizationIdNotIn] Value is not in the list
         * @param {string} [filterOrganizationIdRegex] Regular expression match
         * @param {boolean} [filterOrganizationIdIsNull] Check if field is null
         * @param {string} [filterOrganizationIdFuzzyValue] Value to match against
         * @param {number} [filterOrganizationIdFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterSymbolEq] Exact match
         * @param {string} [filterSymbolNotEq] Not equal to
         * @param {string} [filterSymbolContains] Contains substring (case-insensitive)
         * @param {string} [filterSymbolStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterSymbolEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterSymbolIn] Value is in the list
         * @param {Array<string>} [filterSymbolNotIn] Value is not in the list
         * @param {string} [filterSymbolRegex] Regular expression match
         * @param {boolean} [filterSymbolIsNull] Check if field is null
         * @param {string} [filterSymbolFuzzyValue] Value to match against
         * @param {number} [filterSymbolFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterNameEq] Exact match
         * @param {string} [filterNameNotEq] Not equal to
         * @param {string} [filterNameContains] Contains substring (case-insensitive)
         * @param {string} [filterNameStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterNameEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterNameIn] Value is in the list
         * @param {Array<string>} [filterNameNotIn] Value is not in the list
         * @param {string} [filterNameRegex] Regular expression match
         * @param {boolean} [filterNameIsNull] Check if field is null
         * @param {string} [filterNameFuzzyValue] Value to match against
         * @param {number} [filterNameFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterContractAddressEq] Exact match
         * @param {string} [filterContractAddressNotEq] Not equal to
         * @param {string} [filterContractAddressContains] Contains substring (case-insensitive)
         * @param {string} [filterContractAddressStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterContractAddressEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterContractAddressIn] Value is in the list
         * @param {Array<string>} [filterContractAddressNotIn] Value is not in the list
         * @param {string} [filterContractAddressRegex] Regular expression match
         * @param {boolean} [filterContractAddressIsNull] Check if field is null
         * @param {string} [filterContractAddressFuzzyValue] Value to match against
         * @param {number} [filterContractAddressFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterSourceEq] Exact match
         * @param {string} [filterSourceNotEq] Not equal to
         * @param {string} [filterSourceContains] Contains substring (case-insensitive)
         * @param {string} [filterSourceStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterSourceEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterSourceIn] Value is in the list
         * @param {Array<string>} [filterSourceNotIn] Value is not in the list
         * @param {string} [filterSourceRegex] Regular expression match
         * @param {boolean} [filterSourceIsNull] Check if field is null
         * @param {string} [filterSourceFuzzyValue] Value to match against
         * @param {number} [filterSourceFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterLastSyncedAtEq] Exact timestamp match
         * @param {string} [filterLastSyncedAtNotEq] Not equal to timestamp
         * @param {string} [filterLastSyncedAtBefore] Before this timestamp
         * @param {string} [filterLastSyncedAtAfter] After this timestamp
         * @param {string} [filterLastSyncedAtGte] Greater than or equal to timestamp
         * @param {string} [filterLastSyncedAtLte] Less than or equal to timestamp
         * @param {string} [filterLastSyncedAtBetweenStart] Start of time range (inclusive)
         * @param {string} [filterLastSyncedAtBetweenEnd] End of time range (inclusive)
         * @param {boolean} [filterLastSyncedAtIsNull] Check if field is null
         * @param {number} [filterLastSyncedAtRelativeDays] Relative days from now (negative for past, positive for future)
         * @param {boolean} [filterHasChecksumEq] Equals
         * @param {boolean} [filterHasChecksumIsNull] Check if field is null
         * @param {string} [searchTerm] Search term
         * @param {Array<string>} [searchFields] Fields to search in
         * @param {RegistryServiceListAssets2SearchTypeEnum} [searchType] Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
         * @param {number} [searchMinScore] Minimum relevance score for fuzzy/fulltext search
         * @param {boolean} [searchOptionsCaseSensitive] Enable case-sensitive search (default: false)
         * @param {number} [searchOptionsMinTermLength] Minimum search term length
         * @param {number} [searchOptionsMaxResults] Maximum number of results to return
         * @param {boolean} [searchOptionsMultiTermAnd] Use AND logic for multiple terms (default: false for OR)
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryServiceListAssets2PaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceListAssets2(filterBlockchainEq?: number, filterBlockchainNotEq?: number, filterBlockchainIn?: Array<number>, filterBlockchainNotIn?: Array<number>, filterBlockchainIsNull?: boolean, filterBlockchainGt?: number, filterBlockchainGte?: number, filterBlockchainLt?: number, filterBlockchainLte?: number, filterEnabledEq?: boolean, filterEnabledIsNull?: boolean, filterIsVettedEq?: boolean, filterIsVettedIsNull?: boolean, filterStandardEq?: number, filterStandardNotEq?: number, filterStandardIn?: Array<number>, filterStandardNotIn?: Array<number>, filterStandardIsNull?: boolean, filterStandardGt?: number, filterStandardGte?: number, filterStandardLt?: number, filterStandardLte?: number, filterOrganizationIdEq?: string, filterOrganizationIdNotEq?: string, filterOrganizationIdContains?: string, filterOrganizationIdStartsWith?: string, filterOrganizationIdEndsWith?: string, filterOrganizationIdIn?: Array<string>, filterOrganizationIdNotIn?: Array<string>, filterOrganizationIdRegex?: string, filterOrganizationIdIsNull?: boolean, filterOrganizationIdFuzzyValue?: string, filterOrganizationIdFuzzyMinSimilarity?: number, filterSymbolEq?: string, filterSymbolNotEq?: string, filterSymbolContains?: string, filterSymbolStartsWith?: string, filterSymbolEndsWith?: string, filterSymbolIn?: Array<string>, filterSymbolNotIn?: Array<string>, filterSymbolRegex?: string, filterSymbolIsNull?: boolean, filterSymbolFuzzyValue?: string, filterSymbolFuzzyMinSimilarity?: number, filterNameEq?: string, filterNameNotEq?: string, filterNameContains?: string, filterNameStartsWith?: string, filterNameEndsWith?: string, filterNameIn?: Array<string>, filterNameNotIn?: Array<string>, filterNameRegex?: string, filterNameIsNull?: boolean, filterNameFuzzyValue?: string, filterNameFuzzyMinSimilarity?: number, filterContractAddressEq?: string, filterContractAddressNotEq?: string, filterContractAddressContains?: string, filterContractAddressStartsWith?: string, filterContractAddressEndsWith?: string, filterContractAddressIn?: Array<string>, filterContractAddressNotIn?: Array<string>, filterContractAddressRegex?: string, filterContractAddressIsNull?: boolean, filterContractAddressFuzzyValue?: string, filterContractAddressFuzzyMinSimilarity?: number, filterSourceEq?: string, filterSourceNotEq?: string, filterSourceContains?: string, filterSourceStartsWith?: string, filterSourceEndsWith?: string, filterSourceIn?: Array<string>, filterSourceNotIn?: Array<string>, filterSourceRegex?: string, filterSourceIsNull?: boolean, filterSourceFuzzyValue?: string, filterSourceFuzzyMinSimilarity?: number, filterLastSyncedAtEq?: string, filterLastSyncedAtNotEq?: string, filterLastSyncedAtBefore?: string, filterLastSyncedAtAfter?: string, filterLastSyncedAtGte?: string, filterLastSyncedAtLte?: string, filterLastSyncedAtBetweenStart?: string, filterLastSyncedAtBetweenEnd?: string, filterLastSyncedAtIsNull?: boolean, filterLastSyncedAtRelativeDays?: number, filterHasChecksumEq?: boolean, filterHasChecksumIsNull?: boolean, searchTerm?: string, searchFields?: Array<string>, searchType?: RegistryServiceListAssets2SearchTypeEnum, searchMinScore?: number, searchOptionsCaseSensitive?: boolean, searchOptionsMinTermLength?: number, searchOptionsMaxResults?: number, searchOptionsMultiTermAnd?: boolean, paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryServiceListAssets2PaginationOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceListAssets2(filterBlockchainEq, filterBlockchainNotEq, filterBlockchainIn, filterBlockchainNotIn, filterBlockchainIsNull, filterBlockchainGt, filterBlockchainGte, filterBlockchainLt, filterBlockchainLte, filterEnabledEq, filterEnabledIsNull, filterIsVettedEq, filterIsVettedIsNull, filterStandardEq, filterStandardNotEq, filterStandardIn, filterStandardNotIn, filterStandardIsNull, filterStandardGt, filterStandardGte, filterStandardLt, filterStandardLte, filterOrganizationIdEq, filterOrganizationIdNotEq, filterOrganizationIdContains, filterOrganizationIdStartsWith, filterOrganizationIdEndsWith, filterOrganizationIdIn, filterOrganizationIdNotIn, filterOrganizationIdRegex, filterOrganizationIdIsNull, filterOrganizationIdFuzzyValue, filterOrganizationIdFuzzyMinSimilarity, filterSymbolEq, filterSymbolNotEq, filterSymbolContains, filterSymbolStartsWith, filterSymbolEndsWith, filterSymbolIn, filterSymbolNotIn, filterSymbolRegex, filterSymbolIsNull, filterSymbolFuzzyValue, filterSymbolFuzzyMinSimilarity, filterNameEq, filterNameNotEq, filterNameContains, filterNameStartsWith, filterNameEndsWith, filterNameIn, filterNameNotIn, filterNameRegex, filterNameIsNull, filterNameFuzzyValue, filterNameFuzzyMinSimilarity, filterContractAddressEq, filterContractAddressNotEq, filterContractAddressContains, filterContractAddressStartsWith, filterContractAddressEndsWith, filterContractAddressIn, filterContractAddressNotIn, filterContractAddressRegex, filterContractAddressIsNull, filterContractAddressFuzzyValue, filterContractAddressFuzzyMinSimilarity, filterSourceEq, filterSourceNotEq, filterSourceContains, filterSourceStartsWith, filterSourceEndsWith, filterSourceIn, filterSourceNotIn, filterSourceRegex, filterSourceIsNull, filterSourceFuzzyValue, filterSourceFuzzyMinSimilarity, filterLastSyncedAtEq, filterLastSyncedAtNotEq, filterLastSyncedAtBefore, filterLastSyncedAtAfter, filterLastSyncedAtGte, filterLastSyncedAtLte, filterLastSyncedAtBetweenStart, filterLastSyncedAtBetweenEnd, filterLastSyncedAtIsNull, filterLastSyncedAtRelativeDays, filterHasChecksumEq, filterHasChecksumIsNull, searchTerm, searchFields, searchType, searchMinScore, searchOptionsCaseSensitive, searchOptionsMinTermLength, searchOptionsMaxResults, searchOptionsMultiTermAnd, paginationPageSize, paginationPageToken, paginationOrderBy, paginationOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceListAssets2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List blockchains
         * @param {V2ListBlockchainsRequest} v2ListBlockchainsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceListBlockchains(v2ListBlockchainsRequest: V2ListBlockchainsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListBlockchainsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceListBlockchains(v2ListBlockchainsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceListBlockchains']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List blockchains
         * @param {number} [filterStatusEq] Equals
         * @param {number} [filterStatusNotEq] Not equal to
         * @param {Array<number>} [filterStatusIn] Value is in the list
         * @param {Array<number>} [filterStatusNotIn] Value is not in the list
         * @param {boolean} [filterStatusIsNull] Check if field is null
         * @param {number} [filterStatusGt] Greater than
         * @param {number} [filterStatusGte] Greater than or equal to
         * @param {number} [filterStatusLt] Less than
         * @param {number} [filterStatusLte] Less than or equal to
         * @param {string} [filterNameEq] Exact match
         * @param {string} [filterNameNotEq] Not equal to
         * @param {string} [filterNameContains] Contains substring (case-insensitive)
         * @param {string} [filterNameStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterNameEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterNameIn] Value is in the list
         * @param {Array<string>} [filterNameNotIn] Value is not in the list
         * @param {string} [filterNameRegex] Regular expression match
         * @param {boolean} [filterNameIsNull] Check if field is null
         * @param {string} [filterNameFuzzyValue] Value to match against
         * @param {number} [filterNameFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterChainIdEq] Exact match
         * @param {string} [filterChainIdNotEq] Not equal to
         * @param {string} [filterChainIdContains] Contains substring (case-insensitive)
         * @param {string} [filterChainIdStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterChainIdEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterChainIdIn] Value is in the list
         * @param {Array<string>} [filterChainIdNotIn] Value is not in the list
         * @param {string} [filterChainIdRegex] Regular expression match
         * @param {boolean} [filterChainIdIsNull] Check if field is null
         * @param {string} [filterChainIdFuzzyValue] Value to match against
         * @param {number} [filterChainIdFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {number} [filterChecksumTypeEq] Equals
         * @param {number} [filterChecksumTypeNotEq] Not equal to
         * @param {Array<number>} [filterChecksumTypeIn] Value is in the list
         * @param {Array<number>} [filterChecksumTypeNotIn] Value is not in the list
         * @param {boolean} [filterChecksumTypeIsNull] Check if field is null
         * @param {number} [filterChecksumTypeGt] Greater than
         * @param {number} [filterChecksumTypeGte] Greater than or equal to
         * @param {number} [filterChecksumTypeLt] Less than
         * @param {number} [filterChecksumTypeLte] Less than or equal to
         * @param {string} [filterChainEq] Exact match
         * @param {string} [filterChainNotEq] Not equal to
         * @param {string} [filterChainContains] Contains substring (case-insensitive)
         * @param {string} [filterChainStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterChainEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterChainIn] Value is in the list
         * @param {Array<string>} [filterChainNotIn] Value is not in the list
         * @param {string} [filterChainRegex] Regular expression match
         * @param {boolean} [filterChainIsNull] Check if field is null
         * @param {string} [filterChainFuzzyValue] Value to match against
         * @param {number} [filterChainFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [searchTerm] Search term
         * @param {Array<string>} [searchFields] Fields to search in
         * @param {RegistryServiceListBlockchains2SearchTypeEnum} [searchType] Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
         * @param {number} [searchMinScore] Minimum relevance score for fuzzy/fulltext search
         * @param {boolean} [searchOptionsCaseSensitive] Enable case-sensitive search (default: false)
         * @param {number} [searchOptionsMinTermLength] Minimum search term length
         * @param {number} [searchOptionsMaxResults] Maximum number of results to return
         * @param {boolean} [searchOptionsMultiTermAnd] Use AND logic for multiple terms (default: false for OR)
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryServiceListBlockchains2PaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceListBlockchains2(filterStatusEq?: number, filterStatusNotEq?: number, filterStatusIn?: Array<number>, filterStatusNotIn?: Array<number>, filterStatusIsNull?: boolean, filterStatusGt?: number, filterStatusGte?: number, filterStatusLt?: number, filterStatusLte?: number, filterNameEq?: string, filterNameNotEq?: string, filterNameContains?: string, filterNameStartsWith?: string, filterNameEndsWith?: string, filterNameIn?: Array<string>, filterNameNotIn?: Array<string>, filterNameRegex?: string, filterNameIsNull?: boolean, filterNameFuzzyValue?: string, filterNameFuzzyMinSimilarity?: number, filterChainIdEq?: string, filterChainIdNotEq?: string, filterChainIdContains?: string, filterChainIdStartsWith?: string, filterChainIdEndsWith?: string, filterChainIdIn?: Array<string>, filterChainIdNotIn?: Array<string>, filterChainIdRegex?: string, filterChainIdIsNull?: boolean, filterChainIdFuzzyValue?: string, filterChainIdFuzzyMinSimilarity?: number, filterChecksumTypeEq?: number, filterChecksumTypeNotEq?: number, filterChecksumTypeIn?: Array<number>, filterChecksumTypeNotIn?: Array<number>, filterChecksumTypeIsNull?: boolean, filterChecksumTypeGt?: number, filterChecksumTypeGte?: number, filterChecksumTypeLt?: number, filterChecksumTypeLte?: number, filterChainEq?: string, filterChainNotEq?: string, filterChainContains?: string, filterChainStartsWith?: string, filterChainEndsWith?: string, filterChainIn?: Array<string>, filterChainNotIn?: Array<string>, filterChainRegex?: string, filterChainIsNull?: boolean, filterChainFuzzyValue?: string, filterChainFuzzyMinSimilarity?: number, searchTerm?: string, searchFields?: Array<string>, searchType?: RegistryServiceListBlockchains2SearchTypeEnum, searchMinScore?: number, searchOptionsCaseSensitive?: boolean, searchOptionsMinTermLength?: number, searchOptionsMaxResults?: number, searchOptionsMultiTermAnd?: boolean, paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryServiceListBlockchains2PaginationOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListBlockchainsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceListBlockchains2(filterStatusEq, filterStatusNotEq, filterStatusIn, filterStatusNotIn, filterStatusIsNull, filterStatusGt, filterStatusGte, filterStatusLt, filterStatusLte, filterNameEq, filterNameNotEq, filterNameContains, filterNameStartsWith, filterNameEndsWith, filterNameIn, filterNameNotIn, filterNameRegex, filterNameIsNull, filterNameFuzzyValue, filterNameFuzzyMinSimilarity, filterChainIdEq, filterChainIdNotEq, filterChainIdContains, filterChainIdStartsWith, filterChainIdEndsWith, filterChainIdIn, filterChainIdNotIn, filterChainIdRegex, filterChainIdIsNull, filterChainIdFuzzyValue, filterChainIdFuzzyMinSimilarity, filterChecksumTypeEq, filterChecksumTypeNotEq, filterChecksumTypeIn, filterChecksumTypeNotIn, filterChecksumTypeIsNull, filterChecksumTypeGt, filterChecksumTypeGte, filterChecksumTypeLt, filterChecksumTypeLte, filterChainEq, filterChainNotEq, filterChainContains, filterChainStartsWith, filterChainEndsWith, filterChainIn, filterChainNotIn, filterChainRegex, filterChainIsNull, filterChainFuzzyValue, filterChainFuzzyMinSimilarity, searchTerm, searchFields, searchType, searchMinScore, searchOptionsCaseSensitive, searchOptionsMinTermLength, searchOptionsMaxResults, searchOptionsMultiTermAnd, paginationPageSize, paginationPageToken, paginationOrderBy, paginationOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceListBlockchains2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List currencies
         * @param {V2ListCurrenciesRequest} v2ListCurrenciesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceListCurrencies(v2ListCurrenciesRequest: V2ListCurrenciesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListCurrenciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceListCurrencies(v2ListCurrenciesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceListCurrencies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List currencies
         * @param {boolean} [filterEnabledEq] Equals
         * @param {boolean} [filterEnabledIsNull] Check if field is null
         * @param {string} [filterNameEq] Exact match
         * @param {string} [filterNameNotEq] Not equal to
         * @param {string} [filterNameContains] Contains substring (case-insensitive)
         * @param {string} [filterNameStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterNameEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterNameIn] Value is in the list
         * @param {Array<string>} [filterNameNotIn] Value is not in the list
         * @param {string} [filterNameRegex] Regular expression match
         * @param {boolean} [filterNameIsNull] Check if field is null
         * @param {string} [filterNameFuzzyValue] Value to match against
         * @param {number} [filterNameFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterCodeEq] Exact match
         * @param {string} [filterCodeNotEq] Not equal to
         * @param {string} [filterCodeContains] Contains substring (case-insensitive)
         * @param {string} [filterCodeStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterCodeEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterCodeIn] Value is in the list
         * @param {Array<string>} [filterCodeNotIn] Value is not in the list
         * @param {string} [filterCodeRegex] Regular expression match
         * @param {boolean} [filterCodeIsNull] Check if field is null
         * @param {string} [filterCodeFuzzyValue] Value to match against
         * @param {number} [filterCodeFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [filterSymbolEq] Exact match
         * @param {string} [filterSymbolNotEq] Not equal to
         * @param {string} [filterSymbolContains] Contains substring (case-insensitive)
         * @param {string} [filterSymbolStartsWith] Starts with prefix (case-insensitive)
         * @param {string} [filterSymbolEndsWith] Ends with suffix (case-insensitive)
         * @param {Array<string>} [filterSymbolIn] Value is in the list
         * @param {Array<string>} [filterSymbolNotIn] Value is not in the list
         * @param {string} [filterSymbolRegex] Regular expression match
         * @param {boolean} [filterSymbolIsNull] Check if field is null
         * @param {string} [filterSymbolFuzzyValue] Value to match against
         * @param {number} [filterSymbolFuzzyMinSimilarity] Minimum similarity threshold (0.0-1.0)
         * @param {string} [searchTerm] Search term
         * @param {Array<string>} [searchFields] Fields to search in
         * @param {RegistryServiceListCurrencies2SearchTypeEnum} [searchType] Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
         * @param {number} [searchMinScore] Minimum relevance score for fuzzy/fulltext search
         * @param {boolean} [searchOptionsCaseSensitive] Enable case-sensitive search (default: false)
         * @param {number} [searchOptionsMinTermLength] Minimum search term length
         * @param {number} [searchOptionsMaxResults] Maximum number of results to return
         * @param {boolean} [searchOptionsMultiTermAnd] Use AND logic for multiple terms (default: false for OR)
         * @param {number} [paginationPageSize] Number of results per page (default 50, max 1000)
         * @param {string} [paginationPageToken] Token for pagination from previous response
         * @param {string} [paginationOrderBy] Field to order results by
         * @param {RegistryServiceListCurrencies2PaginationOrderEnum} [paginationOrder] Sort order (ASC or DESC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registryServiceListCurrencies2(filterEnabledEq?: boolean, filterEnabledIsNull?: boolean, filterNameEq?: string, filterNameNotEq?: string, filterNameContains?: string, filterNameStartsWith?: string, filterNameEndsWith?: string, filterNameIn?: Array<string>, filterNameNotIn?: Array<string>, filterNameRegex?: string, filterNameIsNull?: boolean, filterNameFuzzyValue?: string, filterNameFuzzyMinSimilarity?: number, filterCodeEq?: string, filterCodeNotEq?: string, filterCodeContains?: string, filterCodeStartsWith?: string, filterCodeEndsWith?: string, filterCodeIn?: Array<string>, filterCodeNotIn?: Array<string>, filterCodeRegex?: string, filterCodeIsNull?: boolean, filterCodeFuzzyValue?: string, filterCodeFuzzyMinSimilarity?: number, filterSymbolEq?: string, filterSymbolNotEq?: string, filterSymbolContains?: string, filterSymbolStartsWith?: string, filterSymbolEndsWith?: string, filterSymbolIn?: Array<string>, filterSymbolNotIn?: Array<string>, filterSymbolRegex?: string, filterSymbolIsNull?: boolean, filterSymbolFuzzyValue?: string, filterSymbolFuzzyMinSimilarity?: number, searchTerm?: string, searchFields?: Array<string>, searchType?: RegistryServiceListCurrencies2SearchTypeEnum, searchMinScore?: number, searchOptionsCaseSensitive?: boolean, searchOptionsMinTermLength?: number, searchOptionsMaxResults?: number, searchOptionsMultiTermAnd?: boolean, paginationPageSize?: number, paginationPageToken?: string, paginationOrderBy?: string, paginationOrder?: RegistryServiceListCurrencies2PaginationOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListCurrenciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registryServiceListCurrencies2(filterEnabledEq, filterEnabledIsNull, filterNameEq, filterNameNotEq, filterNameContains, filterNameStartsWith, filterNameEndsWith, filterNameIn, filterNameNotIn, filterNameRegex, filterNameIsNull, filterNameFuzzyValue, filterNameFuzzyMinSimilarity, filterCodeEq, filterCodeNotEq, filterCodeContains, filterCodeStartsWith, filterCodeEndsWith, filterCodeIn, filterCodeNotIn, filterCodeRegex, filterCodeIsNull, filterCodeFuzzyValue, filterCodeFuzzyMinSimilarity, filterSymbolEq, filterSymbolNotEq, filterSymbolContains, filterSymbolStartsWith, filterSymbolEndsWith, filterSymbolIn, filterSymbolNotIn, filterSymbolRegex, filterSymbolIsNull, filterSymbolFuzzyValue, filterSymbolFuzzyMinSimilarity, searchTerm, searchFields, searchType, searchMinScore, searchOptionsCaseSensitive, searchOptionsMinTermLength, searchOptionsMaxResults, searchOptionsMultiTermAnd, paginationPageSize, paginationPageToken, paginationOrderBy, paginationOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RegistryApi.registryServiceListCurrencies2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RegistryApi - factory interface
 * @export
 */
export const RegistryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistryApiFp(configuration)
    return {
        /**
         * Create a new blockchain configuration in the registry
         * @summary Create a new blockchain
         * @param {RegistryApiRegistryManagementServiceManagementCreateBlockchainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementCreateBlockchain(requestParameters: RegistryApiRegistryManagementServiceManagementCreateBlockchainRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2BlockchainInfo> {
            return localVarFp.registryManagementServiceManagementCreateBlockchain(requestParameters.v2ManagementCreateBlockchainRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new currency in the registry
         * @summary Create a new currency
         * @param {RegistryApiRegistryManagementServiceManagementCreateCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementCreateCurrency(requestParameters: RegistryApiRegistryManagementServiceManagementCreateCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Currency> {
            return localVarFp.registryManagementServiceManagementCreateCurrency(requestParameters.v2ManagementCreateCurrencyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft delete an asset from the registry
         * @summary Delete an asset
         * @param {RegistryApiRegistryManagementServiceManagementDeleteAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementDeleteAsset(requestParameters: RegistryApiRegistryManagementServiceManagementDeleteAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.registryManagementServiceManagementDeleteAsset(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft delete a blockchain from the registry
         * @summary Delete a blockchain
         * @param {RegistryApiRegistryManagementServiceManagementDeleteBlockchainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementDeleteBlockchain(requestParameters: RegistryApiRegistryManagementServiceManagementDeleteBlockchainRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.registryManagementServiceManagementDeleteBlockchain(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft delete a currency from the registry
         * @summary Delete a currency
         * @param {RegistryApiRegistryManagementServiceManagementDeleteCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementDeleteCurrency(requestParameters: RegistryApiRegistryManagementServiceManagementDeleteCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.registryManagementServiceManagementDeleteCurrency(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific import operation
         * @summary Get import details
         * @param {RegistryApiRegistryManagementServiceManagementGetImportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementGetImport(requestParameters: RegistryApiRegistryManagementServiceManagementGetImportRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Import> {
            return localVarFp.registryManagementServiceManagementGetImport(requestParameters.importId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the history of sync import operations
         * @summary Get import history
         * @param {RegistryApiRegistryManagementServiceManagementGetImportHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementGetImportHistory(requestParameters: RegistryApiRegistryManagementServiceManagementGetImportHistoryRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ManagementGetImportHistoryResponse> {
            return localVarFp.registryManagementServiceManagementGetImportHistory(requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, requestParameters.source, requestParameters.status, requestParameters.startedAtEq, requestParameters.startedAtNotEq, requestParameters.startedAtBefore, requestParameters.startedAtAfter, requestParameters.startedAtGte, requestParameters.startedAtLte, requestParameters.startedAtBetweenStart, requestParameters.startedAtBetweenEnd, requestParameters.startedAtIsNull, requestParameters.startedAtRelativeDays, requestParameters.completedAtEq, requestParameters.completedAtNotEq, requestParameters.completedAtBefore, requestParameters.completedAtAfter, requestParameters.completedAtGte, requestParameters.completedAtLte, requestParameters.completedAtBetweenStart, requestParameters.completedAtBetweenEnd, requestParameters.completedAtIsNull, requestParameters.completedAtRelativeDays, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current status of the sync scheduler
         * @summary Get sync status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementGetSyncStatus(options?: RawAxiosRequestConfig): AxiosPromise<V2ManagementGetSyncStatusResponse> {
            return localVarFp.registryManagementServiceManagementGetSyncStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * Manually trigger a synchronization of assets from CoinGecko
         * @summary Trigger asset sync
         * @param {RegistryApiRegistryManagementServiceManagementTriggerSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementTriggerSync(requestParameters: RegistryApiRegistryManagementServiceManagementTriggerSyncRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ManagementTriggerSyncResponse> {
            return localVarFp.registryManagementServiceManagementTriggerSync(requestParameters.v2ManagementTriggerSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing asset in the registry
         * @summary Update an asset
         * @param {RegistryApiRegistryManagementServiceManagementUpdateAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementUpdateAsset(requestParameters: RegistryApiRegistryManagementServiceManagementUpdateAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Commonv2Asset> {
            return localVarFp.registryManagementServiceManagementUpdateAsset(requestParameters.id, requestParameters.registryManagementServiceManagementUpdateAssetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing blockchain configuration
         * @summary Update a blockchain
         * @param {RegistryApiRegistryManagementServiceManagementUpdateBlockchainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementUpdateBlockchain(requestParameters: RegistryApiRegistryManagementServiceManagementUpdateBlockchainRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2BlockchainInfo> {
            return localVarFp.registryManagementServiceManagementUpdateBlockchain(requestParameters.id, requestParameters.registryManagementServiceManagementUpdateBlockchainRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing currency in the registry
         * @summary Update a currency
         * @param {RegistryApiRegistryManagementServiceManagementUpdateCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryManagementServiceManagementUpdateCurrency(requestParameters: RegistryApiRegistryManagementServiceManagementUpdateCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Currency> {
            return localVarFp.registryManagementServiceManagementUpdateCurrency(requestParameters.code, requestParameters.registryManagementServiceManagementUpdateCurrencyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new asset in the registry
         * @summary Create a new asset
         * @param {RegistryApiRegistryServiceCreateAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceCreateAsset(requestParameters: RegistryApiRegistryServiceCreateAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Commonv2Asset> {
            return localVarFp.registryServiceCreateAsset(requestParameters.v2CreateAssetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get asset configuration by ID
         * @summary Get an asset
         * @param {RegistryApiRegistryServiceGetAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceGetAsset(requestParameters: RegistryApiRegistryServiceGetAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Commonv2Asset> {
            return localVarFp.registryServiceGetAsset(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get blockchain configuration by ID
         * @summary Get a blockchain
         * @param {RegistryApiRegistryServiceGetBlockchainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceGetBlockchain(requestParameters: RegistryApiRegistryServiceGetBlockchainRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2BlockchainInfo> {
            return localVarFp.registryServiceGetBlockchain(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get currency configuration by code
         * @summary Get a currency
         * @param {RegistryApiRegistryServiceGetCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceGetCurrency(requestParameters: RegistryApiRegistryServiceGetCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Currency> {
            return localVarFp.registryServiceGetCurrency(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List assets
         * @param {RegistryApiRegistryServiceListAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListAssets(requestParameters: RegistryApiRegistryServiceListAssetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListAssetsResponse> {
            return localVarFp.registryServiceListAssets(requestParameters.v2ListAssetsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List assets
         * @param {RegistryApiRegistryServiceListAssets2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListAssets2(requestParameters: RegistryApiRegistryServiceListAssets2Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListAssetsResponse> {
            return localVarFp.registryServiceListAssets2(requestParameters.filterBlockchainEq, requestParameters.filterBlockchainNotEq, requestParameters.filterBlockchainIn, requestParameters.filterBlockchainNotIn, requestParameters.filterBlockchainIsNull, requestParameters.filterBlockchainGt, requestParameters.filterBlockchainGte, requestParameters.filterBlockchainLt, requestParameters.filterBlockchainLte, requestParameters.filterEnabledEq, requestParameters.filterEnabledIsNull, requestParameters.filterIsVettedEq, requestParameters.filterIsVettedIsNull, requestParameters.filterStandardEq, requestParameters.filterStandardNotEq, requestParameters.filterStandardIn, requestParameters.filterStandardNotIn, requestParameters.filterStandardIsNull, requestParameters.filterStandardGt, requestParameters.filterStandardGte, requestParameters.filterStandardLt, requestParameters.filterStandardLte, requestParameters.filterOrganizationIdEq, requestParameters.filterOrganizationIdNotEq, requestParameters.filterOrganizationIdContains, requestParameters.filterOrganizationIdStartsWith, requestParameters.filterOrganizationIdEndsWith, requestParameters.filterOrganizationIdIn, requestParameters.filterOrganizationIdNotIn, requestParameters.filterOrganizationIdRegex, requestParameters.filterOrganizationIdIsNull, requestParameters.filterOrganizationIdFuzzyValue, requestParameters.filterOrganizationIdFuzzyMinSimilarity, requestParameters.filterSymbolEq, requestParameters.filterSymbolNotEq, requestParameters.filterSymbolContains, requestParameters.filterSymbolStartsWith, requestParameters.filterSymbolEndsWith, requestParameters.filterSymbolIn, requestParameters.filterSymbolNotIn, requestParameters.filterSymbolRegex, requestParameters.filterSymbolIsNull, requestParameters.filterSymbolFuzzyValue, requestParameters.filterSymbolFuzzyMinSimilarity, requestParameters.filterNameEq, requestParameters.filterNameNotEq, requestParameters.filterNameContains, requestParameters.filterNameStartsWith, requestParameters.filterNameEndsWith, requestParameters.filterNameIn, requestParameters.filterNameNotIn, requestParameters.filterNameRegex, requestParameters.filterNameIsNull, requestParameters.filterNameFuzzyValue, requestParameters.filterNameFuzzyMinSimilarity, requestParameters.filterContractAddressEq, requestParameters.filterContractAddressNotEq, requestParameters.filterContractAddressContains, requestParameters.filterContractAddressStartsWith, requestParameters.filterContractAddressEndsWith, requestParameters.filterContractAddressIn, requestParameters.filterContractAddressNotIn, requestParameters.filterContractAddressRegex, requestParameters.filterContractAddressIsNull, requestParameters.filterContractAddressFuzzyValue, requestParameters.filterContractAddressFuzzyMinSimilarity, requestParameters.filterSourceEq, requestParameters.filterSourceNotEq, requestParameters.filterSourceContains, requestParameters.filterSourceStartsWith, requestParameters.filterSourceEndsWith, requestParameters.filterSourceIn, requestParameters.filterSourceNotIn, requestParameters.filterSourceRegex, requestParameters.filterSourceIsNull, requestParameters.filterSourceFuzzyValue, requestParameters.filterSourceFuzzyMinSimilarity, requestParameters.filterLastSyncedAtEq, requestParameters.filterLastSyncedAtNotEq, requestParameters.filterLastSyncedAtBefore, requestParameters.filterLastSyncedAtAfter, requestParameters.filterLastSyncedAtGte, requestParameters.filterLastSyncedAtLte, requestParameters.filterLastSyncedAtBetweenStart, requestParameters.filterLastSyncedAtBetweenEnd, requestParameters.filterLastSyncedAtIsNull, requestParameters.filterLastSyncedAtRelativeDays, requestParameters.filterHasChecksumEq, requestParameters.filterHasChecksumIsNull, requestParameters.searchTerm, requestParameters.searchFields, requestParameters.searchType, requestParameters.searchMinScore, requestParameters.searchOptionsCaseSensitive, requestParameters.searchOptionsMinTermLength, requestParameters.searchOptionsMaxResults, requestParameters.searchOptionsMultiTermAnd, requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List blockchains
         * @param {RegistryApiRegistryServiceListBlockchainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListBlockchains(requestParameters: RegistryApiRegistryServiceListBlockchainsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListBlockchainsResponse> {
            return localVarFp.registryServiceListBlockchains(requestParameters.v2ListBlockchainsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List blockchains
         * @param {RegistryApiRegistryServiceListBlockchains2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListBlockchains2(requestParameters: RegistryApiRegistryServiceListBlockchains2Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListBlockchainsResponse> {
            return localVarFp.registryServiceListBlockchains2(requestParameters.filterStatusEq, requestParameters.filterStatusNotEq, requestParameters.filterStatusIn, requestParameters.filterStatusNotIn, requestParameters.filterStatusIsNull, requestParameters.filterStatusGt, requestParameters.filterStatusGte, requestParameters.filterStatusLt, requestParameters.filterStatusLte, requestParameters.filterNameEq, requestParameters.filterNameNotEq, requestParameters.filterNameContains, requestParameters.filterNameStartsWith, requestParameters.filterNameEndsWith, requestParameters.filterNameIn, requestParameters.filterNameNotIn, requestParameters.filterNameRegex, requestParameters.filterNameIsNull, requestParameters.filterNameFuzzyValue, requestParameters.filterNameFuzzyMinSimilarity, requestParameters.filterChainIdEq, requestParameters.filterChainIdNotEq, requestParameters.filterChainIdContains, requestParameters.filterChainIdStartsWith, requestParameters.filterChainIdEndsWith, requestParameters.filterChainIdIn, requestParameters.filterChainIdNotIn, requestParameters.filterChainIdRegex, requestParameters.filterChainIdIsNull, requestParameters.filterChainIdFuzzyValue, requestParameters.filterChainIdFuzzyMinSimilarity, requestParameters.filterChecksumTypeEq, requestParameters.filterChecksumTypeNotEq, requestParameters.filterChecksumTypeIn, requestParameters.filterChecksumTypeNotIn, requestParameters.filterChecksumTypeIsNull, requestParameters.filterChecksumTypeGt, requestParameters.filterChecksumTypeGte, requestParameters.filterChecksumTypeLt, requestParameters.filterChecksumTypeLte, requestParameters.filterChainEq, requestParameters.filterChainNotEq, requestParameters.filterChainContains, requestParameters.filterChainStartsWith, requestParameters.filterChainEndsWith, requestParameters.filterChainIn, requestParameters.filterChainNotIn, requestParameters.filterChainRegex, requestParameters.filterChainIsNull, requestParameters.filterChainFuzzyValue, requestParameters.filterChainFuzzyMinSimilarity, requestParameters.searchTerm, requestParameters.searchFields, requestParameters.searchType, requestParameters.searchMinScore, requestParameters.searchOptionsCaseSensitive, requestParameters.searchOptionsMinTermLength, requestParameters.searchOptionsMaxResults, requestParameters.searchOptionsMultiTermAnd, requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List currencies
         * @param {RegistryApiRegistryServiceListCurrenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListCurrencies(requestParameters: RegistryApiRegistryServiceListCurrenciesRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListCurrenciesResponse> {
            return localVarFp.registryServiceListCurrencies(requestParameters.v2ListCurrenciesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
         * @summary List currencies
         * @param {RegistryApiRegistryServiceListCurrencies2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registryServiceListCurrencies2(requestParameters: RegistryApiRegistryServiceListCurrencies2Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListCurrenciesResponse> {
            return localVarFp.registryServiceListCurrencies2(requestParameters.filterEnabledEq, requestParameters.filterEnabledIsNull, requestParameters.filterNameEq, requestParameters.filterNameNotEq, requestParameters.filterNameContains, requestParameters.filterNameStartsWith, requestParameters.filterNameEndsWith, requestParameters.filterNameIn, requestParameters.filterNameNotIn, requestParameters.filterNameRegex, requestParameters.filterNameIsNull, requestParameters.filterNameFuzzyValue, requestParameters.filterNameFuzzyMinSimilarity, requestParameters.filterCodeEq, requestParameters.filterCodeNotEq, requestParameters.filterCodeContains, requestParameters.filterCodeStartsWith, requestParameters.filterCodeEndsWith, requestParameters.filterCodeIn, requestParameters.filterCodeNotIn, requestParameters.filterCodeRegex, requestParameters.filterCodeIsNull, requestParameters.filterCodeFuzzyValue, requestParameters.filterCodeFuzzyMinSimilarity, requestParameters.filterSymbolEq, requestParameters.filterSymbolNotEq, requestParameters.filterSymbolContains, requestParameters.filterSymbolStartsWith, requestParameters.filterSymbolEndsWith, requestParameters.filterSymbolIn, requestParameters.filterSymbolNotIn, requestParameters.filterSymbolRegex, requestParameters.filterSymbolIsNull, requestParameters.filterSymbolFuzzyValue, requestParameters.filterSymbolFuzzyMinSimilarity, requestParameters.searchTerm, requestParameters.searchFields, requestParameters.searchType, requestParameters.searchMinScore, requestParameters.searchOptionsCaseSensitive, requestParameters.searchOptionsMinTermLength, requestParameters.searchOptionsMaxResults, requestParameters.searchOptionsMultiTermAnd, requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for registryManagementServiceManagementCreateBlockchain operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementCreateBlockchainRequest
 */
export interface RegistryApiRegistryManagementServiceManagementCreateBlockchainRequest {
    /**
     * 
     * @type {V2ManagementCreateBlockchainRequest}
     * @memberof RegistryApiRegistryManagementServiceManagementCreateBlockchain
     */
    readonly v2ManagementCreateBlockchainRequest: V2ManagementCreateBlockchainRequest
}

/**
 * Request parameters for registryManagementServiceManagementCreateCurrency operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementCreateCurrencyRequest
 */
export interface RegistryApiRegistryManagementServiceManagementCreateCurrencyRequest {
    /**
     * 
     * @type {V2ManagementCreateCurrencyRequest}
     * @memberof RegistryApiRegistryManagementServiceManagementCreateCurrency
     */
    readonly v2ManagementCreateCurrencyRequest: V2ManagementCreateCurrencyRequest
}

/**
 * Request parameters for registryManagementServiceManagementDeleteAsset operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementDeleteAssetRequest
 */
export interface RegistryApiRegistryManagementServiceManagementDeleteAssetRequest {
    /**
     * Asset ID to delete
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementDeleteAsset
     */
    readonly id: string
}

/**
 * Request parameters for registryManagementServiceManagementDeleteBlockchain operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementDeleteBlockchainRequest
 */
export interface RegistryApiRegistryManagementServiceManagementDeleteBlockchainRequest {
    /**
     * The blockchain ID to delete
     * @type {'AVALANCHE' | 'ETHEREUM' | 'XRP_LEDGER' | 'POLYGON' | 'BNBCHAIN' | 'BASE' | 'HEDERA' | 'ARBITRUM' | 'ONE_MONEY' | 'SOLANA' | 'TRON' | 'BITCOIN'}
     * @memberof RegistryApiRegistryManagementServiceManagementDeleteBlockchain
     */
    readonly id: RegistryManagementServiceManagementDeleteBlockchainIdEnum
}

/**
 * Request parameters for registryManagementServiceManagementDeleteCurrency operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementDeleteCurrencyRequest
 */
export interface RegistryApiRegistryManagementServiceManagementDeleteCurrencyRequest {
    /**
     * Currency code to delete
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementDeleteCurrency
     */
    readonly code: string
}

/**
 * Request parameters for registryManagementServiceManagementGetImport operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementGetImportRequest
 */
export interface RegistryApiRegistryManagementServiceManagementGetImportRequest {
    /**
     * Import ID to retrieve
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImport
     */
    readonly importId: string
}

/**
 * Request parameters for registryManagementServiceManagementGetImportHistory operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementGetImportHistoryRequest
 */
export interface RegistryApiRegistryManagementServiceManagementGetImportHistoryRequest {
    /**
     * Number of results per page (default 50, max 1000)
     * @type {number}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly paginationPageSize?: number

    /**
     * Token for pagination from previous response
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly paginationPageToken?: string

    /**
     * Field to order results by
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly paginationOrderBy?: string

    /**
     * Sort order (ASC or DESC)
     * @type {'SORT_ORDER_ASC' | 'SORT_ORDER_DESC'}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly paginationOrder?: RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum

    /**
     * Filter by import source
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly source?: string

    /**
     * Filter by import status
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly status?: string

    /**
     * Exact timestamp match
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtEq?: string

    /**
     * Not equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtNotEq?: string

    /**
     * Before this timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtBefore?: string

    /**
     * After this timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtAfter?: string

    /**
     * Greater than or equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtGte?: string

    /**
     * Less than or equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtLte?: string

    /**
     * Start of time range (inclusive)
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtBetweenStart?: string

    /**
     * End of time range (inclusive)
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtBetweenEnd?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtIsNull?: boolean

    /**
     * Relative days from now (negative for past, positive for future)
     * @type {number}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly startedAtRelativeDays?: number

    /**
     * Exact timestamp match
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtEq?: string

    /**
     * Not equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtNotEq?: string

    /**
     * Before this timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtBefore?: string

    /**
     * After this timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtAfter?: string

    /**
     * Greater than or equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtGte?: string

    /**
     * Less than or equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtLte?: string

    /**
     * Start of time range (inclusive)
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtBetweenStart?: string

    /**
     * End of time range (inclusive)
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtBetweenEnd?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtIsNull?: boolean

    /**
     * Relative days from now (negative for past, positive for future)
     * @type {number}
     * @memberof RegistryApiRegistryManagementServiceManagementGetImportHistory
     */
    readonly completedAtRelativeDays?: number
}

/**
 * Request parameters for registryManagementServiceManagementTriggerSync operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementTriggerSyncRequest
 */
export interface RegistryApiRegistryManagementServiceManagementTriggerSyncRequest {
    /**
     * 
     * @type {V2ManagementTriggerSyncRequest}
     * @memberof RegistryApiRegistryManagementServiceManagementTriggerSync
     */
    readonly v2ManagementTriggerSyncRequest: V2ManagementTriggerSyncRequest
}

/**
 * Request parameters for registryManagementServiceManagementUpdateAsset operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementUpdateAssetRequest
 */
export interface RegistryApiRegistryManagementServiceManagementUpdateAssetRequest {
    /**
     * Asset ID to update
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementUpdateAsset
     */
    readonly id: string

    /**
     * 
     * @type {RegistryManagementServiceManagementUpdateAssetRequest}
     * @memberof RegistryApiRegistryManagementServiceManagementUpdateAsset
     */
    readonly registryManagementServiceManagementUpdateAssetRequest: RegistryManagementServiceManagementUpdateAssetRequest
}

/**
 * Request parameters for registryManagementServiceManagementUpdateBlockchain operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementUpdateBlockchainRequest
 */
export interface RegistryApiRegistryManagementServiceManagementUpdateBlockchainRequest {
    /**
     * The blockchain ID to update
     * @type {'AVALANCHE' | 'ETHEREUM' | 'XRP_LEDGER' | 'POLYGON' | 'BNBCHAIN' | 'BASE' | 'HEDERA' | 'ARBITRUM' | 'ONE_MONEY' | 'SOLANA' | 'TRON' | 'BITCOIN'}
     * @memberof RegistryApiRegistryManagementServiceManagementUpdateBlockchain
     */
    readonly id: RegistryManagementServiceManagementUpdateBlockchainIdEnum

    /**
     * 
     * @type {RegistryManagementServiceManagementUpdateBlockchainRequest}
     * @memberof RegistryApiRegistryManagementServiceManagementUpdateBlockchain
     */
    readonly registryManagementServiceManagementUpdateBlockchainRequest: RegistryManagementServiceManagementUpdateBlockchainRequest
}

/**
 * Request parameters for registryManagementServiceManagementUpdateCurrency operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryManagementServiceManagementUpdateCurrencyRequest
 */
export interface RegistryApiRegistryManagementServiceManagementUpdateCurrencyRequest {
    /**
     * Currency code to update
     * @type {string}
     * @memberof RegistryApiRegistryManagementServiceManagementUpdateCurrency
     */
    readonly code: string

    /**
     * 
     * @type {RegistryManagementServiceManagementUpdateCurrencyRequest}
     * @memberof RegistryApiRegistryManagementServiceManagementUpdateCurrency
     */
    readonly registryManagementServiceManagementUpdateCurrencyRequest: RegistryManagementServiceManagementUpdateCurrencyRequest
}

/**
 * Request parameters for registryServiceCreateAsset operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceCreateAssetRequest
 */
export interface RegistryApiRegistryServiceCreateAssetRequest {
    /**
     * 
     * @type {V2CreateAssetRequest}
     * @memberof RegistryApiRegistryServiceCreateAsset
     */
    readonly v2CreateAssetRequest: V2CreateAssetRequest
}

/**
 * Request parameters for registryServiceGetAsset operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceGetAssetRequest
 */
export interface RegistryApiRegistryServiceGetAssetRequest {
    /**
     * Asset ID in format blockchain:contract:symbol
     * @type {string}
     * @memberof RegistryApiRegistryServiceGetAsset
     */
    readonly id: string
}

/**
 * Request parameters for registryServiceGetBlockchain operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceGetBlockchainRequest
 */
export interface RegistryApiRegistryServiceGetBlockchainRequest {
    /**
     * The blockchain ID to retrieve
     * @type {'AVALANCHE' | 'ETHEREUM' | 'XRP_LEDGER' | 'POLYGON' | 'BNBCHAIN' | 'BASE' | 'HEDERA' | 'ARBITRUM' | 'ONE_MONEY' | 'SOLANA' | 'TRON' | 'BITCOIN'}
     * @memberof RegistryApiRegistryServiceGetBlockchain
     */
    readonly id: RegistryServiceGetBlockchainIdEnum
}

/**
 * Request parameters for registryServiceGetCurrency operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceGetCurrencyRequest
 */
export interface RegistryApiRegistryServiceGetCurrencyRequest {
    /**
     * ISO 4217 currency code
     * @type {string}
     * @memberof RegistryApiRegistryServiceGetCurrency
     */
    readonly code: string
}

/**
 * Request parameters for registryServiceListAssets operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceListAssetsRequest
 */
export interface RegistryApiRegistryServiceListAssetsRequest {
    /**
     * 
     * @type {V2ListAssetsRequest}
     * @memberof RegistryApiRegistryServiceListAssets
     */
    readonly v2ListAssetsRequest: V2ListAssetsRequest
}

/**
 * Request parameters for registryServiceListAssets2 operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceListAssets2Request
 */
export interface RegistryApiRegistryServiceListAssets2Request {
    /**
     * Equals
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainEq?: number

    /**
     * Not equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainNotEq?: number

    /**
     * Value is in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainIn?: Array<number>

    /**
     * Value is not in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainNotIn?: Array<number>

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainIsNull?: boolean

    /**
     * Greater than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainGt?: number

    /**
     * Greater than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainGte?: number

    /**
     * Less than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainLt?: number

    /**
     * Less than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterBlockchainLte?: number

    /**
     * Equals
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterEnabledEq?: boolean

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterEnabledIsNull?: boolean

    /**
     * Equals
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterIsVettedEq?: boolean

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterIsVettedIsNull?: boolean

    /**
     * Equals
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardEq?: number

    /**
     * Not equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardNotEq?: number

    /**
     * Value is in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardIn?: Array<number>

    /**
     * Value is not in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardNotIn?: Array<number>

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardIsNull?: boolean

    /**
     * Greater than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardGt?: number

    /**
     * Greater than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardGte?: number

    /**
     * Less than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardLt?: number

    /**
     * Less than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterStandardLte?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterOrganizationIdFuzzyMinSimilarity?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSymbolFuzzyMinSimilarity?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterNameFuzzyMinSimilarity?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterContractAddressFuzzyMinSimilarity?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterSourceFuzzyMinSimilarity?: number

    /**
     * Exact timestamp match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtEq?: string

    /**
     * Not equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtNotEq?: string

    /**
     * Before this timestamp
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtBefore?: string

    /**
     * After this timestamp
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtAfter?: string

    /**
     * Greater than or equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtGte?: string

    /**
     * Less than or equal to timestamp
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtLte?: string

    /**
     * Start of time range (inclusive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtBetweenStart?: string

    /**
     * End of time range (inclusive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtBetweenEnd?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtIsNull?: boolean

    /**
     * Relative days from now (negative for past, positive for future)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterLastSyncedAtRelativeDays?: number

    /**
     * Equals
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterHasChecksumEq?: boolean

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly filterHasChecksumIsNull?: boolean

    /**
     * Search term
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchTerm?: string

    /**
     * Fields to search in
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchFields?: Array<string>

    /**
     * Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
     * @type {'SEARCH_TYPE_CONTAINS' | 'SEARCH_TYPE_STARTS_WITH' | 'SEARCH_TYPE_EXACT' | 'SEARCH_TYPE_FUZZY' | 'SEARCH_TYPE_FULLTEXT'}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchType?: RegistryServiceListAssets2SearchTypeEnum

    /**
     * Minimum relevance score for fuzzy/fulltext search
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchMinScore?: number

    /**
     * Enable case-sensitive search (default: false)
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchOptionsCaseSensitive?: boolean

    /**
     * Minimum search term length
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchOptionsMinTermLength?: number

    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchOptionsMaxResults?: number

    /**
     * Use AND logic for multiple terms (default: false for OR)
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly searchOptionsMultiTermAnd?: boolean

    /**
     * Number of results per page (default 50, max 1000)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly paginationPageSize?: number

    /**
     * Token for pagination from previous response
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly paginationPageToken?: string

    /**
     * Field to order results by
     * @type {string}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly paginationOrderBy?: string

    /**
     * Sort order (ASC or DESC)
     * @type {'SORT_ORDER_ASC' | 'SORT_ORDER_DESC'}
     * @memberof RegistryApiRegistryServiceListAssets2
     */
    readonly paginationOrder?: RegistryServiceListAssets2PaginationOrderEnum
}

/**
 * Request parameters for registryServiceListBlockchains operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceListBlockchainsRequest
 */
export interface RegistryApiRegistryServiceListBlockchainsRequest {
    /**
     * 
     * @type {V2ListBlockchainsRequest}
     * @memberof RegistryApiRegistryServiceListBlockchains
     */
    readonly v2ListBlockchainsRequest: V2ListBlockchainsRequest
}

/**
 * Request parameters for registryServiceListBlockchains2 operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceListBlockchains2Request
 */
export interface RegistryApiRegistryServiceListBlockchains2Request {
    /**
     * Equals
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusEq?: number

    /**
     * Not equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusNotEq?: number

    /**
     * Value is in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusIn?: Array<number>

    /**
     * Value is not in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusNotIn?: Array<number>

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusIsNull?: boolean

    /**
     * Greater than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusGt?: number

    /**
     * Greater than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusGte?: number

    /**
     * Less than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusLt?: number

    /**
     * Less than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterStatusLte?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterNameFuzzyMinSimilarity?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIdFuzzyMinSimilarity?: number

    /**
     * Equals
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeEq?: number

    /**
     * Not equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeNotEq?: number

    /**
     * Value is in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeIn?: Array<number>

    /**
     * Value is not in the list
     * @type {Array<number>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeNotIn?: Array<number>

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeIsNull?: boolean

    /**
     * Greater than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeGt?: number

    /**
     * Greater than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeGte?: number

    /**
     * Less than
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeLt?: number

    /**
     * Less than or equal to
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChecksumTypeLte?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly filterChainFuzzyMinSimilarity?: number

    /**
     * Search term
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchTerm?: string

    /**
     * Fields to search in
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchFields?: Array<string>

    /**
     * Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
     * @type {'SEARCH_TYPE_CONTAINS' | 'SEARCH_TYPE_STARTS_WITH' | 'SEARCH_TYPE_EXACT' | 'SEARCH_TYPE_FUZZY' | 'SEARCH_TYPE_FULLTEXT'}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchType?: RegistryServiceListBlockchains2SearchTypeEnum

    /**
     * Minimum relevance score for fuzzy/fulltext search
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchMinScore?: number

    /**
     * Enable case-sensitive search (default: false)
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchOptionsCaseSensitive?: boolean

    /**
     * Minimum search term length
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchOptionsMinTermLength?: number

    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchOptionsMaxResults?: number

    /**
     * Use AND logic for multiple terms (default: false for OR)
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly searchOptionsMultiTermAnd?: boolean

    /**
     * Number of results per page (default 50, max 1000)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly paginationPageSize?: number

    /**
     * Token for pagination from previous response
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly paginationPageToken?: string

    /**
     * Field to order results by
     * @type {string}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly paginationOrderBy?: string

    /**
     * Sort order (ASC or DESC)
     * @type {'SORT_ORDER_ASC' | 'SORT_ORDER_DESC'}
     * @memberof RegistryApiRegistryServiceListBlockchains2
     */
    readonly paginationOrder?: RegistryServiceListBlockchains2PaginationOrderEnum
}

/**
 * Request parameters for registryServiceListCurrencies operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceListCurrenciesRequest
 */
export interface RegistryApiRegistryServiceListCurrenciesRequest {
    /**
     * 
     * @type {V2ListCurrenciesRequest}
     * @memberof RegistryApiRegistryServiceListCurrencies
     */
    readonly v2ListCurrenciesRequest: V2ListCurrenciesRequest
}

/**
 * Request parameters for registryServiceListCurrencies2 operation in RegistryApi.
 * @export
 * @interface RegistryApiRegistryServiceListCurrencies2Request
 */
export interface RegistryApiRegistryServiceListCurrencies2Request {
    /**
     * Equals
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterEnabledEq?: boolean

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterEnabledIsNull?: boolean

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterNameFuzzyMinSimilarity?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterCodeFuzzyMinSimilarity?: number

    /**
     * Exact match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolEq?: string

    /**
     * Not equal to
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolNotEq?: string

    /**
     * Contains substring (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolContains?: string

    /**
     * Starts with prefix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolStartsWith?: string

    /**
     * Ends with suffix (case-insensitive)
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolEndsWith?: string

    /**
     * Value is in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolIn?: Array<string>

    /**
     * Value is not in the list
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolNotIn?: Array<string>

    /**
     * Regular expression match
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolRegex?: string

    /**
     * Check if field is null
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolIsNull?: boolean

    /**
     * Value to match against
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolFuzzyValue?: string

    /**
     * Minimum similarity threshold (0.0-1.0)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly filterSymbolFuzzyMinSimilarity?: number

    /**
     * Search term
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchTerm?: string

    /**
     * Fields to search in
     * @type {Array<string>}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchFields?: Array<string>

    /**
     * Type of search to perform   - SEARCH_TYPE_CONTAINS: Default substring search  - SEARCH_TYPE_STARTS_WITH: Prefix search  - SEARCH_TYPE_EXACT: Exact match  - SEARCH_TYPE_FUZZY: Fuzzy/similarity search  - SEARCH_TYPE_FULLTEXT: Full-text search (future)
     * @type {'SEARCH_TYPE_CONTAINS' | 'SEARCH_TYPE_STARTS_WITH' | 'SEARCH_TYPE_EXACT' | 'SEARCH_TYPE_FUZZY' | 'SEARCH_TYPE_FULLTEXT'}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchType?: RegistryServiceListCurrencies2SearchTypeEnum

    /**
     * Minimum relevance score for fuzzy/fulltext search
     * @type {number}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchMinScore?: number

    /**
     * Enable case-sensitive search (default: false)
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchOptionsCaseSensitive?: boolean

    /**
     * Minimum search term length
     * @type {number}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchOptionsMinTermLength?: number

    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchOptionsMaxResults?: number

    /**
     * Use AND logic for multiple terms (default: false for OR)
     * @type {boolean}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly searchOptionsMultiTermAnd?: boolean

    /**
     * Number of results per page (default 50, max 1000)
     * @type {number}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly paginationPageSize?: number

    /**
     * Token for pagination from previous response
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly paginationPageToken?: string

    /**
     * Field to order results by
     * @type {string}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly paginationOrderBy?: string

    /**
     * Sort order (ASC or DESC)
     * @type {'SORT_ORDER_ASC' | 'SORT_ORDER_DESC'}
     * @memberof RegistryApiRegistryServiceListCurrencies2
     */
    readonly paginationOrder?: RegistryServiceListCurrencies2PaginationOrderEnum
}

/**
 * RegistryApi - object-oriented interface
 * @export
 * @class RegistryApi
 * @extends {BaseAPI}
 */
export class RegistryApi extends BaseAPI {
    /**
     * Create a new blockchain configuration in the registry
     * @summary Create a new blockchain
     * @param {RegistryApiRegistryManagementServiceManagementCreateBlockchainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementCreateBlockchain(requestParameters: RegistryApiRegistryManagementServiceManagementCreateBlockchainRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementCreateBlockchain(requestParameters.v2ManagementCreateBlockchainRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new currency in the registry
     * @summary Create a new currency
     * @param {RegistryApiRegistryManagementServiceManagementCreateCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementCreateCurrency(requestParameters: RegistryApiRegistryManagementServiceManagementCreateCurrencyRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementCreateCurrency(requestParameters.v2ManagementCreateCurrencyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft delete an asset from the registry
     * @summary Delete an asset
     * @param {RegistryApiRegistryManagementServiceManagementDeleteAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementDeleteAsset(requestParameters: RegistryApiRegistryManagementServiceManagementDeleteAssetRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementDeleteAsset(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft delete a blockchain from the registry
     * @summary Delete a blockchain
     * @param {RegistryApiRegistryManagementServiceManagementDeleteBlockchainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementDeleteBlockchain(requestParameters: RegistryApiRegistryManagementServiceManagementDeleteBlockchainRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementDeleteBlockchain(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft delete a currency from the registry
     * @summary Delete a currency
     * @param {RegistryApiRegistryManagementServiceManagementDeleteCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementDeleteCurrency(requestParameters: RegistryApiRegistryManagementServiceManagementDeleteCurrencyRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementDeleteCurrency(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific import operation
     * @summary Get import details
     * @param {RegistryApiRegistryManagementServiceManagementGetImportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementGetImport(requestParameters: RegistryApiRegistryManagementServiceManagementGetImportRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementGetImport(requestParameters.importId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the history of sync import operations
     * @summary Get import history
     * @param {RegistryApiRegistryManagementServiceManagementGetImportHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementGetImportHistory(requestParameters: RegistryApiRegistryManagementServiceManagementGetImportHistoryRequest = {}, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementGetImportHistory(requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, requestParameters.source, requestParameters.status, requestParameters.startedAtEq, requestParameters.startedAtNotEq, requestParameters.startedAtBefore, requestParameters.startedAtAfter, requestParameters.startedAtGte, requestParameters.startedAtLte, requestParameters.startedAtBetweenStart, requestParameters.startedAtBetweenEnd, requestParameters.startedAtIsNull, requestParameters.startedAtRelativeDays, requestParameters.completedAtEq, requestParameters.completedAtNotEq, requestParameters.completedAtBefore, requestParameters.completedAtAfter, requestParameters.completedAtGte, requestParameters.completedAtLte, requestParameters.completedAtBetweenStart, requestParameters.completedAtBetweenEnd, requestParameters.completedAtIsNull, requestParameters.completedAtRelativeDays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current status of the sync scheduler
     * @summary Get sync status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementGetSyncStatus(options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementGetSyncStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manually trigger a synchronization of assets from CoinGecko
     * @summary Trigger asset sync
     * @param {RegistryApiRegistryManagementServiceManagementTriggerSyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementTriggerSync(requestParameters: RegistryApiRegistryManagementServiceManagementTriggerSyncRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementTriggerSync(requestParameters.v2ManagementTriggerSyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing asset in the registry
     * @summary Update an asset
     * @param {RegistryApiRegistryManagementServiceManagementUpdateAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementUpdateAsset(requestParameters: RegistryApiRegistryManagementServiceManagementUpdateAssetRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementUpdateAsset(requestParameters.id, requestParameters.registryManagementServiceManagementUpdateAssetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing blockchain configuration
     * @summary Update a blockchain
     * @param {RegistryApiRegistryManagementServiceManagementUpdateBlockchainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementUpdateBlockchain(requestParameters: RegistryApiRegistryManagementServiceManagementUpdateBlockchainRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementUpdateBlockchain(requestParameters.id, requestParameters.registryManagementServiceManagementUpdateBlockchainRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing currency in the registry
     * @summary Update a currency
     * @param {RegistryApiRegistryManagementServiceManagementUpdateCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryManagementServiceManagementUpdateCurrency(requestParameters: RegistryApiRegistryManagementServiceManagementUpdateCurrencyRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryManagementServiceManagementUpdateCurrency(requestParameters.code, requestParameters.registryManagementServiceManagementUpdateCurrencyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new asset in the registry
     * @summary Create a new asset
     * @param {RegistryApiRegistryServiceCreateAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceCreateAsset(requestParameters: RegistryApiRegistryServiceCreateAssetRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceCreateAsset(requestParameters.v2CreateAssetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get asset configuration by ID
     * @summary Get an asset
     * @param {RegistryApiRegistryServiceGetAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceGetAsset(requestParameters: RegistryApiRegistryServiceGetAssetRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceGetAsset(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get blockchain configuration by ID
     * @summary Get a blockchain
     * @param {RegistryApiRegistryServiceGetBlockchainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceGetBlockchain(requestParameters: RegistryApiRegistryServiceGetBlockchainRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceGetBlockchain(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get currency configuration by code
     * @summary Get a currency
     * @param {RegistryApiRegistryServiceGetCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceGetCurrency(requestParameters: RegistryApiRegistryServiceGetCurrencyRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceGetCurrency(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
     * @summary List assets
     * @param {RegistryApiRegistryServiceListAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceListAssets(requestParameters: RegistryApiRegistryServiceListAssetsRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceListAssets(requestParameters.v2ListAssetsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List assets with advanced filtering and search. Supports both GET (bookmarkable) and POST (complex filters).
     * @summary List assets
     * @param {RegistryApiRegistryServiceListAssets2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceListAssets2(requestParameters: RegistryApiRegistryServiceListAssets2Request = {}, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceListAssets2(requestParameters.filterBlockchainEq, requestParameters.filterBlockchainNotEq, requestParameters.filterBlockchainIn, requestParameters.filterBlockchainNotIn, requestParameters.filterBlockchainIsNull, requestParameters.filterBlockchainGt, requestParameters.filterBlockchainGte, requestParameters.filterBlockchainLt, requestParameters.filterBlockchainLte, requestParameters.filterEnabledEq, requestParameters.filterEnabledIsNull, requestParameters.filterIsVettedEq, requestParameters.filterIsVettedIsNull, requestParameters.filterStandardEq, requestParameters.filterStandardNotEq, requestParameters.filterStandardIn, requestParameters.filterStandardNotIn, requestParameters.filterStandardIsNull, requestParameters.filterStandardGt, requestParameters.filterStandardGte, requestParameters.filterStandardLt, requestParameters.filterStandardLte, requestParameters.filterOrganizationIdEq, requestParameters.filterOrganizationIdNotEq, requestParameters.filterOrganizationIdContains, requestParameters.filterOrganizationIdStartsWith, requestParameters.filterOrganizationIdEndsWith, requestParameters.filterOrganizationIdIn, requestParameters.filterOrganizationIdNotIn, requestParameters.filterOrganizationIdRegex, requestParameters.filterOrganizationIdIsNull, requestParameters.filterOrganizationIdFuzzyValue, requestParameters.filterOrganizationIdFuzzyMinSimilarity, requestParameters.filterSymbolEq, requestParameters.filterSymbolNotEq, requestParameters.filterSymbolContains, requestParameters.filterSymbolStartsWith, requestParameters.filterSymbolEndsWith, requestParameters.filterSymbolIn, requestParameters.filterSymbolNotIn, requestParameters.filterSymbolRegex, requestParameters.filterSymbolIsNull, requestParameters.filterSymbolFuzzyValue, requestParameters.filterSymbolFuzzyMinSimilarity, requestParameters.filterNameEq, requestParameters.filterNameNotEq, requestParameters.filterNameContains, requestParameters.filterNameStartsWith, requestParameters.filterNameEndsWith, requestParameters.filterNameIn, requestParameters.filterNameNotIn, requestParameters.filterNameRegex, requestParameters.filterNameIsNull, requestParameters.filterNameFuzzyValue, requestParameters.filterNameFuzzyMinSimilarity, requestParameters.filterContractAddressEq, requestParameters.filterContractAddressNotEq, requestParameters.filterContractAddressContains, requestParameters.filterContractAddressStartsWith, requestParameters.filterContractAddressEndsWith, requestParameters.filterContractAddressIn, requestParameters.filterContractAddressNotIn, requestParameters.filterContractAddressRegex, requestParameters.filterContractAddressIsNull, requestParameters.filterContractAddressFuzzyValue, requestParameters.filterContractAddressFuzzyMinSimilarity, requestParameters.filterSourceEq, requestParameters.filterSourceNotEq, requestParameters.filterSourceContains, requestParameters.filterSourceStartsWith, requestParameters.filterSourceEndsWith, requestParameters.filterSourceIn, requestParameters.filterSourceNotIn, requestParameters.filterSourceRegex, requestParameters.filterSourceIsNull, requestParameters.filterSourceFuzzyValue, requestParameters.filterSourceFuzzyMinSimilarity, requestParameters.filterLastSyncedAtEq, requestParameters.filterLastSyncedAtNotEq, requestParameters.filterLastSyncedAtBefore, requestParameters.filterLastSyncedAtAfter, requestParameters.filterLastSyncedAtGte, requestParameters.filterLastSyncedAtLte, requestParameters.filterLastSyncedAtBetweenStart, requestParameters.filterLastSyncedAtBetweenEnd, requestParameters.filterLastSyncedAtIsNull, requestParameters.filterLastSyncedAtRelativeDays, requestParameters.filterHasChecksumEq, requestParameters.filterHasChecksumIsNull, requestParameters.searchTerm, requestParameters.searchFields, requestParameters.searchType, requestParameters.searchMinScore, requestParameters.searchOptionsCaseSensitive, requestParameters.searchOptionsMinTermLength, requestParameters.searchOptionsMaxResults, requestParameters.searchOptionsMultiTermAnd, requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
     * @summary List blockchains
     * @param {RegistryApiRegistryServiceListBlockchainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceListBlockchains(requestParameters: RegistryApiRegistryServiceListBlockchainsRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceListBlockchains(requestParameters.v2ListBlockchainsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List blockchains with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
     * @summary List blockchains
     * @param {RegistryApiRegistryServiceListBlockchains2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceListBlockchains2(requestParameters: RegistryApiRegistryServiceListBlockchains2Request = {}, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceListBlockchains2(requestParameters.filterStatusEq, requestParameters.filterStatusNotEq, requestParameters.filterStatusIn, requestParameters.filterStatusNotIn, requestParameters.filterStatusIsNull, requestParameters.filterStatusGt, requestParameters.filterStatusGte, requestParameters.filterStatusLt, requestParameters.filterStatusLte, requestParameters.filterNameEq, requestParameters.filterNameNotEq, requestParameters.filterNameContains, requestParameters.filterNameStartsWith, requestParameters.filterNameEndsWith, requestParameters.filterNameIn, requestParameters.filterNameNotIn, requestParameters.filterNameRegex, requestParameters.filterNameIsNull, requestParameters.filterNameFuzzyValue, requestParameters.filterNameFuzzyMinSimilarity, requestParameters.filterChainIdEq, requestParameters.filterChainIdNotEq, requestParameters.filterChainIdContains, requestParameters.filterChainIdStartsWith, requestParameters.filterChainIdEndsWith, requestParameters.filterChainIdIn, requestParameters.filterChainIdNotIn, requestParameters.filterChainIdRegex, requestParameters.filterChainIdIsNull, requestParameters.filterChainIdFuzzyValue, requestParameters.filterChainIdFuzzyMinSimilarity, requestParameters.filterChecksumTypeEq, requestParameters.filterChecksumTypeNotEq, requestParameters.filterChecksumTypeIn, requestParameters.filterChecksumTypeNotIn, requestParameters.filterChecksumTypeIsNull, requestParameters.filterChecksumTypeGt, requestParameters.filterChecksumTypeGte, requestParameters.filterChecksumTypeLt, requestParameters.filterChecksumTypeLte, requestParameters.filterChainEq, requestParameters.filterChainNotEq, requestParameters.filterChainContains, requestParameters.filterChainStartsWith, requestParameters.filterChainEndsWith, requestParameters.filterChainIn, requestParameters.filterChainNotIn, requestParameters.filterChainRegex, requestParameters.filterChainIsNull, requestParameters.filterChainFuzzyValue, requestParameters.filterChainFuzzyMinSimilarity, requestParameters.searchTerm, requestParameters.searchFields, requestParameters.searchType, requestParameters.searchMinScore, requestParameters.searchOptionsCaseSensitive, requestParameters.searchOptionsMinTermLength, requestParameters.searchOptionsMaxResults, requestParameters.searchOptionsMultiTermAnd, requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
     * @summary List currencies
     * @param {RegistryApiRegistryServiceListCurrenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceListCurrencies(requestParameters: RegistryApiRegistryServiceListCurrenciesRequest, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceListCurrencies(requestParameters.v2ListCurrenciesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List currencies with advanced filtering. Supports both GET (bookmarkable) and POST (complex filters).
     * @summary List currencies
     * @param {RegistryApiRegistryServiceListCurrencies2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public registryServiceListCurrencies2(requestParameters: RegistryApiRegistryServiceListCurrencies2Request = {}, options?: RawAxiosRequestConfig) {
        return RegistryApiFp(this.configuration).registryServiceListCurrencies2(requestParameters.filterEnabledEq, requestParameters.filterEnabledIsNull, requestParameters.filterNameEq, requestParameters.filterNameNotEq, requestParameters.filterNameContains, requestParameters.filterNameStartsWith, requestParameters.filterNameEndsWith, requestParameters.filterNameIn, requestParameters.filterNameNotIn, requestParameters.filterNameRegex, requestParameters.filterNameIsNull, requestParameters.filterNameFuzzyValue, requestParameters.filterNameFuzzyMinSimilarity, requestParameters.filterCodeEq, requestParameters.filterCodeNotEq, requestParameters.filterCodeContains, requestParameters.filterCodeStartsWith, requestParameters.filterCodeEndsWith, requestParameters.filterCodeIn, requestParameters.filterCodeNotIn, requestParameters.filterCodeRegex, requestParameters.filterCodeIsNull, requestParameters.filterCodeFuzzyValue, requestParameters.filterCodeFuzzyMinSimilarity, requestParameters.filterSymbolEq, requestParameters.filterSymbolNotEq, requestParameters.filterSymbolContains, requestParameters.filterSymbolStartsWith, requestParameters.filterSymbolEndsWith, requestParameters.filterSymbolIn, requestParameters.filterSymbolNotIn, requestParameters.filterSymbolRegex, requestParameters.filterSymbolIsNull, requestParameters.filterSymbolFuzzyValue, requestParameters.filterSymbolFuzzyMinSimilarity, requestParameters.searchTerm, requestParameters.searchFields, requestParameters.searchType, requestParameters.searchMinScore, requestParameters.searchOptionsCaseSensitive, requestParameters.searchOptionsMinTermLength, requestParameters.searchOptionsMaxResults, requestParameters.searchOptionsMultiTermAnd, requestParameters.paginationPageSize, requestParameters.paginationPageToken, requestParameters.paginationOrderBy, requestParameters.paginationOrder, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const RegistryManagementServiceManagementDeleteBlockchainIdEnum = {
    Avalanche: 'AVALANCHE',
    Ethereum: 'ETHEREUM',
    XrpLedger: 'XRP_LEDGER',
    Polygon: 'POLYGON',
    Bnbchain: 'BNBCHAIN',
    Base: 'BASE',
    Hedera: 'HEDERA',
    Arbitrum: 'ARBITRUM',
    OneMoney: 'ONE_MONEY',
    Solana: 'SOLANA',
    Tron: 'TRON',
    Bitcoin: 'BITCOIN'
} as const;
export type RegistryManagementServiceManagementDeleteBlockchainIdEnum = typeof RegistryManagementServiceManagementDeleteBlockchainIdEnum[keyof typeof RegistryManagementServiceManagementDeleteBlockchainIdEnum];
/**
 * @export
 */
export const RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum = {
    SortOrderAsc: 'SORT_ORDER_ASC',
    SortOrderDesc: 'SORT_ORDER_DESC'
} as const;
export type RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum = typeof RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum[keyof typeof RegistryManagementServiceManagementGetImportHistoryPaginationOrderEnum];
/**
 * @export
 */
export const RegistryManagementServiceManagementUpdateBlockchainIdEnum = {
    Avalanche: 'AVALANCHE',
    Ethereum: 'ETHEREUM',
    XrpLedger: 'XRP_LEDGER',
    Polygon: 'POLYGON',
    Bnbchain: 'BNBCHAIN',
    Base: 'BASE',
    Hedera: 'HEDERA',
    Arbitrum: 'ARBITRUM',
    OneMoney: 'ONE_MONEY',
    Solana: 'SOLANA',
    Tron: 'TRON',
    Bitcoin: 'BITCOIN'
} as const;
export type RegistryManagementServiceManagementUpdateBlockchainIdEnum = typeof RegistryManagementServiceManagementUpdateBlockchainIdEnum[keyof typeof RegistryManagementServiceManagementUpdateBlockchainIdEnum];
/**
 * @export
 */
export const RegistryServiceGetBlockchainIdEnum = {
    Avalanche: 'AVALANCHE',
    Ethereum: 'ETHEREUM',
    XrpLedger: 'XRP_LEDGER',
    Polygon: 'POLYGON',
    Bnbchain: 'BNBCHAIN',
    Base: 'BASE',
    Hedera: 'HEDERA',
    Arbitrum: 'ARBITRUM',
    OneMoney: 'ONE_MONEY',
    Solana: 'SOLANA',
    Tron: 'TRON',
    Bitcoin: 'BITCOIN'
} as const;
export type RegistryServiceGetBlockchainIdEnum = typeof RegistryServiceGetBlockchainIdEnum[keyof typeof RegistryServiceGetBlockchainIdEnum];
/**
 * @export
 */
export const RegistryServiceListAssets2SearchTypeEnum = {
    SearchTypeContains: 'SEARCH_TYPE_CONTAINS',
    SearchTypeStartsWith: 'SEARCH_TYPE_STARTS_WITH',
    SearchTypeExact: 'SEARCH_TYPE_EXACT',
    SearchTypeFuzzy: 'SEARCH_TYPE_FUZZY',
    SearchTypeFulltext: 'SEARCH_TYPE_FULLTEXT'
} as const;
export type RegistryServiceListAssets2SearchTypeEnum = typeof RegistryServiceListAssets2SearchTypeEnum[keyof typeof RegistryServiceListAssets2SearchTypeEnum];
/**
 * @export
 */
export const RegistryServiceListAssets2PaginationOrderEnum = {
    SortOrderAsc: 'SORT_ORDER_ASC',
    SortOrderDesc: 'SORT_ORDER_DESC'
} as const;
export type RegistryServiceListAssets2PaginationOrderEnum = typeof RegistryServiceListAssets2PaginationOrderEnum[keyof typeof RegistryServiceListAssets2PaginationOrderEnum];
/**
 * @export
 */
export const RegistryServiceListBlockchains2SearchTypeEnum = {
    SearchTypeContains: 'SEARCH_TYPE_CONTAINS',
    SearchTypeStartsWith: 'SEARCH_TYPE_STARTS_WITH',
    SearchTypeExact: 'SEARCH_TYPE_EXACT',
    SearchTypeFuzzy: 'SEARCH_TYPE_FUZZY',
    SearchTypeFulltext: 'SEARCH_TYPE_FULLTEXT'
} as const;
export type RegistryServiceListBlockchains2SearchTypeEnum = typeof RegistryServiceListBlockchains2SearchTypeEnum[keyof typeof RegistryServiceListBlockchains2SearchTypeEnum];
/**
 * @export
 */
export const RegistryServiceListBlockchains2PaginationOrderEnum = {
    SortOrderAsc: 'SORT_ORDER_ASC',
    SortOrderDesc: 'SORT_ORDER_DESC'
} as const;
export type RegistryServiceListBlockchains2PaginationOrderEnum = typeof RegistryServiceListBlockchains2PaginationOrderEnum[keyof typeof RegistryServiceListBlockchains2PaginationOrderEnum];
/**
 * @export
 */
export const RegistryServiceListCurrencies2SearchTypeEnum = {
    SearchTypeContains: 'SEARCH_TYPE_CONTAINS',
    SearchTypeStartsWith: 'SEARCH_TYPE_STARTS_WITH',
    SearchTypeExact: 'SEARCH_TYPE_EXACT',
    SearchTypeFuzzy: 'SEARCH_TYPE_FUZZY',
    SearchTypeFulltext: 'SEARCH_TYPE_FULLTEXT'
} as const;
export type RegistryServiceListCurrencies2SearchTypeEnum = typeof RegistryServiceListCurrencies2SearchTypeEnum[keyof typeof RegistryServiceListCurrencies2SearchTypeEnum];
/**
 * @export
 */
export const RegistryServiceListCurrencies2PaginationOrderEnum = {
    SortOrderAsc: 'SORT_ORDER_ASC',
    SortOrderDesc: 'SORT_ORDER_DESC'
} as const;
export type RegistryServiceListCurrencies2PaginationOrderEnum = typeof RegistryServiceListCurrencies2PaginationOrderEnum[keyof typeof RegistryServiceListCurrencies2PaginationOrderEnum];
