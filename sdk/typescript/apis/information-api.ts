/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Commonv2Asset } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2Currency } from '../models';
/**
 * InformationApi - axios parameter creator
 * @export
 */
export const InformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of supported assets
         * @summary List Supported Assets
         * @param {BalanceServiceListSupportedAssetsBlockchainEnum} [blockchain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceListSupportedAssets: async (blockchain?: BalanceServiceListSupportedAssetsBlockchainEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/info/supported-assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (blockchain !== undefined) {
                localVarQueryParameter['blockchain'] = blockchain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of supported currencies
         * @summary List Supported Currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceListSupportedCurrencies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/info/supported-currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InformationApi - functional programming interface
 * @export
 */
export const InformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InformationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of supported assets
         * @summary List Supported Assets
         * @param {BalanceServiceListSupportedAssetsBlockchainEnum} [blockchain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceServiceListSupportedAssets(blockchain?: BalanceServiceListSupportedAssetsBlockchainEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Commonv2Asset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceServiceListSupportedAssets(blockchain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InformationApi.balanceServiceListSupportedAssets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of supported currencies
         * @summary List Supported Currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceServiceListSupportedCurrencies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Currency>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceServiceListSupportedCurrencies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InformationApi.balanceServiceListSupportedCurrencies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InformationApi - factory interface
 * @export
 */
export const InformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InformationApiFp(configuration)
    return {
        /**
         * Get the list of supported assets
         * @summary List Supported Assets
         * @param {InformationApiBalanceServiceListSupportedAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceListSupportedAssets(requestParameters: InformationApiBalanceServiceListSupportedAssetsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Commonv2Asset>> {
            return localVarFp.balanceServiceListSupportedAssets(requestParameters.blockchain, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of supported currencies
         * @summary List Supported Currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceListSupportedCurrencies(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Currency>> {
            return localVarFp.balanceServiceListSupportedCurrencies(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for balanceServiceListSupportedAssets operation in InformationApi.
 * @export
 * @interface InformationApiBalanceServiceListSupportedAssetsRequest
 */
export interface InformationApiBalanceServiceListSupportedAssetsRequest {
    /**
     * 
     * @type {'AVALANCHE' | 'ETHEREUM' | 'XRP_LEDGER' | 'POLYGON' | 'BNBCHAIN' | 'BASE' | 'HEDERA' | 'ARBITRUM' | 'ONE_MONEY' | 'SOLANA' | 'TRON' | 'BITCOIN'}
     * @memberof InformationApiBalanceServiceListSupportedAssets
     */
    readonly blockchain?: BalanceServiceListSupportedAssetsBlockchainEnum
}

/**
 * InformationApi - object-oriented interface
 * @export
 * @class InformationApi
 * @extends {BaseAPI}
 */
export class InformationApi extends BaseAPI {
    /**
     * Get the list of supported assets
     * @summary List Supported Assets
     * @param {InformationApiBalanceServiceListSupportedAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationApi
     */
    public balanceServiceListSupportedAssets(requestParameters: InformationApiBalanceServiceListSupportedAssetsRequest = {}, options?: RawAxiosRequestConfig) {
        return InformationApiFp(this.configuration).balanceServiceListSupportedAssets(requestParameters.blockchain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of supported currencies
     * @summary List Supported Currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationApi
     */
    public balanceServiceListSupportedCurrencies(options?: RawAxiosRequestConfig) {
        return InformationApiFp(this.configuration).balanceServiceListSupportedCurrencies(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const BalanceServiceListSupportedAssetsBlockchainEnum = {
    Avalanche: 'AVALANCHE',
    Ethereum: 'ETHEREUM',
    XrpLedger: 'XRP_LEDGER',
    Polygon: 'POLYGON',
    Bnbchain: 'BNBCHAIN',
    Base: 'BASE',
    Hedera: 'HEDERA',
    Arbitrum: 'ARBITRUM',
    OneMoney: 'ONE_MONEY',
    Solana: 'SOLANA',
    Tron: 'TRON',
    Bitcoin: 'BITCOIN'
} as const;
export type BalanceServiceListSupportedAssetsBlockchainEnum = typeof BalanceServiceListSupportedAssetsBlockchainEnum[keyof typeof BalanceServiceListSupportedAssetsBlockchainEnum];
