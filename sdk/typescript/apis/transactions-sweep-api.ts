/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2ListSweepInstanceTransactionsResponse } from '../models';
/**
 * TransactionsSweepApi - axios parameter creator
 * @export
 */
export const TransactionsSweepApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all transactions for a given sweep instance
         * @summary List transactions for a sweep instance
         * @param {string} sweepId 
         * @param {string} [correlationId] Correlation ID for this request, used to correlate multiple actions
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceListSweepInstanceTransactions: async (sweepId: string, correlationId?: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sweepId' is not null or undefined
            assertParamExists('transactionsServiceListSweepInstanceTransactions', 'sweepId', sweepId)
            const localVarPath = `/v2/transactions/sweep/{sweepId}`
                .replace(`{${"sweepId"}}`, encodeURIComponent(String(sweepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (correlationId !== undefined) {
                localVarQueryParameter['correlationId'] = correlationId;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsSweepApi - functional programming interface
 * @export
 */
export const TransactionsSweepApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsSweepApiAxiosParamCreator(configuration)
    return {
        /**
         * List all transactions for a given sweep instance
         * @summary List transactions for a sweep instance
         * @param {string} sweepId 
         * @param {string} [correlationId] Correlation ID for this request, used to correlate multiple actions
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceListSweepInstanceTransactions(sweepId: string, correlationId?: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListSweepInstanceTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceListSweepInstanceTransactions(sweepId, correlationId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsSweepApi.transactionsServiceListSweepInstanceTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionsSweepApi - factory interface
 * @export
 */
export const TransactionsSweepApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsSweepApiFp(configuration)
    return {
        /**
         * List all transactions for a given sweep instance
         * @summary List transactions for a sweep instance
         * @param {TransactionsSweepApiTransactionsServiceListSweepInstanceTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceListSweepInstanceTransactions(requestParameters: TransactionsSweepApiTransactionsServiceListSweepInstanceTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListSweepInstanceTransactionsResponse> {
            return localVarFp.transactionsServiceListSweepInstanceTransactions(requestParameters.sweepId, requestParameters.correlationId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for transactionsServiceListSweepInstanceTransactions operation in TransactionsSweepApi.
 * @export
 * @interface TransactionsSweepApiTransactionsServiceListSweepInstanceTransactionsRequest
 */
export interface TransactionsSweepApiTransactionsServiceListSweepInstanceTransactionsRequest {
    /**
     * 
     * @type {string}
     * @memberof TransactionsSweepApiTransactionsServiceListSweepInstanceTransactions
     */
    readonly sweepId: string

    /**
     * Correlation ID for this request, used to correlate multiple actions
     * @type {string}
     * @memberof TransactionsSweepApiTransactionsServiceListSweepInstanceTransactions
     */
    readonly correlationId?: string

    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof TransactionsSweepApiTransactionsServiceListSweepInstanceTransactions
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof TransactionsSweepApiTransactionsServiceListSweepInstanceTransactions
     */
    readonly pageToken?: string
}

/**
 * TransactionsSweepApi - object-oriented interface
 * @export
 * @class TransactionsSweepApi
 * @extends {BaseAPI}
 */
export class TransactionsSweepApi extends BaseAPI {
    /**
     * List all transactions for a given sweep instance
     * @summary List transactions for a sweep instance
     * @param {TransactionsSweepApiTransactionsServiceListSweepInstanceTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsSweepApi
     */
    public transactionsServiceListSweepInstanceTransactions(requestParameters: TransactionsSweepApiTransactionsServiceListSweepInstanceTransactionsRequest, options?: RawAxiosRequestConfig) {
        return TransactionsSweepApiFp(this.configuration).transactionsServiceListSweepInstanceTransactions(requestParameters.sweepId, requestParameters.correlationId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }
}

