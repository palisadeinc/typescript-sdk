/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2CreateSweepConfigurationRequest } from '../models';
// @ts-ignore
import type { V2ListSweepConfigurationsResponse } from '../models';
// @ts-ignore
import type { V2SweepConfiguration } from '../models';
/**
 * SweepConfigurationsApi - axios parameter creator
 * @export
 */
export const SweepConfigurationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new sweep configuration
         * @summary Create sweep configuration
         * @param {V2CreateSweepConfigurationRequest} v2CreateSweepConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceCreateSweepConfiguration: async (v2CreateSweepConfigurationRequest: V2CreateSweepConfigurationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateSweepConfigurationRequest' is not null or undefined
            assertParamExists('sweepServiceCreateSweepConfiguration', 'v2CreateSweepConfigurationRequest', v2CreateSweepConfigurationRequest)
            const localVarPath = `/v2/workflows/sweep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateSweepConfigurationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a single sweep configuration based on its ID
         * @summary Delete sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceDeleteSweepConfiguration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sweepServiceDeleteSweepConfiguration', 'id', id)
            const localVarPath = `/v2/workflows/sweep/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable a single sweep configuration based on its ID
         * @summary Disable sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceDisableSweepConfiguration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sweepServiceDisableSweepConfiguration', 'id', id)
            const localVarPath = `/v2/workflows/sweep/{id}/disable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable a single sweep configuration based on its ID
         * @summary Enable sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceEnableSweepConfiguration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sweepServiceEnableSweepConfiguration', 'id', id)
            const localVarPath = `/v2/workflows/sweep/{id}/enable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single sweep configuration based on its ID
         * @summary Get sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceGetSweepConfiguration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sweepServiceGetSweepConfiguration', 'id', id)
            const localVarPath = `/v2/workflows/sweep/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List sweep configurations
         * @summary List sweep configurations
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceListSweepConfigurations: async (pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/workflows/sweep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manually trigger a single sweep configuration based on its ID
         * @summary Trigger a sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceTriggerSweepConfiguration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sweepServiceTriggerSweepConfiguration', 'id', id)
            const localVarPath = `/v2/workflows/sweep/{id}/trigger`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SweepConfigurationsApi - functional programming interface
 * @export
 */
export const SweepConfigurationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SweepConfigurationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new sweep configuration
         * @summary Create sweep configuration
         * @param {V2CreateSweepConfigurationRequest} v2CreateSweepConfigurationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceCreateSweepConfiguration(v2CreateSweepConfigurationRequest: V2CreateSweepConfigurationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SweepConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceCreateSweepConfiguration(v2CreateSweepConfigurationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepConfigurationsApi.sweepServiceCreateSweepConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a single sweep configuration based on its ID
         * @summary Delete sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceDeleteSweepConfiguration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceDeleteSweepConfiguration(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepConfigurationsApi.sweepServiceDeleteSweepConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Disable a single sweep configuration based on its ID
         * @summary Disable sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceDisableSweepConfiguration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SweepConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceDisableSweepConfiguration(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepConfigurationsApi.sweepServiceDisableSweepConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable a single sweep configuration based on its ID
         * @summary Enable sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceEnableSweepConfiguration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SweepConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceEnableSweepConfiguration(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepConfigurationsApi.sweepServiceEnableSweepConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single sweep configuration based on its ID
         * @summary Get sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceGetSweepConfiguration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SweepConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceGetSweepConfiguration(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepConfigurationsApi.sweepServiceGetSweepConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List sweep configurations
         * @summary List sweep configurations
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceListSweepConfigurations(pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListSweepConfigurationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceListSweepConfigurations(pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepConfigurationsApi.sweepServiceListSweepConfigurations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Manually trigger a single sweep configuration based on its ID
         * @summary Trigger a sweep configuration
         * @param {string} id The ID of the sweep configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceTriggerSweepConfiguration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceTriggerSweepConfiguration(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepConfigurationsApi.sweepServiceTriggerSweepConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SweepConfigurationsApi - factory interface
 * @export
 */
export const SweepConfigurationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SweepConfigurationsApiFp(configuration)
    return {
        /**
         * Create a new sweep configuration
         * @summary Create sweep configuration
         * @param {SweepConfigurationsApiSweepServiceCreateSweepConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceCreateSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceCreateSweepConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SweepConfiguration> {
            return localVarFp.sweepServiceCreateSweepConfiguration(requestParameters.v2CreateSweepConfigurationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a single sweep configuration based on its ID
         * @summary Delete sweep configuration
         * @param {SweepConfigurationsApiSweepServiceDeleteSweepConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceDeleteSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceDeleteSweepConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.sweepServiceDeleteSweepConfiguration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable a single sweep configuration based on its ID
         * @summary Disable sweep configuration
         * @param {SweepConfigurationsApiSweepServiceDisableSweepConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceDisableSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceDisableSweepConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SweepConfiguration> {
            return localVarFp.sweepServiceDisableSweepConfiguration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable a single sweep configuration based on its ID
         * @summary Enable sweep configuration
         * @param {SweepConfigurationsApiSweepServiceEnableSweepConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceEnableSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceEnableSweepConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SweepConfiguration> {
            return localVarFp.sweepServiceEnableSweepConfiguration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single sweep configuration based on its ID
         * @summary Get sweep configuration
         * @param {SweepConfigurationsApiSweepServiceGetSweepConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceGetSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceGetSweepConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SweepConfiguration> {
            return localVarFp.sweepServiceGetSweepConfiguration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List sweep configurations
         * @summary List sweep configurations
         * @param {SweepConfigurationsApiSweepServiceListSweepConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceListSweepConfigurations(requestParameters: SweepConfigurationsApiSweepServiceListSweepConfigurationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListSweepConfigurationsResponse> {
            return localVarFp.sweepServiceListSweepConfigurations(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Manually trigger a single sweep configuration based on its ID
         * @summary Trigger a sweep configuration
         * @param {SweepConfigurationsApiSweepServiceTriggerSweepConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceTriggerSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceTriggerSweepConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.sweepServiceTriggerSweepConfiguration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sweepServiceCreateSweepConfiguration operation in SweepConfigurationsApi.
 * @export
 * @interface SweepConfigurationsApiSweepServiceCreateSweepConfigurationRequest
 */
export interface SweepConfigurationsApiSweepServiceCreateSweepConfigurationRequest {
    /**
     * 
     * @type {V2CreateSweepConfigurationRequest}
     * @memberof SweepConfigurationsApiSweepServiceCreateSweepConfiguration
     */
    readonly v2CreateSweepConfigurationRequest: V2CreateSweepConfigurationRequest
}

/**
 * Request parameters for sweepServiceDeleteSweepConfiguration operation in SweepConfigurationsApi.
 * @export
 * @interface SweepConfigurationsApiSweepServiceDeleteSweepConfigurationRequest
 */
export interface SweepConfigurationsApiSweepServiceDeleteSweepConfigurationRequest {
    /**
     * The ID of the sweep configuration
     * @type {string}
     * @memberof SweepConfigurationsApiSweepServiceDeleteSweepConfiguration
     */
    readonly id: string
}

/**
 * Request parameters for sweepServiceDisableSweepConfiguration operation in SweepConfigurationsApi.
 * @export
 * @interface SweepConfigurationsApiSweepServiceDisableSweepConfigurationRequest
 */
export interface SweepConfigurationsApiSweepServiceDisableSweepConfigurationRequest {
    /**
     * The ID of the sweep configuration
     * @type {string}
     * @memberof SweepConfigurationsApiSweepServiceDisableSweepConfiguration
     */
    readonly id: string
}

/**
 * Request parameters for sweepServiceEnableSweepConfiguration operation in SweepConfigurationsApi.
 * @export
 * @interface SweepConfigurationsApiSweepServiceEnableSweepConfigurationRequest
 */
export interface SweepConfigurationsApiSweepServiceEnableSweepConfigurationRequest {
    /**
     * The ID of the sweep configuration
     * @type {string}
     * @memberof SweepConfigurationsApiSweepServiceEnableSweepConfiguration
     */
    readonly id: string
}

/**
 * Request parameters for sweepServiceGetSweepConfiguration operation in SweepConfigurationsApi.
 * @export
 * @interface SweepConfigurationsApiSweepServiceGetSweepConfigurationRequest
 */
export interface SweepConfigurationsApiSweepServiceGetSweepConfigurationRequest {
    /**
     * The ID of the sweep configuration
     * @type {string}
     * @memberof SweepConfigurationsApiSweepServiceGetSweepConfiguration
     */
    readonly id: string
}

/**
 * Request parameters for sweepServiceListSweepConfigurations operation in SweepConfigurationsApi.
 * @export
 * @interface SweepConfigurationsApiSweepServiceListSweepConfigurationsRequest
 */
export interface SweepConfigurationsApiSweepServiceListSweepConfigurationsRequest {
    /**
     * The number of results to return per page (default 50, max 100)
     * @type {number}
     * @memberof SweepConfigurationsApiSweepServiceListSweepConfigurations
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof SweepConfigurationsApiSweepServiceListSweepConfigurations
     */
    readonly pageToken?: string
}

/**
 * Request parameters for sweepServiceTriggerSweepConfiguration operation in SweepConfigurationsApi.
 * @export
 * @interface SweepConfigurationsApiSweepServiceTriggerSweepConfigurationRequest
 */
export interface SweepConfigurationsApiSweepServiceTriggerSweepConfigurationRequest {
    /**
     * The ID of the sweep configuration
     * @type {string}
     * @memberof SweepConfigurationsApiSweepServiceTriggerSweepConfiguration
     */
    readonly id: string
}

/**
 * SweepConfigurationsApi - object-oriented interface
 * @export
 * @class SweepConfigurationsApi
 * @extends {BaseAPI}
 */
export class SweepConfigurationsApi extends BaseAPI {
    /**
     * Create a new sweep configuration
     * @summary Create sweep configuration
     * @param {SweepConfigurationsApiSweepServiceCreateSweepConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepConfigurationsApi
     */
    public sweepServiceCreateSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceCreateSweepConfigurationRequest, options?: RawAxiosRequestConfig) {
        return SweepConfigurationsApiFp(this.configuration).sweepServiceCreateSweepConfiguration(requestParameters.v2CreateSweepConfigurationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a single sweep configuration based on its ID
     * @summary Delete sweep configuration
     * @param {SweepConfigurationsApiSweepServiceDeleteSweepConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepConfigurationsApi
     */
    public sweepServiceDeleteSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceDeleteSweepConfigurationRequest, options?: RawAxiosRequestConfig) {
        return SweepConfigurationsApiFp(this.configuration).sweepServiceDeleteSweepConfiguration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disable a single sweep configuration based on its ID
     * @summary Disable sweep configuration
     * @param {SweepConfigurationsApiSweepServiceDisableSweepConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepConfigurationsApi
     */
    public sweepServiceDisableSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceDisableSweepConfigurationRequest, options?: RawAxiosRequestConfig) {
        return SweepConfigurationsApiFp(this.configuration).sweepServiceDisableSweepConfiguration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable a single sweep configuration based on its ID
     * @summary Enable sweep configuration
     * @param {SweepConfigurationsApiSweepServiceEnableSweepConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepConfigurationsApi
     */
    public sweepServiceEnableSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceEnableSweepConfigurationRequest, options?: RawAxiosRequestConfig) {
        return SweepConfigurationsApiFp(this.configuration).sweepServiceEnableSweepConfiguration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single sweep configuration based on its ID
     * @summary Get sweep configuration
     * @param {SweepConfigurationsApiSweepServiceGetSweepConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepConfigurationsApi
     */
    public sweepServiceGetSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceGetSweepConfigurationRequest, options?: RawAxiosRequestConfig) {
        return SweepConfigurationsApiFp(this.configuration).sweepServiceGetSweepConfiguration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List sweep configurations
     * @summary List sweep configurations
     * @param {SweepConfigurationsApiSweepServiceListSweepConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepConfigurationsApi
     */
    public sweepServiceListSweepConfigurations(requestParameters: SweepConfigurationsApiSweepServiceListSweepConfigurationsRequest = {}, options?: RawAxiosRequestConfig) {
        return SweepConfigurationsApiFp(this.configuration).sweepServiceListSweepConfigurations(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manually trigger a single sweep configuration based on its ID
     * @summary Trigger a sweep configuration
     * @param {SweepConfigurationsApiSweepServiceTriggerSweepConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepConfigurationsApi
     */
    public sweepServiceTriggerSweepConfiguration(requestParameters: SweepConfigurationsApiSweepServiceTriggerSweepConfigurationRequest, options?: RawAxiosRequestConfig) {
        return SweepConfigurationsApiFp(this.configuration).sweepServiceTriggerSweepConfiguration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

