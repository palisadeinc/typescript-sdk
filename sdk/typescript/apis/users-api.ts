/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountServiceUpdateUserRequest } from '../models';
// @ts-ignore
import type { AccountServiceUpdateUserRoleRequest } from '../models';
// @ts-ignore
import type { AccountServiceUpdateUserStatusRequest } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2CreateUserRequest } from '../models';
// @ts-ignore
import type { V2ListUserInfoResponse } from '../models';
// @ts-ignore
import type { V2ListUsersResponse } from '../models';
// @ts-ignore
import type { V2User } from '../models';
// @ts-ignore
import type { V2UserAuthMethod } from '../models';
// @ts-ignore
import type { V2UserInfo } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new user
         * @summary Create a user
         * @param {V2CreateUserRequest} v2CreateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceCreateUser: async (v2CreateUserRequest: V2CreateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateUserRequest' is not null or undefined
            assertParamExists('accountServiceCreateUser', 'v2CreateUserRequest', v2CreateUserRequest)
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user
         * @summary Delete users
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceDeleteUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceDeleteUser', 'id', id)
            const localVarPath = `/v2/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all authentication methods for a user
         * @summary Delete authentication methods
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceDeleteUserAuthMethods: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceDeleteUserAuthMethods', 'id', id)
            const localVarPath = `/v2/users/{id}/mfa`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user
         * @summary Get user
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceGetUser', 'id', id)
            const localVarPath = `/v2/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a users info
         * @summary Get user info
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetUserInfo: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceGetUserInfo', 'id', id)
            const localVarPath = `/v2/users/{id}/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a users authentication methods
         * @summary List authentication methods
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListUserAuthMethods: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceListUserAuthMethods', 'id', id)
            const localVarPath = `/v2/users/{id}/mfa`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List user info
         * @summary List user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListUserInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List users
         * @summary List users
         * @param {AccountServiceListUsersRoleEnum} [role] The role to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListUsers: async (role?: AccountServiceListUsersRoleEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Triggers a password reset and sends an email to the user
         * @summary Trigger password reset
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceTriggerPasswordReset: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceTriggerPasswordReset', 'id', id)
            const localVarPath = `/v2/users/{id}/password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user
         * @summary Update users
         * @param {string} id The user ID
         * @param {AccountServiceUpdateUserRequest} accountServiceUpdateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateUser: async (id: string, accountServiceUpdateUserRequest: AccountServiceUpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceUpdateUser', 'id', id)
            // verify required parameter 'accountServiceUpdateUserRequest' is not null or undefined
            assertParamExists('accountServiceUpdateUser', 'accountServiceUpdateUserRequest', accountServiceUpdateUserRequest)
            const localVarPath = `/v2/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountServiceUpdateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a users role
         * @summary Update user role
         * @param {string} id The user ID
         * @param {AccountServiceUpdateUserRoleRequest} accountServiceUpdateUserRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateUserRole: async (id: string, accountServiceUpdateUserRoleRequest: AccountServiceUpdateUserRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceUpdateUserRole', 'id', id)
            // verify required parameter 'accountServiceUpdateUserRoleRequest' is not null or undefined
            assertParamExists('accountServiceUpdateUserRole', 'accountServiceUpdateUserRoleRequest', accountServiceUpdateUserRoleRequest)
            const localVarPath = `/v2/users/{id}/role`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountServiceUpdateUserRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a users status
         * @summary Update user status
         * @param {string} id The user ID
         * @param {AccountServiceUpdateUserStatusRequest} accountServiceUpdateUserStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateUserStatus: async (id: string, accountServiceUpdateUserStatusRequest: AccountServiceUpdateUserStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceUpdateUserStatus', 'id', id)
            // verify required parameter 'accountServiceUpdateUserStatusRequest' is not null or undefined
            assertParamExists('accountServiceUpdateUserStatus', 'accountServiceUpdateUserStatusRequest', accountServiceUpdateUserStatusRequest)
            const localVarPath = `/v2/users/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountServiceUpdateUserStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new user
         * @summary Create a user
         * @param {V2CreateUserRequest} v2CreateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceCreateUser(v2CreateUserRequest: V2CreateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceCreateUser(v2CreateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceCreateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a user
         * @summary Delete users
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceDeleteUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceDeleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceDeleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete all authentication methods for a user
         * @summary Delete authentication methods
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceDeleteUserAuthMethods(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceDeleteUserAuthMethods(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceDeleteUserAuthMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a user
         * @summary Get user
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceGetUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceGetUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceGetUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a users info
         * @summary Get user info
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceGetUserInfo(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceGetUserInfo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceGetUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List a users authentication methods
         * @summary List authentication methods
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceListUserAuthMethods(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2UserAuthMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceListUserAuthMethods(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceListUserAuthMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List user info
         * @summary List user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceListUserInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListUserInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceListUserInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceListUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List users
         * @summary List users
         * @param {AccountServiceListUsersRoleEnum} [role] The role to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceListUsers(role?: AccountServiceListUsersRoleEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceListUsers(role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceListUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Triggers a password reset and sends an email to the user
         * @summary Trigger password reset
         * @param {string} id The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceTriggerPasswordReset(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceTriggerPasswordReset(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceTriggerPasswordReset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a user
         * @summary Update users
         * @param {string} id The user ID
         * @param {AccountServiceUpdateUserRequest} accountServiceUpdateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceUpdateUser(id: string, accountServiceUpdateUserRequest: AccountServiceUpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceUpdateUser(id, accountServiceUpdateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceUpdateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a users role
         * @summary Update user role
         * @param {string} id The user ID
         * @param {AccountServiceUpdateUserRoleRequest} accountServiceUpdateUserRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceUpdateUserRole(id: string, accountServiceUpdateUserRoleRequest: AccountServiceUpdateUserRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceUpdateUserRole(id, accountServiceUpdateUserRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceUpdateUserRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a users status
         * @summary Update user status
         * @param {string} id The user ID
         * @param {AccountServiceUpdateUserStatusRequest} accountServiceUpdateUserStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceUpdateUserStatus(id: string, accountServiceUpdateUserStatusRequest: AccountServiceUpdateUserStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceUpdateUserStatus(id, accountServiceUpdateUserStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.accountServiceUpdateUserStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Create a new user
         * @summary Create a user
         * @param {UsersApiAccountServiceCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceCreateUser(requestParameters: UsersApiAccountServiceCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2User> {
            return localVarFp.accountServiceCreateUser(requestParameters.v2CreateUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user
         * @summary Delete users
         * @param {UsersApiAccountServiceDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceDeleteUser(requestParameters: UsersApiAccountServiceDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.accountServiceDeleteUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all authentication methods for a user
         * @summary Delete authentication methods
         * @param {UsersApiAccountServiceDeleteUserAuthMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceDeleteUserAuthMethods(requestParameters: UsersApiAccountServiceDeleteUserAuthMethodsRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.accountServiceDeleteUserAuthMethods(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user
         * @summary Get user
         * @param {UsersApiAccountServiceGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetUser(requestParameters: UsersApiAccountServiceGetUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2User> {
            return localVarFp.accountServiceGetUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a users info
         * @summary Get user info
         * @param {UsersApiAccountServiceGetUserInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetUserInfo(requestParameters: UsersApiAccountServiceGetUserInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2UserInfo> {
            return localVarFp.accountServiceGetUserInfo(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List a users authentication methods
         * @summary List authentication methods
         * @param {UsersApiAccountServiceListUserAuthMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListUserAuthMethods(requestParameters: UsersApiAccountServiceListUserAuthMethodsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2UserAuthMethod>> {
            return localVarFp.accountServiceListUserAuthMethods(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List user info
         * @summary List user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListUserInfo(options?: RawAxiosRequestConfig): AxiosPromise<V2ListUserInfoResponse> {
            return localVarFp.accountServiceListUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * List users
         * @summary List users
         * @param {UsersApiAccountServiceListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListUsers(requestParameters: UsersApiAccountServiceListUsersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListUsersResponse> {
            return localVarFp.accountServiceListUsers(requestParameters.role, options).then((request) => request(axios, basePath));
        },
        /**
         * Triggers a password reset and sends an email to the user
         * @summary Trigger password reset
         * @param {UsersApiAccountServiceTriggerPasswordResetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceTriggerPasswordReset(requestParameters: UsersApiAccountServiceTriggerPasswordResetRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.accountServiceTriggerPasswordReset(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a user
         * @summary Update users
         * @param {UsersApiAccountServiceUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateUser(requestParameters: UsersApiAccountServiceUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2User> {
            return localVarFp.accountServiceUpdateUser(requestParameters.id, requestParameters.accountServiceUpdateUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a users role
         * @summary Update user role
         * @param {UsersApiAccountServiceUpdateUserRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateUserRole(requestParameters: UsersApiAccountServiceUpdateUserRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2User> {
            return localVarFp.accountServiceUpdateUserRole(requestParameters.id, requestParameters.accountServiceUpdateUserRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a users status
         * @summary Update user status
         * @param {UsersApiAccountServiceUpdateUserStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateUserStatus(requestParameters: UsersApiAccountServiceUpdateUserStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2User> {
            return localVarFp.accountServiceUpdateUserStatus(requestParameters.id, requestParameters.accountServiceUpdateUserStatusRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountServiceCreateUser operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceCreateUserRequest
 */
export interface UsersApiAccountServiceCreateUserRequest {
    /**
     * 
     * @type {V2CreateUserRequest}
     * @memberof UsersApiAccountServiceCreateUser
     */
    readonly v2CreateUserRequest: V2CreateUserRequest
}

/**
 * Request parameters for accountServiceDeleteUser operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceDeleteUserRequest
 */
export interface UsersApiAccountServiceDeleteUserRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceDeleteUser
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceDeleteUserAuthMethods operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceDeleteUserAuthMethodsRequest
 */
export interface UsersApiAccountServiceDeleteUserAuthMethodsRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceDeleteUserAuthMethods
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceGetUser operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceGetUserRequest
 */
export interface UsersApiAccountServiceGetUserRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceGetUser
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceGetUserInfo operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceGetUserInfoRequest
 */
export interface UsersApiAccountServiceGetUserInfoRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceGetUserInfo
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceListUserAuthMethods operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceListUserAuthMethodsRequest
 */
export interface UsersApiAccountServiceListUserAuthMethodsRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceListUserAuthMethods
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceListUsers operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceListUsersRequest
 */
export interface UsersApiAccountServiceListUsersRequest {
    /**
     * The role to filter by
     * @type {'ADMINISTRATOR' | 'APPROVER' | 'AUDITOR' | 'OWNER' | 'PROPOSER' | 'VIEWER'}
     * @memberof UsersApiAccountServiceListUsers
     */
    readonly role?: AccountServiceListUsersRoleEnum
}

/**
 * Request parameters for accountServiceTriggerPasswordReset operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceTriggerPasswordResetRequest
 */
export interface UsersApiAccountServiceTriggerPasswordResetRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceTriggerPasswordReset
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceUpdateUser operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceUpdateUserRequest
 */
export interface UsersApiAccountServiceUpdateUserRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceUpdateUser
     */
    readonly id: string

    /**
     * 
     * @type {AccountServiceUpdateUserRequest}
     * @memberof UsersApiAccountServiceUpdateUser
     */
    readonly accountServiceUpdateUserRequest: AccountServiceUpdateUserRequest
}

/**
 * Request parameters for accountServiceUpdateUserRole operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceUpdateUserRoleRequest
 */
export interface UsersApiAccountServiceUpdateUserRoleRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceUpdateUserRole
     */
    readonly id: string

    /**
     * 
     * @type {AccountServiceUpdateUserRoleRequest}
     * @memberof UsersApiAccountServiceUpdateUserRole
     */
    readonly accountServiceUpdateUserRoleRequest: AccountServiceUpdateUserRoleRequest
}

/**
 * Request parameters for accountServiceUpdateUserStatus operation in UsersApi.
 * @export
 * @interface UsersApiAccountServiceUpdateUserStatusRequest
 */
export interface UsersApiAccountServiceUpdateUserStatusRequest {
    /**
     * The user ID
     * @type {string}
     * @memberof UsersApiAccountServiceUpdateUserStatus
     */
    readonly id: string

    /**
     * 
     * @type {AccountServiceUpdateUserStatusRequest}
     * @memberof UsersApiAccountServiceUpdateUserStatus
     */
    readonly accountServiceUpdateUserStatusRequest: AccountServiceUpdateUserStatusRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Create a new user
     * @summary Create a user
     * @param {UsersApiAccountServiceCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceCreateUser(requestParameters: UsersApiAccountServiceCreateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceCreateUser(requestParameters.v2CreateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user
     * @summary Delete users
     * @param {UsersApiAccountServiceDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceDeleteUser(requestParameters: UsersApiAccountServiceDeleteUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceDeleteUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete all authentication methods for a user
     * @summary Delete authentication methods
     * @param {UsersApiAccountServiceDeleteUserAuthMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceDeleteUserAuthMethods(requestParameters: UsersApiAccountServiceDeleteUserAuthMethodsRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceDeleteUserAuthMethods(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user
     * @summary Get user
     * @param {UsersApiAccountServiceGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceGetUser(requestParameters: UsersApiAccountServiceGetUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceGetUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a users info
     * @summary Get user info
     * @param {UsersApiAccountServiceGetUserInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceGetUserInfo(requestParameters: UsersApiAccountServiceGetUserInfoRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceGetUserInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a users authentication methods
     * @summary List authentication methods
     * @param {UsersApiAccountServiceListUserAuthMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceListUserAuthMethods(requestParameters: UsersApiAccountServiceListUserAuthMethodsRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceListUserAuthMethods(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List user info
     * @summary List user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceListUserInfo(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceListUserInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List users
     * @summary List users
     * @param {UsersApiAccountServiceListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceListUsers(requestParameters: UsersApiAccountServiceListUsersRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceListUsers(requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Triggers a password reset and sends an email to the user
     * @summary Trigger password reset
     * @param {UsersApiAccountServiceTriggerPasswordResetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceTriggerPasswordReset(requestParameters: UsersApiAccountServiceTriggerPasswordResetRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceTriggerPasswordReset(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a user
     * @summary Update users
     * @param {UsersApiAccountServiceUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceUpdateUser(requestParameters: UsersApiAccountServiceUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceUpdateUser(requestParameters.id, requestParameters.accountServiceUpdateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a users role
     * @summary Update user role
     * @param {UsersApiAccountServiceUpdateUserRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceUpdateUserRole(requestParameters: UsersApiAccountServiceUpdateUserRoleRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceUpdateUserRole(requestParameters.id, requestParameters.accountServiceUpdateUserRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a users status
     * @summary Update user status
     * @param {UsersApiAccountServiceUpdateUserStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountServiceUpdateUserStatus(requestParameters: UsersApiAccountServiceUpdateUserStatusRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountServiceUpdateUserStatus(requestParameters.id, requestParameters.accountServiceUpdateUserStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AccountServiceListUsersRoleEnum = {
    Administrator: 'ADMINISTRATOR',
    Approver: 'APPROVER',
    Auditor: 'AUDITOR',
    Owner: 'OWNER',
    Proposer: 'PROPOSER',
    Viewer: 'VIEWER'
} as const;
export type AccountServiceListUsersRoleEnum = typeof AccountServiceListUsersRoleEnum[keyof typeof AccountServiceListUsersRoleEnum];
