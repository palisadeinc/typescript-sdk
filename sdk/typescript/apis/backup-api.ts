/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2BackupStrategy } from '../models';
// @ts-ignore
import type { V2CreateBackupStrategyRequest } from '../models';
// @ts-ignore
import type { V2ListBackupStrategiesResponse } from '../models';
/**
 * BackupApi - axios parameter creator
 * @export
 */
export const BackupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new backup strategy with the provided name and backup keys
         * @summary Create a new backup strategy
         * @param {V2CreateBackupStrategyRequest} v2CreateBackupStrategyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupServiceCreateBackupStrategy: async (v2CreateBackupStrategyRequest: V2CreateBackupStrategyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateBackupStrategyRequest' is not null or undefined
            assertParamExists('backupServiceCreateBackupStrategy', 'v2CreateBackupStrategyRequest', v2CreateBackupStrategyRequest)
            const localVarPath = `/v2/backup/strategies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateBackupStrategyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific backup strategy using its unique identifier
         * @summary Get a backup strategy by ID
         * @param {string} id ID of the backup strategy to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupServiceGetBackupStrategy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('backupServiceGetBackupStrategy', 'id', id)
            const localVarPath = `/v2/backup/strategies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all backup strategies for the authenticated organization
         * @summary List all backup strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupServiceListBackupStrategies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/backup/strategies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackupApi - functional programming interface
 * @export
 */
export const BackupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackupApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new backup strategy with the provided name and backup keys
         * @summary Create a new backup strategy
         * @param {V2CreateBackupStrategyRequest} v2CreateBackupStrategyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backupServiceCreateBackupStrategy(v2CreateBackupStrategyRequest: V2CreateBackupStrategyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2BackupStrategy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.backupServiceCreateBackupStrategy(v2CreateBackupStrategyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackupApi.backupServiceCreateBackupStrategy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific backup strategy using its unique identifier
         * @summary Get a backup strategy by ID
         * @param {string} id ID of the backup strategy to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backupServiceGetBackupStrategy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2BackupStrategy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.backupServiceGetBackupStrategy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackupApi.backupServiceGetBackupStrategy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all backup strategies for the authenticated organization
         * @summary List all backup strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backupServiceListBackupStrategies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListBackupStrategiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.backupServiceListBackupStrategies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BackupApi.backupServiceListBackupStrategies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BackupApi - factory interface
 * @export
 */
export const BackupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackupApiFp(configuration)
    return {
        /**
         * Creates a new backup strategy with the provided name and backup keys
         * @summary Create a new backup strategy
         * @param {BackupApiBackupServiceCreateBackupStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupServiceCreateBackupStrategy(requestParameters: BackupApiBackupServiceCreateBackupStrategyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2BackupStrategy> {
            return localVarFp.backupServiceCreateBackupStrategy(requestParameters.v2CreateBackupStrategyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific backup strategy using its unique identifier
         * @summary Get a backup strategy by ID
         * @param {BackupApiBackupServiceGetBackupStrategyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupServiceGetBackupStrategy(requestParameters: BackupApiBackupServiceGetBackupStrategyRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2BackupStrategy> {
            return localVarFp.backupServiceGetBackupStrategy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all backup strategies for the authenticated organization
         * @summary List all backup strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backupServiceListBackupStrategies(options?: RawAxiosRequestConfig): AxiosPromise<V2ListBackupStrategiesResponse> {
            return localVarFp.backupServiceListBackupStrategies(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for backupServiceCreateBackupStrategy operation in BackupApi.
 * @export
 * @interface BackupApiBackupServiceCreateBackupStrategyRequest
 */
export interface BackupApiBackupServiceCreateBackupStrategyRequest {
    /**
     * 
     * @type {V2CreateBackupStrategyRequest}
     * @memberof BackupApiBackupServiceCreateBackupStrategy
     */
    readonly v2CreateBackupStrategyRequest: V2CreateBackupStrategyRequest
}

/**
 * Request parameters for backupServiceGetBackupStrategy operation in BackupApi.
 * @export
 * @interface BackupApiBackupServiceGetBackupStrategyRequest
 */
export interface BackupApiBackupServiceGetBackupStrategyRequest {
    /**
     * ID of the backup strategy to retrieve
     * @type {string}
     * @memberof BackupApiBackupServiceGetBackupStrategy
     */
    readonly id: string
}

/**
 * BackupApi - object-oriented interface
 * @export
 * @class BackupApi
 * @extends {BaseAPI}
 */
export class BackupApi extends BaseAPI {
    /**
     * Creates a new backup strategy with the provided name and backup keys
     * @summary Create a new backup strategy
     * @param {BackupApiBackupServiceCreateBackupStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupApi
     */
    public backupServiceCreateBackupStrategy(requestParameters: BackupApiBackupServiceCreateBackupStrategyRequest, options?: RawAxiosRequestConfig) {
        return BackupApiFp(this.configuration).backupServiceCreateBackupStrategy(requestParameters.v2CreateBackupStrategyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific backup strategy using its unique identifier
     * @summary Get a backup strategy by ID
     * @param {BackupApiBackupServiceGetBackupStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupApi
     */
    public backupServiceGetBackupStrategy(requestParameters: BackupApiBackupServiceGetBackupStrategyRequest, options?: RawAxiosRequestConfig) {
        return BackupApiFp(this.configuration).backupServiceGetBackupStrategy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all backup strategies for the authenticated organization
     * @summary List all backup strategies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupApi
     */
    public backupServiceListBackupStrategies(options?: RawAxiosRequestConfig) {
        return BackupApiFp(this.configuration).backupServiceListBackupStrategies(options).then((request) => request(this.axios, this.basePath));
    }
}

