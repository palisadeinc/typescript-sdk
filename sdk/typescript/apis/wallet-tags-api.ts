/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2WalletTag } from '../models';
// @ts-ignore
import type { VaultServiceAddWalletTagRequest } from '../models';
/**
 * WalletTagsApi - axios parameter creator
 * @export
 */
export const WalletTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new wallet tag to a wallet
         * @summary Add a new wallet tag
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {VaultServiceAddWalletTagRequest} vaultServiceAddWalletTagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceAddWalletTag: async (vaultId: string, walletId: string, vaultServiceAddWalletTagRequest: VaultServiceAddWalletTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceAddWalletTag', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceAddWalletTag', 'walletId', walletId)
            // verify required parameter 'vaultServiceAddWalletTagRequest' is not null or undefined
            assertParamExists('vaultServiceAddWalletTag', 'vaultServiceAddWalletTagRequest', vaultServiceAddWalletTagRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/tags`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaultServiceAddWalletTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a wallet tag from a wallet
         * @summary Delete a wallet tag
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} tag The tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceDeleteWalletTag: async (vaultId: string, walletId: string, tag: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceDeleteWalletTag', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceDeleteWalletTag', 'walletId', walletId)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('vaultServiceDeleteWalletTag', 'tag', tag)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/tags`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all wallet tags for the wallet
         * @summary List wallet tags for the wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListWalletTags: async (vaultId: string, walletId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceListWalletTags', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('vaultServiceListWalletTags', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/tags`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all tags from all wallets in the vault
         * @summary List all wallet tags in vault
         * @param {string} vaultId The vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListWalletTagsInVault: async (vaultId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceListWalletTagsInVault', 'vaultId', vaultId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/tags`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletTagsApi - functional programming interface
 * @export
 */
export const WalletTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new wallet tag to a wallet
         * @summary Add a new wallet tag
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {VaultServiceAddWalletTagRequest} vaultServiceAddWalletTagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceAddWalletTag(vaultId: string, walletId: string, vaultServiceAddWalletTagRequest: VaultServiceAddWalletTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2WalletTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceAddWalletTag(vaultId, walletId, vaultServiceAddWalletTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletTagsApi.vaultServiceAddWalletTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a wallet tag from a wallet
         * @summary Delete a wallet tag
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} tag The tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceDeleteWalletTag(vaultId: string, walletId: string, tag: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceDeleteWalletTag(vaultId, walletId, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletTagsApi.vaultServiceDeleteWalletTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all wallet tags for the wallet
         * @summary List wallet tags for the wallet
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceListWalletTags(vaultId: string, walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2WalletTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceListWalletTags(vaultId, walletId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletTagsApi.vaultServiceListWalletTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all tags from all wallets in the vault
         * @summary List all wallet tags in vault
         * @param {string} vaultId The vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceListWalletTagsInVault(vaultId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2WalletTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceListWalletTagsInVault(vaultId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletTagsApi.vaultServiceListWalletTagsInVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletTagsApi - factory interface
 * @export
 */
export const WalletTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletTagsApiFp(configuration)
    return {
        /**
         * Add a new wallet tag to a wallet
         * @summary Add a new wallet tag
         * @param {WalletTagsApiVaultServiceAddWalletTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceAddWalletTag(requestParameters: WalletTagsApiVaultServiceAddWalletTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2WalletTag>> {
            return localVarFp.vaultServiceAddWalletTag(requestParameters.vaultId, requestParameters.walletId, requestParameters.vaultServiceAddWalletTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a wallet tag from a wallet
         * @summary Delete a wallet tag
         * @param {WalletTagsApiVaultServiceDeleteWalletTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceDeleteWalletTag(requestParameters: WalletTagsApiVaultServiceDeleteWalletTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.vaultServiceDeleteWalletTag(requestParameters.vaultId, requestParameters.walletId, requestParameters.tag, options).then((request) => request(axios, basePath));
        },
        /**
         * List all wallet tags for the wallet
         * @summary List wallet tags for the wallet
         * @param {WalletTagsApiVaultServiceListWalletTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListWalletTags(requestParameters: WalletTagsApiVaultServiceListWalletTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2WalletTag>> {
            return localVarFp.vaultServiceListWalletTags(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all tags from all wallets in the vault
         * @summary List all wallet tags in vault
         * @param {WalletTagsApiVaultServiceListWalletTagsInVaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListWalletTagsInVault(requestParameters: WalletTagsApiVaultServiceListWalletTagsInVaultRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2WalletTag>> {
            return localVarFp.vaultServiceListWalletTagsInVault(requestParameters.vaultId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for vaultServiceAddWalletTag operation in WalletTagsApi.
 * @export
 * @interface WalletTagsApiVaultServiceAddWalletTagRequest
 */
export interface WalletTagsApiVaultServiceAddWalletTagRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletTagsApiVaultServiceAddWalletTag
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletTagsApiVaultServiceAddWalletTag
     */
    readonly walletId: string

    /**
     * 
     * @type {VaultServiceAddWalletTagRequest}
     * @memberof WalletTagsApiVaultServiceAddWalletTag
     */
    readonly vaultServiceAddWalletTagRequest: VaultServiceAddWalletTagRequest
}

/**
 * Request parameters for vaultServiceDeleteWalletTag operation in WalletTagsApi.
 * @export
 * @interface WalletTagsApiVaultServiceDeleteWalletTagRequest
 */
export interface WalletTagsApiVaultServiceDeleteWalletTagRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletTagsApiVaultServiceDeleteWalletTag
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletTagsApiVaultServiceDeleteWalletTag
     */
    readonly walletId: string

    /**
     * The tag
     * @type {string}
     * @memberof WalletTagsApiVaultServiceDeleteWalletTag
     */
    readonly tag: string
}

/**
 * Request parameters for vaultServiceListWalletTags operation in WalletTagsApi.
 * @export
 * @interface WalletTagsApiVaultServiceListWalletTagsRequest
 */
export interface WalletTagsApiVaultServiceListWalletTagsRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletTagsApiVaultServiceListWalletTags
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof WalletTagsApiVaultServiceListWalletTags
     */
    readonly walletId: string
}

/**
 * Request parameters for vaultServiceListWalletTagsInVault operation in WalletTagsApi.
 * @export
 * @interface WalletTagsApiVaultServiceListWalletTagsInVaultRequest
 */
export interface WalletTagsApiVaultServiceListWalletTagsInVaultRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof WalletTagsApiVaultServiceListWalletTagsInVault
     */
    readonly vaultId: string
}

/**
 * WalletTagsApi - object-oriented interface
 * @export
 * @class WalletTagsApi
 * @extends {BaseAPI}
 */
export class WalletTagsApi extends BaseAPI {
    /**
     * Add a new wallet tag to a wallet
     * @summary Add a new wallet tag
     * @param {WalletTagsApiVaultServiceAddWalletTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletTagsApi
     */
    public vaultServiceAddWalletTag(requestParameters: WalletTagsApiVaultServiceAddWalletTagRequest, options?: RawAxiosRequestConfig) {
        return WalletTagsApiFp(this.configuration).vaultServiceAddWalletTag(requestParameters.vaultId, requestParameters.walletId, requestParameters.vaultServiceAddWalletTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a wallet tag from a wallet
     * @summary Delete a wallet tag
     * @param {WalletTagsApiVaultServiceDeleteWalletTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletTagsApi
     */
    public vaultServiceDeleteWalletTag(requestParameters: WalletTagsApiVaultServiceDeleteWalletTagRequest, options?: RawAxiosRequestConfig) {
        return WalletTagsApiFp(this.configuration).vaultServiceDeleteWalletTag(requestParameters.vaultId, requestParameters.walletId, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all wallet tags for the wallet
     * @summary List wallet tags for the wallet
     * @param {WalletTagsApiVaultServiceListWalletTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletTagsApi
     */
    public vaultServiceListWalletTags(requestParameters: WalletTagsApiVaultServiceListWalletTagsRequest, options?: RawAxiosRequestConfig) {
        return WalletTagsApiFp(this.configuration).vaultServiceListWalletTags(requestParameters.vaultId, requestParameters.walletId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all tags from all wallets in the vault
     * @summary List all wallet tags in vault
     * @param {WalletTagsApiVaultServiceListWalletTagsInVaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletTagsApi
     */
    public vaultServiceListWalletTagsInVault(requestParameters: WalletTagsApiVaultServiceListWalletTagsInVaultRequest, options?: RawAxiosRequestConfig) {
        return WalletTagsApiFp(this.configuration).vaultServiceListWalletTagsInVault(requestParameters.vaultId, options).then((request) => request(this.axios, this.basePath));
    }
}

