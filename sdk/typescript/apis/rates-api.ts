/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2GetRateResponse } from '../models';
/**
 * RatesApi - axios parameter creator
 * @export
 */
export const RatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the rate of a currency pair
         * @summary Get rates
         * @param {BalanceServiceGetRateBlockchainEnum} blockchain 
         * @param {string} symbol The asset symbol
         * @param {string} currency The currency (must be USD)
         * @param {string} [contract] The contract/issuing address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetRate: async (blockchain: BalanceServiceGetRateBlockchainEnum, symbol: string, currency: string, contract?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockchain' is not null or undefined
            assertParamExists('balanceServiceGetRate', 'blockchain', blockchain)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('balanceServiceGetRate', 'symbol', symbol)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('balanceServiceGetRate', 'currency', currency)
            const localVarPath = `/v2/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (blockchain !== undefined) {
                localVarQueryParameter['blockchain'] = blockchain;
            }

            if (contract !== undefined) {
                localVarQueryParameter['contract'] = contract;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatesApi - functional programming interface
 * @export
 */
export const RatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the rate of a currency pair
         * @summary Get rates
         * @param {BalanceServiceGetRateBlockchainEnum} blockchain 
         * @param {string} symbol The asset symbol
         * @param {string} currency The currency (must be USD)
         * @param {string} [contract] The contract/issuing address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceServiceGetRate(blockchain: BalanceServiceGetRateBlockchainEnum, symbol: string, currency: string, contract?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetRateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceServiceGetRate(blockchain, symbol, currency, contract, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RatesApi.balanceServiceGetRate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RatesApi - factory interface
 * @export
 */
export const RatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RatesApiFp(configuration)
    return {
        /**
         * Get the rate of a currency pair
         * @summary Get rates
         * @param {RatesApiBalanceServiceGetRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceServiceGetRate(requestParameters: RatesApiBalanceServiceGetRateRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2GetRateResponse> {
            return localVarFp.balanceServiceGetRate(requestParameters.blockchain, requestParameters.symbol, requestParameters.currency, requestParameters.contract, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for balanceServiceGetRate operation in RatesApi.
 * @export
 * @interface RatesApiBalanceServiceGetRateRequest
 */
export interface RatesApiBalanceServiceGetRateRequest {
    /**
     * 
     * @type {'AVALANCHE' | 'ETHEREUM' | 'XRP_LEDGER' | 'POLYGON' | 'BNBCHAIN' | 'BASE' | 'HEDERA' | 'ARBITRUM' | 'ONE_MONEY' | 'SOLANA' | 'TRON' | 'BITCOIN'}
     * @memberof RatesApiBalanceServiceGetRate
     */
    readonly blockchain: BalanceServiceGetRateBlockchainEnum

    /**
     * The asset symbol
     * @type {string}
     * @memberof RatesApiBalanceServiceGetRate
     */
    readonly symbol: string

    /**
     * The currency (must be USD)
     * @type {string}
     * @memberof RatesApiBalanceServiceGetRate
     */
    readonly currency: string

    /**
     * The contract/issuing address
     * @type {string}
     * @memberof RatesApiBalanceServiceGetRate
     */
    readonly contract?: string
}

/**
 * RatesApi - object-oriented interface
 * @export
 * @class RatesApi
 * @extends {BaseAPI}
 */
export class RatesApi extends BaseAPI {
    /**
     * Get the rate of a currency pair
     * @summary Get rates
     * @param {RatesApiBalanceServiceGetRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApi
     */
    public balanceServiceGetRate(requestParameters: RatesApiBalanceServiceGetRateRequest, options?: RawAxiosRequestConfig) {
        return RatesApiFp(this.configuration).balanceServiceGetRate(requestParameters.blockchain, requestParameters.symbol, requestParameters.currency, requestParameters.contract, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const BalanceServiceGetRateBlockchainEnum = {
    Avalanche: 'AVALANCHE',
    Ethereum: 'ETHEREUM',
    XrpLedger: 'XRP_LEDGER',
    Polygon: 'POLYGON',
    Bnbchain: 'BNBCHAIN',
    Base: 'BASE',
    Hedera: 'HEDERA',
    Arbitrum: 'ARBITRUM',
    OneMoney: 'ONE_MONEY',
    Solana: 'SOLANA',
    Tron: 'TRON',
    Bitcoin: 'BITCOIN'
} as const;
export type BalanceServiceGetRateBlockchainEnum = typeof BalanceServiceGetRateBlockchainEnum[keyof typeof BalanceServiceGetRateBlockchainEnum];
