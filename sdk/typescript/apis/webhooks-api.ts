/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2CreateWebhookRequest } from '../models';
// @ts-ignore
import type { V2ListSubscriptionsResponse } from '../models';
// @ts-ignore
import type { V2ListWebhooksResponse } from '../models';
// @ts-ignore
import type { V2Subscription } from '../models';
// @ts-ignore
import type { V2SubscriptionConfig } from '../models';
// @ts-ignore
import type { V2Webhook } from '../models';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create one or more new webhook subscription
         * @summary Create webhook subscriptions
         * @param {string} webhookId The webhook ID
         * @param {Array<V2SubscriptionConfig>} v2SubscriptionConfig 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceCreateSubscriptions: async (webhookId: string, v2SubscriptionConfig: Array<V2SubscriptionConfig>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('webhookServiceCreateSubscriptions', 'webhookId', webhookId)
            // verify required parameter 'v2SubscriptionConfig' is not null or undefined
            assertParamExists('webhookServiceCreateSubscriptions', 'v2SubscriptionConfig', v2SubscriptionConfig)
            const localVarPath = `/v2/webhooks/{webhookId}/subscriptions`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2SubscriptionConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new webhook
         * @summary Create webhooks
         * @param {V2CreateWebhookRequest} v2CreateWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceCreateWebhook: async (v2CreateWebhookRequest: V2CreateWebhookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateWebhookRequest' is not null or undefined
            assertParamExists('webhookServiceCreateWebhook', 'v2CreateWebhookRequest', v2CreateWebhookRequest)
            const localVarPath = `/v2/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a single subscription based on its ID
         * @summary Delete subscriptions
         * @param {string} webhookId The webhook ID
         * @param {string} subscriptionId The subscription ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceDeleteSubscription: async (webhookId: string, subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('webhookServiceDeleteSubscription', 'webhookId', webhookId)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('webhookServiceDeleteSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/v2/webhooks/{webhookId}/subscriptions/{subscriptionId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a single webhook based on its ID
         * @summary Delete webhooks
         * @param {string} id The webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceDeleteWebhook: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookServiceDeleteWebhook', 'id', id)
            const localVarPath = `/v2/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single subscription based on its ID
         * @summary Get subscriptions
         * @param {string} webhookId The webhook ID
         * @param {string} subscriptionId The subscription ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceGetSubscription: async (webhookId: string, subscriptionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('webhookServiceGetSubscription', 'webhookId', webhookId)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('webhookServiceGetSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/v2/webhooks/{webhookId}/subscriptions/{subscriptionId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single webhook based on its ID
         * @summary Get webhooks
         * @param {string} id The webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceGetWebhook: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookServiceGetWebhook', 'id', id)
            const localVarPath = `/v2/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List subscriptions
         * @summary List subscriptions
         * @param {string} webhookId The webhook ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceListSubscriptions: async (webhookId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('webhookServiceListSubscriptions', 'webhookId', webhookId)
            const localVarPath = `/v2/webhooks/{webhookId}/subscriptions`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List webhooks
         * @summary List webhooks
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceListWebhooks: async (pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create one or more new webhook subscription
         * @summary Create webhook subscriptions
         * @param {string} webhookId The webhook ID
         * @param {Array<V2SubscriptionConfig>} v2SubscriptionConfig 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceCreateSubscriptions(webhookId: string, v2SubscriptionConfig: Array<V2SubscriptionConfig>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Subscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceCreateSubscriptions(webhookId, v2SubscriptionConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceCreateSubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new webhook
         * @summary Create webhooks
         * @param {V2CreateWebhookRequest} v2CreateWebhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceCreateWebhook(v2CreateWebhookRequest: V2CreateWebhookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceCreateWebhook(v2CreateWebhookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceCreateWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a single subscription based on its ID
         * @summary Delete subscriptions
         * @param {string} webhookId The webhook ID
         * @param {string} subscriptionId The subscription ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceDeleteSubscription(webhookId: string, subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceDeleteSubscription(webhookId, subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceDeleteSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a single webhook based on its ID
         * @summary Delete webhooks
         * @param {string} id The webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceDeleteWebhook(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceDeleteWebhook(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceDeleteWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single subscription based on its ID
         * @summary Get subscriptions
         * @param {string} webhookId The webhook ID
         * @param {string} subscriptionId The subscription ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceGetSubscription(webhookId: string, subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceGetSubscription(webhookId, subscriptionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceGetSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single webhook based on its ID
         * @summary Get webhooks
         * @param {string} id The webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceGetWebhook(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceGetWebhook(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceGetWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List subscriptions
         * @summary List subscriptions
         * @param {string} webhookId The webhook ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceListSubscriptions(webhookId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListSubscriptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceListSubscriptions(webhookId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceListSubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List webhooks
         * @summary List webhooks
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookServiceListWebhooks(pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListWebhooksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookServiceListWebhooks(pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhookServiceListWebhooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Create one or more new webhook subscription
         * @summary Create webhook subscriptions
         * @param {WebhooksApiWebhookServiceCreateSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceCreateSubscriptions(requestParameters: WebhooksApiWebhookServiceCreateSubscriptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Subscription>> {
            return localVarFp.webhookServiceCreateSubscriptions(requestParameters.webhookId, requestParameters.v2SubscriptionConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new webhook
         * @summary Create webhooks
         * @param {WebhooksApiWebhookServiceCreateWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceCreateWebhook(requestParameters: WebhooksApiWebhookServiceCreateWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Webhook> {
            return localVarFp.webhookServiceCreateWebhook(requestParameters.v2CreateWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a single subscription based on its ID
         * @summary Delete subscriptions
         * @param {WebhooksApiWebhookServiceDeleteSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceDeleteSubscription(requestParameters: WebhooksApiWebhookServiceDeleteSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.webhookServiceDeleteSubscription(requestParameters.webhookId, requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a single webhook based on its ID
         * @summary Delete webhooks
         * @param {WebhooksApiWebhookServiceDeleteWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceDeleteWebhook(requestParameters: WebhooksApiWebhookServiceDeleteWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.webhookServiceDeleteWebhook(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single subscription based on its ID
         * @summary Get subscriptions
         * @param {WebhooksApiWebhookServiceGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceGetSubscription(requestParameters: WebhooksApiWebhookServiceGetSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Subscription> {
            return localVarFp.webhookServiceGetSubscription(requestParameters.webhookId, requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single webhook based on its ID
         * @summary Get webhooks
         * @param {WebhooksApiWebhookServiceGetWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceGetWebhook(requestParameters: WebhooksApiWebhookServiceGetWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Webhook> {
            return localVarFp.webhookServiceGetWebhook(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List subscriptions
         * @summary List subscriptions
         * @param {WebhooksApiWebhookServiceListSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceListSubscriptions(requestParameters: WebhooksApiWebhookServiceListSubscriptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListSubscriptionsResponse> {
            return localVarFp.webhookServiceListSubscriptions(requestParameters.webhookId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * List webhooks
         * @summary List webhooks
         * @param {WebhooksApiWebhookServiceListWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookServiceListWebhooks(requestParameters: WebhooksApiWebhookServiceListWebhooksRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListWebhooksResponse> {
            return localVarFp.webhookServiceListWebhooks(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for webhookServiceCreateSubscriptions operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceCreateSubscriptionsRequest
 */
export interface WebhooksApiWebhookServiceCreateSubscriptionsRequest {
    /**
     * The webhook ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceCreateSubscriptions
     */
    readonly webhookId: string

    /**
     * 
     * @type {Array<V2SubscriptionConfig>}
     * @memberof WebhooksApiWebhookServiceCreateSubscriptions
     */
    readonly v2SubscriptionConfig: Array<V2SubscriptionConfig>
}

/**
 * Request parameters for webhookServiceCreateWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceCreateWebhookRequest
 */
export interface WebhooksApiWebhookServiceCreateWebhookRequest {
    /**
     * 
     * @type {V2CreateWebhookRequest}
     * @memberof WebhooksApiWebhookServiceCreateWebhook
     */
    readonly v2CreateWebhookRequest: V2CreateWebhookRequest
}

/**
 * Request parameters for webhookServiceDeleteSubscription operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceDeleteSubscriptionRequest
 */
export interface WebhooksApiWebhookServiceDeleteSubscriptionRequest {
    /**
     * The webhook ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceDeleteSubscription
     */
    readonly webhookId: string

    /**
     * The subscription ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceDeleteSubscription
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for webhookServiceDeleteWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceDeleteWebhookRequest
 */
export interface WebhooksApiWebhookServiceDeleteWebhookRequest {
    /**
     * The webhook ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceDeleteWebhook
     */
    readonly id: string
}

/**
 * Request parameters for webhookServiceGetSubscription operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceGetSubscriptionRequest
 */
export interface WebhooksApiWebhookServiceGetSubscriptionRequest {
    /**
     * The webhook ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceGetSubscription
     */
    readonly webhookId: string

    /**
     * The subscription ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceGetSubscription
     */
    readonly subscriptionId: string
}

/**
 * Request parameters for webhookServiceGetWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceGetWebhookRequest
 */
export interface WebhooksApiWebhookServiceGetWebhookRequest {
    /**
     * The webhook ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceGetWebhook
     */
    readonly id: string
}

/**
 * Request parameters for webhookServiceListSubscriptions operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceListSubscriptionsRequest
 */
export interface WebhooksApiWebhookServiceListSubscriptionsRequest {
    /**
     * The webhook ID
     * @type {string}
     * @memberof WebhooksApiWebhookServiceListSubscriptions
     */
    readonly webhookId: string

    /**
     * The number of results to return per page (default 50, max 100)
     * @type {number}
     * @memberof WebhooksApiWebhookServiceListSubscriptions
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof WebhooksApiWebhookServiceListSubscriptions
     */
    readonly pageToken?: string
}

/**
 * Request parameters for webhookServiceListWebhooks operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookServiceListWebhooksRequest
 */
export interface WebhooksApiWebhookServiceListWebhooksRequest {
    /**
     * The number of results to return per page (default 50, max 100)
     * @type {number}
     * @memberof WebhooksApiWebhookServiceListWebhooks
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof WebhooksApiWebhookServiceListWebhooks
     */
    readonly pageToken?: string
}

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * Create one or more new webhook subscription
     * @summary Create webhook subscriptions
     * @param {WebhooksApiWebhookServiceCreateSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceCreateSubscriptions(requestParameters: WebhooksApiWebhookServiceCreateSubscriptionsRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceCreateSubscriptions(requestParameters.webhookId, requestParameters.v2SubscriptionConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new webhook
     * @summary Create webhooks
     * @param {WebhooksApiWebhookServiceCreateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceCreateWebhook(requestParameters: WebhooksApiWebhookServiceCreateWebhookRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceCreateWebhook(requestParameters.v2CreateWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a single subscription based on its ID
     * @summary Delete subscriptions
     * @param {WebhooksApiWebhookServiceDeleteSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceDeleteSubscription(requestParameters: WebhooksApiWebhookServiceDeleteSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceDeleteSubscription(requestParameters.webhookId, requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a single webhook based on its ID
     * @summary Delete webhooks
     * @param {WebhooksApiWebhookServiceDeleteWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceDeleteWebhook(requestParameters: WebhooksApiWebhookServiceDeleteWebhookRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceDeleteWebhook(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single subscription based on its ID
     * @summary Get subscriptions
     * @param {WebhooksApiWebhookServiceGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceGetSubscription(requestParameters: WebhooksApiWebhookServiceGetSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceGetSubscription(requestParameters.webhookId, requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single webhook based on its ID
     * @summary Get webhooks
     * @param {WebhooksApiWebhookServiceGetWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceGetWebhook(requestParameters: WebhooksApiWebhookServiceGetWebhookRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceGetWebhook(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List subscriptions
     * @summary List subscriptions
     * @param {WebhooksApiWebhookServiceListSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceListSubscriptions(requestParameters: WebhooksApiWebhookServiceListSubscriptionsRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceListSubscriptions(requestParameters.webhookId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List webhooks
     * @summary List webhooks
     * @param {WebhooksApiWebhookServiceListWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookServiceListWebhooks(requestParameters: WebhooksApiWebhookServiceListWebhooksRequest = {}, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookServiceListWebhooks(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }
}

