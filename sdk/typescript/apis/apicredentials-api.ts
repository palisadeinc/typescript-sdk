/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CredentialServiceUpdateCredentialActiveStatusRequest } from '../models';
// @ts-ignore
import type { CredentialServiceUpdateCredentialPermissionsRequest } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2CreateCredentialRequest } from '../models';
// @ts-ignore
import type { V2Credential } from '../models';
// @ts-ignore
import type { V2CredentialInfo } from '../models';
// @ts-ignore
import type { V2ExchangeCredentialRequest } from '../models';
// @ts-ignore
import type { V2ExchangeCredentialResponse } from '../models';
// @ts-ignore
import type { V2ListVariantsResponse } from '../models';
/**
 * APICredentialsApi - axios parameter creator
 * @export
 */
export const APICredentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a set of API credentials
         * @summary Create credentials
         * @param {V2CreateCredentialRequest} v2CreateCredentialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceCreateCredential: async (v2CreateCredentialRequest: V2CreateCredentialRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateCredentialRequest' is not null or undefined
            assertParamExists('credentialServiceCreateCredential', 'v2CreateCredentialRequest', v2CreateCredentialRequest)
            const localVarPath = `/v2/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateCredentialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific set of API credentials
         * @summary Delete credential
         * @param {string} id The credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceDeleteCredential: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('credentialServiceDeleteCredential', 'id', id)
            const localVarPath = `/v2/credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth client credentials exchange for access token
         * @summary Client credentials exchange
         * @param {V2ExchangeCredentialRequest} v2ExchangeCredentialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceExchangeCredential: async (v2ExchangeCredentialRequest: V2ExchangeCredentialRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ExchangeCredentialRequest' is not null or undefined
            assertParamExists('credentialServiceExchangeCredential', 'v2ExchangeCredentialRequest', v2ExchangeCredentialRequest)
            const localVarPath = `/v2/credentials/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ExchangeCredentialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a set of API credentials by ID
         * @summary Get credentials
         * @param {string} id The credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceGetCredential: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('credentialServiceGetCredential', 'id', id)
            const localVarPath = `/v2/credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a set of API credential info by ID
         * @summary Get credential info 
         * @param {string} id The credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceGetCredentialInfo: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('credentialServiceGetCredentialInfo', 'id', id)
            const localVarPath = `/v2/credentials/{id}/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all credential info
         * @summary List all credential info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceListCredentialInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/credentials/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all credentials
         * @summary List all credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceListCredentials: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List available permissions for the use with API credentials
         * @summary List available permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceListVariants: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/credentials/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the active status on a specific set of API credentials
         * @summary Update credential active status
         * @param {string} id The credential ID
         * @param {CredentialServiceUpdateCredentialActiveStatusRequest} credentialServiceUpdateCredentialActiveStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceUpdateCredentialActiveStatus: async (id: string, credentialServiceUpdateCredentialActiveStatusRequest: CredentialServiceUpdateCredentialActiveStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('credentialServiceUpdateCredentialActiveStatus', 'id', id)
            // verify required parameter 'credentialServiceUpdateCredentialActiveStatusRequest' is not null or undefined
            assertParamExists('credentialServiceUpdateCredentialActiveStatus', 'credentialServiceUpdateCredentialActiveStatusRequest', credentialServiceUpdateCredentialActiveStatusRequest)
            const localVarPath = `/v2/credentials/{id}/active`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialServiceUpdateCredentialActiveStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the permissions set on a specific set of API credentials
         * @summary Update credential permissions
         * @param {string} id The credential ID
         * @param {CredentialServiceUpdateCredentialPermissionsRequest} credentialServiceUpdateCredentialPermissionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceUpdateCredentialPermissions: async (id: string, credentialServiceUpdateCredentialPermissionsRequest: CredentialServiceUpdateCredentialPermissionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('credentialServiceUpdateCredentialPermissions', 'id', id)
            // verify required parameter 'credentialServiceUpdateCredentialPermissionsRequest' is not null or undefined
            assertParamExists('credentialServiceUpdateCredentialPermissions', 'credentialServiceUpdateCredentialPermissionsRequest', credentialServiceUpdateCredentialPermissionsRequest)
            const localVarPath = `/v2/credentials/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialServiceUpdateCredentialPermissionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APICredentialsApi - functional programming interface
 * @export
 */
export const APICredentialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APICredentialsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a set of API credentials
         * @summary Create credentials
         * @param {V2CreateCredentialRequest} v2CreateCredentialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceCreateCredential(v2CreateCredentialRequest: V2CreateCredentialRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Credential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceCreateCredential(v2CreateCredentialRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceCreateCredential']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific set of API credentials
         * @summary Delete credential
         * @param {string} id The credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceDeleteCredential(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceDeleteCredential(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceDeleteCredential']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * OAuth client credentials exchange for access token
         * @summary Client credentials exchange
         * @param {V2ExchangeCredentialRequest} v2ExchangeCredentialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceExchangeCredential(v2ExchangeCredentialRequest: V2ExchangeCredentialRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ExchangeCredentialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceExchangeCredential(v2ExchangeCredentialRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceExchangeCredential']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a set of API credentials by ID
         * @summary Get credentials
         * @param {string} id The credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceGetCredential(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Credential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceGetCredential(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceGetCredential']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a set of API credential info by ID
         * @summary Get credential info 
         * @param {string} id The credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceGetCredentialInfo(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2CredentialInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceGetCredentialInfo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceGetCredentialInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all credential info
         * @summary List all credential info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceListCredentialInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2CredentialInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceListCredentialInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceListCredentialInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all credentials
         * @summary List all credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceListCredentials(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Credential>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceListCredentials(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceListCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List available permissions for the use with API credentials
         * @summary List available permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceListVariants(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListVariantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceListVariants(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceListVariants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the active status on a specific set of API credentials
         * @summary Update credential active status
         * @param {string} id The credential ID
         * @param {CredentialServiceUpdateCredentialActiveStatusRequest} credentialServiceUpdateCredentialActiveStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceUpdateCredentialActiveStatus(id: string, credentialServiceUpdateCredentialActiveStatusRequest: CredentialServiceUpdateCredentialActiveStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Credential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceUpdateCredentialActiveStatus(id, credentialServiceUpdateCredentialActiveStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceUpdateCredentialActiveStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the permissions set on a specific set of API credentials
         * @summary Update credential permissions
         * @param {string} id The credential ID
         * @param {CredentialServiceUpdateCredentialPermissionsRequest} credentialServiceUpdateCredentialPermissionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialServiceUpdateCredentialPermissions(id: string, credentialServiceUpdateCredentialPermissionsRequest: CredentialServiceUpdateCredentialPermissionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Credential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialServiceUpdateCredentialPermissions(id, credentialServiceUpdateCredentialPermissionsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APICredentialsApi.credentialServiceUpdateCredentialPermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * APICredentialsApi - factory interface
 * @export
 */
export const APICredentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APICredentialsApiFp(configuration)
    return {
        /**
         * Create a set of API credentials
         * @summary Create credentials
         * @param {APICredentialsApiCredentialServiceCreateCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceCreateCredential(requestParameters: APICredentialsApiCredentialServiceCreateCredentialRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Credential> {
            return localVarFp.credentialServiceCreateCredential(requestParameters.v2CreateCredentialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific set of API credentials
         * @summary Delete credential
         * @param {APICredentialsApiCredentialServiceDeleteCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceDeleteCredential(requestParameters: APICredentialsApiCredentialServiceDeleteCredentialRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.credentialServiceDeleteCredential(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * OAuth client credentials exchange for access token
         * @summary Client credentials exchange
         * @param {APICredentialsApiCredentialServiceExchangeCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceExchangeCredential(requestParameters: APICredentialsApiCredentialServiceExchangeCredentialRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ExchangeCredentialResponse> {
            return localVarFp.credentialServiceExchangeCredential(requestParameters.v2ExchangeCredentialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a set of API credentials by ID
         * @summary Get credentials
         * @param {APICredentialsApiCredentialServiceGetCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceGetCredential(requestParameters: APICredentialsApiCredentialServiceGetCredentialRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Credential> {
            return localVarFp.credentialServiceGetCredential(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a set of API credential info by ID
         * @summary Get credential info 
         * @param {APICredentialsApiCredentialServiceGetCredentialInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceGetCredentialInfo(requestParameters: APICredentialsApiCredentialServiceGetCredentialInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CredentialInfo> {
            return localVarFp.credentialServiceGetCredentialInfo(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all credential info
         * @summary List all credential info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceListCredentialInfo(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2CredentialInfo>> {
            return localVarFp.credentialServiceListCredentialInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * List all credentials
         * @summary List all credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceListCredentials(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Credential>> {
            return localVarFp.credentialServiceListCredentials(options).then((request) => request(axios, basePath));
        },
        /**
         * List available permissions for the use with API credentials
         * @summary List available permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceListVariants(options?: RawAxiosRequestConfig): AxiosPromise<V2ListVariantsResponse> {
            return localVarFp.credentialServiceListVariants(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the active status on a specific set of API credentials
         * @summary Update credential active status
         * @param {APICredentialsApiCredentialServiceUpdateCredentialActiveStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceUpdateCredentialActiveStatus(requestParameters: APICredentialsApiCredentialServiceUpdateCredentialActiveStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Credential> {
            return localVarFp.credentialServiceUpdateCredentialActiveStatus(requestParameters.id, requestParameters.credentialServiceUpdateCredentialActiveStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the permissions set on a specific set of API credentials
         * @summary Update credential permissions
         * @param {APICredentialsApiCredentialServiceUpdateCredentialPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialServiceUpdateCredentialPermissions(requestParameters: APICredentialsApiCredentialServiceUpdateCredentialPermissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Credential> {
            return localVarFp.credentialServiceUpdateCredentialPermissions(requestParameters.id, requestParameters.credentialServiceUpdateCredentialPermissionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for credentialServiceCreateCredential operation in APICredentialsApi.
 * @export
 * @interface APICredentialsApiCredentialServiceCreateCredentialRequest
 */
export interface APICredentialsApiCredentialServiceCreateCredentialRequest {
    /**
     * 
     * @type {V2CreateCredentialRequest}
     * @memberof APICredentialsApiCredentialServiceCreateCredential
     */
    readonly v2CreateCredentialRequest: V2CreateCredentialRequest
}

/**
 * Request parameters for credentialServiceDeleteCredential operation in APICredentialsApi.
 * @export
 * @interface APICredentialsApiCredentialServiceDeleteCredentialRequest
 */
export interface APICredentialsApiCredentialServiceDeleteCredentialRequest {
    /**
     * The credential ID
     * @type {string}
     * @memberof APICredentialsApiCredentialServiceDeleteCredential
     */
    readonly id: string
}

/**
 * Request parameters for credentialServiceExchangeCredential operation in APICredentialsApi.
 * @export
 * @interface APICredentialsApiCredentialServiceExchangeCredentialRequest
 */
export interface APICredentialsApiCredentialServiceExchangeCredentialRequest {
    /**
     * 
     * @type {V2ExchangeCredentialRequest}
     * @memberof APICredentialsApiCredentialServiceExchangeCredential
     */
    readonly v2ExchangeCredentialRequest: V2ExchangeCredentialRequest
}

/**
 * Request parameters for credentialServiceGetCredential operation in APICredentialsApi.
 * @export
 * @interface APICredentialsApiCredentialServiceGetCredentialRequest
 */
export interface APICredentialsApiCredentialServiceGetCredentialRequest {
    /**
     * The credential ID
     * @type {string}
     * @memberof APICredentialsApiCredentialServiceGetCredential
     */
    readonly id: string
}

/**
 * Request parameters for credentialServiceGetCredentialInfo operation in APICredentialsApi.
 * @export
 * @interface APICredentialsApiCredentialServiceGetCredentialInfoRequest
 */
export interface APICredentialsApiCredentialServiceGetCredentialInfoRequest {
    /**
     * The credential ID
     * @type {string}
     * @memberof APICredentialsApiCredentialServiceGetCredentialInfo
     */
    readonly id: string
}

/**
 * Request parameters for credentialServiceUpdateCredentialActiveStatus operation in APICredentialsApi.
 * @export
 * @interface APICredentialsApiCredentialServiceUpdateCredentialActiveStatusRequest
 */
export interface APICredentialsApiCredentialServiceUpdateCredentialActiveStatusRequest {
    /**
     * The credential ID
     * @type {string}
     * @memberof APICredentialsApiCredentialServiceUpdateCredentialActiveStatus
     */
    readonly id: string

    /**
     * 
     * @type {CredentialServiceUpdateCredentialActiveStatusRequest}
     * @memberof APICredentialsApiCredentialServiceUpdateCredentialActiveStatus
     */
    readonly credentialServiceUpdateCredentialActiveStatusRequest: CredentialServiceUpdateCredentialActiveStatusRequest
}

/**
 * Request parameters for credentialServiceUpdateCredentialPermissions operation in APICredentialsApi.
 * @export
 * @interface APICredentialsApiCredentialServiceUpdateCredentialPermissionsRequest
 */
export interface APICredentialsApiCredentialServiceUpdateCredentialPermissionsRequest {
    /**
     * The credential ID
     * @type {string}
     * @memberof APICredentialsApiCredentialServiceUpdateCredentialPermissions
     */
    readonly id: string

    /**
     * 
     * @type {CredentialServiceUpdateCredentialPermissionsRequest}
     * @memberof APICredentialsApiCredentialServiceUpdateCredentialPermissions
     */
    readonly credentialServiceUpdateCredentialPermissionsRequest: CredentialServiceUpdateCredentialPermissionsRequest
}

/**
 * APICredentialsApi - object-oriented interface
 * @export
 * @class APICredentialsApi
 * @extends {BaseAPI}
 */
export class APICredentialsApi extends BaseAPI {
    /**
     * Create a set of API credentials
     * @summary Create credentials
     * @param {APICredentialsApiCredentialServiceCreateCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceCreateCredential(requestParameters: APICredentialsApiCredentialServiceCreateCredentialRequest, options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceCreateCredential(requestParameters.v2CreateCredentialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific set of API credentials
     * @summary Delete credential
     * @param {APICredentialsApiCredentialServiceDeleteCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceDeleteCredential(requestParameters: APICredentialsApiCredentialServiceDeleteCredentialRequest, options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceDeleteCredential(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OAuth client credentials exchange for access token
     * @summary Client credentials exchange
     * @param {APICredentialsApiCredentialServiceExchangeCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceExchangeCredential(requestParameters: APICredentialsApiCredentialServiceExchangeCredentialRequest, options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceExchangeCredential(requestParameters.v2ExchangeCredentialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a set of API credentials by ID
     * @summary Get credentials
     * @param {APICredentialsApiCredentialServiceGetCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceGetCredential(requestParameters: APICredentialsApiCredentialServiceGetCredentialRequest, options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceGetCredential(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a set of API credential info by ID
     * @summary Get credential info 
     * @param {APICredentialsApiCredentialServiceGetCredentialInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceGetCredentialInfo(requestParameters: APICredentialsApiCredentialServiceGetCredentialInfoRequest, options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceGetCredentialInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all credential info
     * @summary List all credential info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceListCredentialInfo(options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceListCredentialInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all credentials
     * @summary List all credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceListCredentials(options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceListCredentials(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List available permissions for the use with API credentials
     * @summary List available permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceListVariants(options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceListVariants(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the active status on a specific set of API credentials
     * @summary Update credential active status
     * @param {APICredentialsApiCredentialServiceUpdateCredentialActiveStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceUpdateCredentialActiveStatus(requestParameters: APICredentialsApiCredentialServiceUpdateCredentialActiveStatusRequest, options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceUpdateCredentialActiveStatus(requestParameters.id, requestParameters.credentialServiceUpdateCredentialActiveStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the permissions set on a specific set of API credentials
     * @summary Update credential permissions
     * @param {APICredentialsApiCredentialServiceUpdateCredentialPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APICredentialsApi
     */
    public credentialServiceUpdateCredentialPermissions(requestParameters: APICredentialsApiCredentialServiceUpdateCredentialPermissionsRequest, options?: RawAxiosRequestConfig) {
        return APICredentialsApiFp(this.configuration).credentialServiceUpdateCredentialPermissions(requestParameters.id, requestParameters.credentialServiceUpdateCredentialPermissionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

