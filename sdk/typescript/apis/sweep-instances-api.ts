/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2ListSweepInstancesResponse } from '../models';
// @ts-ignore
import type { V2SweepInstance } from '../models';
/**
 * SweepInstancesApi - axios parameter creator
 * @export
 */
export const SweepInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List sweep instances for a sweep configuration
         * @summary List sweep instances
         * @param {string} sweepConfigurationId The ID of the sweep configuration to list instances for
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceListSweepInstances: async (sweepConfigurationId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sweepConfigurationId' is not null or undefined
            assertParamExists('sweepServiceListSweepInstances', 'sweepConfigurationId', sweepConfigurationId)
            const localVarPath = `/v2/workflows/sweep/{sweepConfigurationId}/instances`
                .replace(`{${"sweepConfigurationId"}}`, encodeURIComponent(String(sweepConfigurationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single sweep instance by its ID
         * @summary Get sweep instance by ID
         * @param {string} id The ID of the sweep instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceSweepInstanceByID: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sweepServiceSweepInstanceByID', 'id', id)
            const localVarPath = `/v2/workflows/sweep/instances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SweepInstancesApi - functional programming interface
 * @export
 */
export const SweepInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SweepInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * List sweep instances for a sweep configuration
         * @summary List sweep instances
         * @param {string} sweepConfigurationId The ID of the sweep configuration to list instances for
         * @param {number} [pageSize] The number of results to return per page (default 50, max 100)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceListSweepInstances(sweepConfigurationId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListSweepInstancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceListSweepInstances(sweepConfigurationId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepInstancesApi.sweepServiceListSweepInstances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single sweep instance by its ID
         * @summary Get sweep instance by ID
         * @param {string} id The ID of the sweep instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sweepServiceSweepInstanceByID(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SweepInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sweepServiceSweepInstanceByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SweepInstancesApi.sweepServiceSweepInstanceByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SweepInstancesApi - factory interface
 * @export
 */
export const SweepInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SweepInstancesApiFp(configuration)
    return {
        /**
         * List sweep instances for a sweep configuration
         * @summary List sweep instances
         * @param {SweepInstancesApiSweepServiceListSweepInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceListSweepInstances(requestParameters: SweepInstancesApiSweepServiceListSweepInstancesRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListSweepInstancesResponse> {
            return localVarFp.sweepServiceListSweepInstances(requestParameters.sweepConfigurationId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single sweep instance by its ID
         * @summary Get sweep instance by ID
         * @param {SweepInstancesApiSweepServiceSweepInstanceByIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sweepServiceSweepInstanceByID(requestParameters: SweepInstancesApiSweepServiceSweepInstanceByIDRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SweepInstance> {
            return localVarFp.sweepServiceSweepInstanceByID(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sweepServiceListSweepInstances operation in SweepInstancesApi.
 * @export
 * @interface SweepInstancesApiSweepServiceListSweepInstancesRequest
 */
export interface SweepInstancesApiSweepServiceListSweepInstancesRequest {
    /**
     * The ID of the sweep configuration to list instances for
     * @type {string}
     * @memberof SweepInstancesApiSweepServiceListSweepInstances
     */
    readonly sweepConfigurationId: string

    /**
     * The number of results to return per page (default 50, max 100)
     * @type {number}
     * @memberof SweepInstancesApiSweepServiceListSweepInstances
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof SweepInstancesApiSweepServiceListSweepInstances
     */
    readonly pageToken?: string
}

/**
 * Request parameters for sweepServiceSweepInstanceByID operation in SweepInstancesApi.
 * @export
 * @interface SweepInstancesApiSweepServiceSweepInstanceByIDRequest
 */
export interface SweepInstancesApiSweepServiceSweepInstanceByIDRequest {
    /**
     * The ID of the sweep instance
     * @type {string}
     * @memberof SweepInstancesApiSweepServiceSweepInstanceByID
     */
    readonly id: string
}

/**
 * SweepInstancesApi - object-oriented interface
 * @export
 * @class SweepInstancesApi
 * @extends {BaseAPI}
 */
export class SweepInstancesApi extends BaseAPI {
    /**
     * List sweep instances for a sweep configuration
     * @summary List sweep instances
     * @param {SweepInstancesApiSweepServiceListSweepInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepInstancesApi
     */
    public sweepServiceListSweepInstances(requestParameters: SweepInstancesApiSweepServiceListSweepInstancesRequest, options?: RawAxiosRequestConfig) {
        return SweepInstancesApiFp(this.configuration).sweepServiceListSweepInstances(requestParameters.sweepConfigurationId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single sweep instance by its ID
     * @summary Get sweep instance by ID
     * @param {SweepInstancesApiSweepServiceSweepInstanceByIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SweepInstancesApi
     */
    public sweepServiceSweepInstanceByID(requestParameters: SweepInstancesApiSweepServiceSweepInstanceByIDRequest, options?: RawAxiosRequestConfig) {
        return SweepInstancesApiFp(this.configuration).sweepServiceSweepInstanceByID(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

