/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Accountv2Organization } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2GenerateSelfServiceSSOTicketResponse } from '../models';
// @ts-ignore
import type { V2OrganizationAuthMethod } from '../models';
// @ts-ignore
import type { V2OrganizationAuthMethodIdpSettings } from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a specific organization authentication method
         * @summary Delete an authentication method
         * @param {string} id The auth method ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceDeleteOrganizationAuthMethod: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceDeleteOrganizationAuthMethod', 'id', id)
            const localVarPath = `/v2/organizations/auth-methods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a self service ticket to setup SSO
         * @summary Generate a self service SSO ticket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGenerateSelfServiceSSOTicket: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/organizations/self-service-sso-ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an organization
         * @summary Get organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetOrganization: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific organization authentication method
         * @summary Get an authentication method
         * @param {string} id The auth method ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetOrganizationAuthMethod: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceGetOrganizationAuthMethod', 'id', id)
            const localVarPath = `/v2/organizations/auth-methods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List an organizations authentication methods
         * @summary List authentication methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListOrganizationAuthMethods: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/organizations/auth-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the default authentication method for an organization
         * @summary Set default authentication method
         * @param {string} id The auth method ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceSetDefaultOrganizationAuthMethod: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceSetDefaultOrganizationAuthMethod', 'id', id)
            const localVarPath = `/v2/organizations/auth-methods/{id}/default`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the IDP settings for an authentication method
         * @summary Update authentication method IDP settings
         * @param {string} id The auth method ID
         * @param {V2OrganizationAuthMethodIdpSettings} v2OrganizationAuthMethodIdpSettings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateOrganizationAuthMethodIdpSettings: async (id: string, v2OrganizationAuthMethodIdpSettings: V2OrganizationAuthMethodIdpSettings, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountServiceUpdateOrganizationAuthMethodIdpSettings', 'id', id)
            // verify required parameter 'v2OrganizationAuthMethodIdpSettings' is not null or undefined
            assertParamExists('accountServiceUpdateOrganizationAuthMethodIdpSettings', 'v2OrganizationAuthMethodIdpSettings', v2OrganizationAuthMethodIdpSettings)
            const localVarPath = `/v2/organizations/auth-methods/{id}/idp`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2OrganizationAuthMethodIdpSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a specific organization authentication method
         * @summary Delete an authentication method
         * @param {string} id The auth method ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceDeleteOrganizationAuthMethod(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceDeleteOrganizationAuthMethod(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.accountServiceDeleteOrganizationAuthMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a self service ticket to setup SSO
         * @summary Generate a self service SSO ticket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceGenerateSelfServiceSSOTicket(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GenerateSelfServiceSSOTicketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceGenerateSelfServiceSSOTicket(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.accountServiceGenerateSelfServiceSSOTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get an organization
         * @summary Get organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceGetOrganization(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accountv2Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceGetOrganization(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.accountServiceGetOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific organization authentication method
         * @summary Get an authentication method
         * @param {string} id The auth method ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceGetOrganizationAuthMethod(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2OrganizationAuthMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceGetOrganizationAuthMethod(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.accountServiceGetOrganizationAuthMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List an organizations authentication methods
         * @summary List authentication methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceListOrganizationAuthMethods(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2OrganizationAuthMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceListOrganizationAuthMethods(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.accountServiceListOrganizationAuthMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set the default authentication method for an organization
         * @summary Set default authentication method
         * @param {string} id The auth method ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceSetDefaultOrganizationAuthMethod(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2OrganizationAuthMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceSetDefaultOrganizationAuthMethod(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.accountServiceSetDefaultOrganizationAuthMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the IDP settings for an authentication method
         * @summary Update authentication method IDP settings
         * @param {string} id The auth method ID
         * @param {V2OrganizationAuthMethodIdpSettings} v2OrganizationAuthMethodIdpSettings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountServiceUpdateOrganizationAuthMethodIdpSettings(id: string, v2OrganizationAuthMethodIdpSettings: V2OrganizationAuthMethodIdpSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2OrganizationAuthMethodIdpSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountServiceUpdateOrganizationAuthMethodIdpSettings(id, v2OrganizationAuthMethodIdpSettings, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.accountServiceUpdateOrganizationAuthMethodIdpSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * Delete a specific organization authentication method
         * @summary Delete an authentication method
         * @param {OrganizationsApiAccountServiceDeleteOrganizationAuthMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceDeleteOrganizationAuthMethod(requestParameters: OrganizationsApiAccountServiceDeleteOrganizationAuthMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.accountServiceDeleteOrganizationAuthMethod(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a self service ticket to setup SSO
         * @summary Generate a self service SSO ticket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGenerateSelfServiceSSOTicket(options?: RawAxiosRequestConfig): AxiosPromise<V2GenerateSelfServiceSSOTicketResponse> {
            return localVarFp.accountServiceGenerateSelfServiceSSOTicket(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an organization
         * @summary Get organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetOrganization(options?: RawAxiosRequestConfig): AxiosPromise<Accountv2Organization> {
            return localVarFp.accountServiceGetOrganization(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific organization authentication method
         * @summary Get an authentication method
         * @param {OrganizationsApiAccountServiceGetOrganizationAuthMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceGetOrganizationAuthMethod(requestParameters: OrganizationsApiAccountServiceGetOrganizationAuthMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrganizationAuthMethod> {
            return localVarFp.accountServiceGetOrganizationAuthMethod(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List an organizations authentication methods
         * @summary List authentication methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceListOrganizationAuthMethods(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2OrganizationAuthMethod>> {
            return localVarFp.accountServiceListOrganizationAuthMethods(options).then((request) => request(axios, basePath));
        },
        /**
         * Set the default authentication method for an organization
         * @summary Set default authentication method
         * @param {OrganizationsApiAccountServiceSetDefaultOrganizationAuthMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceSetDefaultOrganizationAuthMethod(requestParameters: OrganizationsApiAccountServiceSetDefaultOrganizationAuthMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrganizationAuthMethod> {
            return localVarFp.accountServiceSetDefaultOrganizationAuthMethod(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the IDP settings for an authentication method
         * @summary Update authentication method IDP settings
         * @param {OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountServiceUpdateOrganizationAuthMethodIdpSettings(requestParameters: OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrganizationAuthMethodIdpSettings> {
            return localVarFp.accountServiceUpdateOrganizationAuthMethodIdpSettings(requestParameters.id, requestParameters.v2OrganizationAuthMethodIdpSettings, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountServiceDeleteOrganizationAuthMethod operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiAccountServiceDeleteOrganizationAuthMethodRequest
 */
export interface OrganizationsApiAccountServiceDeleteOrganizationAuthMethodRequest {
    /**
     * The auth method ID
     * @type {string}
     * @memberof OrganizationsApiAccountServiceDeleteOrganizationAuthMethod
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceGetOrganizationAuthMethod operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiAccountServiceGetOrganizationAuthMethodRequest
 */
export interface OrganizationsApiAccountServiceGetOrganizationAuthMethodRequest {
    /**
     * The auth method ID
     * @type {string}
     * @memberof OrganizationsApiAccountServiceGetOrganizationAuthMethod
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceSetDefaultOrganizationAuthMethod operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiAccountServiceSetDefaultOrganizationAuthMethodRequest
 */
export interface OrganizationsApiAccountServiceSetDefaultOrganizationAuthMethodRequest {
    /**
     * The auth method ID
     * @type {string}
     * @memberof OrganizationsApiAccountServiceSetDefaultOrganizationAuthMethod
     */
    readonly id: string
}

/**
 * Request parameters for accountServiceUpdateOrganizationAuthMethodIdpSettings operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettingsRequest
 */
export interface OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettingsRequest {
    /**
     * The auth method ID
     * @type {string}
     * @memberof OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettings
     */
    readonly id: string

    /**
     * 
     * @type {V2OrganizationAuthMethodIdpSettings}
     * @memberof OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettings
     */
    readonly v2OrganizationAuthMethodIdpSettings: V2OrganizationAuthMethodIdpSettings
}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * Delete a specific organization authentication method
     * @summary Delete an authentication method
     * @param {OrganizationsApiAccountServiceDeleteOrganizationAuthMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public accountServiceDeleteOrganizationAuthMethod(requestParameters: OrganizationsApiAccountServiceDeleteOrganizationAuthMethodRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).accountServiceDeleteOrganizationAuthMethod(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a self service ticket to setup SSO
     * @summary Generate a self service SSO ticket
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public accountServiceGenerateSelfServiceSSOTicket(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).accountServiceGenerateSelfServiceSSOTicket(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an organization
     * @summary Get organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public accountServiceGetOrganization(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).accountServiceGetOrganization(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific organization authentication method
     * @summary Get an authentication method
     * @param {OrganizationsApiAccountServiceGetOrganizationAuthMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public accountServiceGetOrganizationAuthMethod(requestParameters: OrganizationsApiAccountServiceGetOrganizationAuthMethodRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).accountServiceGetOrganizationAuthMethod(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List an organizations authentication methods
     * @summary List authentication methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public accountServiceListOrganizationAuthMethods(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).accountServiceListOrganizationAuthMethods(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the default authentication method for an organization
     * @summary Set default authentication method
     * @param {OrganizationsApiAccountServiceSetDefaultOrganizationAuthMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public accountServiceSetDefaultOrganizationAuthMethod(requestParameters: OrganizationsApiAccountServiceSetDefaultOrganizationAuthMethodRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).accountServiceSetDefaultOrganizationAuthMethod(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the IDP settings for an authentication method
     * @summary Update authentication method IDP settings
     * @param {OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public accountServiceUpdateOrganizationAuthMethodIdpSettings(requestParameters: OrganizationsApiAccountServiceUpdateOrganizationAuthMethodIdpSettingsRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).accountServiceUpdateOrganizationAuthMethodIdpSettings(requestParameters.id, requestParameters.v2OrganizationAuthMethodIdpSettings, options).then((request) => request(this.axios, this.basePath));
    }
}

