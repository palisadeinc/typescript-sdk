/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2VaultTag } from '../models';
// @ts-ignore
import type { VaultServiceAddVaultTagRequest } from '../models';
/**
 * VaultTagsApi - axios parameter creator
 * @export
 */
export const VaultTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new vault tag to a vault
         * @summary Add a new vault tag
         * @param {string} vaultId The vault ID
         * @param {VaultServiceAddVaultTagRequest} vaultServiceAddVaultTagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceAddVaultTag: async (vaultId: string, vaultServiceAddVaultTagRequest: VaultServiceAddVaultTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceAddVaultTag', 'vaultId', vaultId)
            // verify required parameter 'vaultServiceAddVaultTagRequest' is not null or undefined
            assertParamExists('vaultServiceAddVaultTag', 'vaultServiceAddVaultTagRequest', vaultServiceAddVaultTagRequest)
            const localVarPath = `/v2/vaults/{vaultId}/tags`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaultServiceAddVaultTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a vault tag from a vault
         * @summary Delete a vault tag
         * @param {string} vaultId The vault ID
         * @param {string} tag The tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceDeleteVaultTag: async (vaultId: string, tag: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceDeleteVaultTag', 'vaultId', vaultId)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('vaultServiceDeleteVaultTag', 'tag', tag)
            const localVarPath = `/v2/vaults/{vaultId}/tags`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all vault tags for the organization
         * @summary List all vault tags for the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListGlobalVaultTags: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vaults/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all tags for the vault
         * @summary List tags for the vault
         * @param {string} vaultId The vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListVaultTags: async (vaultId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('vaultServiceListVaultTags', 'vaultId', vaultId)
            const localVarPath = `/v2/vaults/{vaultId}/tags`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaultTagsApi - functional programming interface
 * @export
 */
export const VaultTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VaultTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new vault tag to a vault
         * @summary Add a new vault tag
         * @param {string} vaultId The vault ID
         * @param {VaultServiceAddVaultTagRequest} vaultServiceAddVaultTagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceAddVaultTag(vaultId: string, vaultServiceAddVaultTagRequest: VaultServiceAddVaultTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2VaultTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceAddVaultTag(vaultId, vaultServiceAddVaultTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultTagsApi.vaultServiceAddVaultTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a vault tag from a vault
         * @summary Delete a vault tag
         * @param {string} vaultId The vault ID
         * @param {string} tag The tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceDeleteVaultTag(vaultId: string, tag: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceDeleteVaultTag(vaultId, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultTagsApi.vaultServiceDeleteVaultTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all vault tags for the organization
         * @summary List all vault tags for the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceListGlobalVaultTags(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2VaultTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceListGlobalVaultTags(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultTagsApi.vaultServiceListGlobalVaultTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all tags for the vault
         * @summary List tags for the vault
         * @param {string} vaultId The vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultServiceListVaultTags(vaultId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2VaultTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vaultServiceListVaultTags(vaultId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultTagsApi.vaultServiceListVaultTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VaultTagsApi - factory interface
 * @export
 */
export const VaultTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VaultTagsApiFp(configuration)
    return {
        /**
         * Add a new vault tag to a vault
         * @summary Add a new vault tag
         * @param {VaultTagsApiVaultServiceAddVaultTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceAddVaultTag(requestParameters: VaultTagsApiVaultServiceAddVaultTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2VaultTag>> {
            return localVarFp.vaultServiceAddVaultTag(requestParameters.vaultId, requestParameters.vaultServiceAddVaultTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a vault tag from a vault
         * @summary Delete a vault tag
         * @param {VaultTagsApiVaultServiceDeleteVaultTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceDeleteVaultTag(requestParameters: VaultTagsApiVaultServiceDeleteVaultTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.vaultServiceDeleteVaultTag(requestParameters.vaultId, requestParameters.tag, options).then((request) => request(axios, basePath));
        },
        /**
         * List all vault tags for the organization
         * @summary List all vault tags for the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListGlobalVaultTags(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2VaultTag>> {
            return localVarFp.vaultServiceListGlobalVaultTags(options).then((request) => request(axios, basePath));
        },
        /**
         * List all tags for the vault
         * @summary List tags for the vault
         * @param {VaultTagsApiVaultServiceListVaultTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultServiceListVaultTags(requestParameters: VaultTagsApiVaultServiceListVaultTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2VaultTag>> {
            return localVarFp.vaultServiceListVaultTags(requestParameters.vaultId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for vaultServiceAddVaultTag operation in VaultTagsApi.
 * @export
 * @interface VaultTagsApiVaultServiceAddVaultTagRequest
 */
export interface VaultTagsApiVaultServiceAddVaultTagRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof VaultTagsApiVaultServiceAddVaultTag
     */
    readonly vaultId: string

    /**
     * 
     * @type {VaultServiceAddVaultTagRequest}
     * @memberof VaultTagsApiVaultServiceAddVaultTag
     */
    readonly vaultServiceAddVaultTagRequest: VaultServiceAddVaultTagRequest
}

/**
 * Request parameters for vaultServiceDeleteVaultTag operation in VaultTagsApi.
 * @export
 * @interface VaultTagsApiVaultServiceDeleteVaultTagRequest
 */
export interface VaultTagsApiVaultServiceDeleteVaultTagRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof VaultTagsApiVaultServiceDeleteVaultTag
     */
    readonly vaultId: string

    /**
     * The tag
     * @type {string}
     * @memberof VaultTagsApiVaultServiceDeleteVaultTag
     */
    readonly tag: string
}

/**
 * Request parameters for vaultServiceListVaultTags operation in VaultTagsApi.
 * @export
 * @interface VaultTagsApiVaultServiceListVaultTagsRequest
 */
export interface VaultTagsApiVaultServiceListVaultTagsRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof VaultTagsApiVaultServiceListVaultTags
     */
    readonly vaultId: string
}

/**
 * VaultTagsApi - object-oriented interface
 * @export
 * @class VaultTagsApi
 * @extends {BaseAPI}
 */
export class VaultTagsApi extends BaseAPI {
    /**
     * Add a new vault tag to a vault
     * @summary Add a new vault tag
     * @param {VaultTagsApiVaultServiceAddVaultTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultTagsApi
     */
    public vaultServiceAddVaultTag(requestParameters: VaultTagsApiVaultServiceAddVaultTagRequest, options?: RawAxiosRequestConfig) {
        return VaultTagsApiFp(this.configuration).vaultServiceAddVaultTag(requestParameters.vaultId, requestParameters.vaultServiceAddVaultTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a vault tag from a vault
     * @summary Delete a vault tag
     * @param {VaultTagsApiVaultServiceDeleteVaultTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultTagsApi
     */
    public vaultServiceDeleteVaultTag(requestParameters: VaultTagsApiVaultServiceDeleteVaultTagRequest, options?: RawAxiosRequestConfig) {
        return VaultTagsApiFp(this.configuration).vaultServiceDeleteVaultTag(requestParameters.vaultId, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all vault tags for the organization
     * @summary List all vault tags for the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultTagsApi
     */
    public vaultServiceListGlobalVaultTags(options?: RawAxiosRequestConfig) {
        return VaultTagsApiFp(this.configuration).vaultServiceListGlobalVaultTags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all tags for the vault
     * @summary List tags for the vault
     * @param {VaultTagsApiVaultServiceListVaultTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultTagsApi
     */
    public vaultServiceListVaultTags(requestParameters: VaultTagsApiVaultServiceListVaultTagsRequest, options?: RawAxiosRequestConfig) {
        return VaultTagsApiFp(this.configuration).vaultServiceListVaultTags(requestParameters.vaultId, options).then((request) => request(this.axios, this.basePath));
    }
}

