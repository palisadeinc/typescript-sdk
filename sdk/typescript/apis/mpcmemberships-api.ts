/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2Membership } from '../models';
/**
 * MPCMembershipsApi - axios parameter creator
 * @export
 */
export const MPCMembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List memberships for device
         * @summary List memberships for device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListMembershipsForDevice: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/mpc/device/memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List memberships for quorum
         * @summary List memberships for quorum
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListMembershipsForQuorum: async (quorumId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quorumId' is not null or undefined
            assertParamExists('mpcServiceListMembershipsForQuorum', 'quorumId', quorumId)
            const localVarPath = `/v2/mpc/memberships/{quorumId}`
                .replace(`{${"quorumId"}}`, encodeURIComponent(String(quorumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MPCMembershipsApi - functional programming interface
 * @export
 */
export const MPCMembershipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MPCMembershipsApiAxiosParamCreator(configuration)
    return {
        /**
         * List memberships for device
         * @summary List memberships for device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceListMembershipsForDevice(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Membership>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceListMembershipsForDevice(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCMembershipsApi.mpcServiceListMembershipsForDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List memberships for quorum
         * @summary List memberships for quorum
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceListMembershipsForQuorum(quorumId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Membership>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceListMembershipsForQuorum(quorumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCMembershipsApi.mpcServiceListMembershipsForQuorum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MPCMembershipsApi - factory interface
 * @export
 */
export const MPCMembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MPCMembershipsApiFp(configuration)
    return {
        /**
         * List memberships for device
         * @summary List memberships for device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListMembershipsForDevice(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Membership>> {
            return localVarFp.mpcServiceListMembershipsForDevice(options).then((request) => request(axios, basePath));
        },
        /**
         * List memberships for quorum
         * @summary List memberships for quorum
         * @param {MPCMembershipsApiMpcServiceListMembershipsForQuorumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListMembershipsForQuorum(requestParameters: MPCMembershipsApiMpcServiceListMembershipsForQuorumRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Membership>> {
            return localVarFp.mpcServiceListMembershipsForQuorum(requestParameters.quorumId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mpcServiceListMembershipsForQuorum operation in MPCMembershipsApi.
 * @export
 * @interface MPCMembershipsApiMpcServiceListMembershipsForQuorumRequest
 */
export interface MPCMembershipsApiMpcServiceListMembershipsForQuorumRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCMembershipsApiMpcServiceListMembershipsForQuorum
     */
    readonly quorumId: string
}

/**
 * MPCMembershipsApi - object-oriented interface
 * @export
 * @class MPCMembershipsApi
 * @extends {BaseAPI}
 */
export class MPCMembershipsApi extends BaseAPI {
    /**
     * List memberships for device
     * @summary List memberships for device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCMembershipsApi
     */
    public mpcServiceListMembershipsForDevice(options?: RawAxiosRequestConfig) {
        return MPCMembershipsApiFp(this.configuration).mpcServiceListMembershipsForDevice(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List memberships for quorum
     * @summary List memberships for quorum
     * @param {MPCMembershipsApiMpcServiceListMembershipsForQuorumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCMembershipsApi
     */
    public mpcServiceListMembershipsForQuorum(requestParameters: MPCMembershipsApiMpcServiceListMembershipsForQuorumRequest, options?: RawAxiosRequestConfig) {
        return MPCMembershipsApiFp(this.configuration).mpcServiceListMembershipsForQuorum(requestParameters.quorumId, options).then((request) => request(this.axios, this.basePath));
    }
}

