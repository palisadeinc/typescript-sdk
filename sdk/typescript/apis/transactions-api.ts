/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { TransactionsServiceRawTransactionRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceSignPlaintextRequest } from '../models';
// @ts-ignore
import type { TransactionsServiceTransferTransactionRequest } from '../models';
// @ts-ignore
import type { Transactionsv2Transaction } from '../models';
// @ts-ignore
import type { V2EstimateTransferFeeRequest } from '../models';
// @ts-ignore
import type { V2FeeEstimate } from '../models';
// @ts-ignore
import type { V2GetFreezeHistoryResponse } from '../models';
// @ts-ignore
import type { V2ListWalletTransactionsResponse } from '../models';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Estimate the fee for a transfer transaction
         * @summary Estimate the fee for a transfer transaction
         * @param {V2EstimateTransferFeeRequest} v2EstimateTransferFeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceEstimateTransferFee: async (v2EstimateTransferFeeRequest: V2EstimateTransferFeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2EstimateTransferFeeRequest' is not null or undefined
            assertParamExists('transactionsServiceEstimateTransferFee', 'v2EstimateTransferFeeRequest', v2EstimateTransferFeeRequest)
            const localVarPath = `/v2/transactions/transfer/estimate-fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2EstimateTransferFeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Freeze a transaction by ID
         * @summary Freeze a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {string} reason Reason for freezing the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceFreezeTransaction: async (vaultId: string, walletId: string, transactionId: string, reason: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceFreezeTransaction', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceFreezeTransaction', 'walletId', walletId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('transactionsServiceFreezeTransaction', 'transactionId', transactionId)
            // verify required parameter 'reason' is not null or undefined
            assertParamExists('transactionsServiceFreezeTransaction', 'reason', reason)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/{transactionId}/freeze`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the complete freeze/unfreeze history for a transaction
         * @summary Get freeze history for a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceGetFreezeHistory: async (vaultId: string, walletId: string, transactionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceGetFreezeHistory', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceGetFreezeHistory', 'walletId', walletId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('transactionsServiceGetFreezeHistory', 'transactionId', transactionId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/{transactionId}/freeze-history`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a transaction by ID
         * @summary Get a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceGetTransaction: async (vaultId: string, walletId: string, transactionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceGetTransaction', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceGetTransaction', 'walletId', walletId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('transactionsServiceGetTransaction', 'transactionId', transactionId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/{transactionId}`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all transactions for a given wallet
         * @summary List wallet transactions
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {string} [correlationId] Correlation ID for this request, used to correlate multiple actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceListWalletTransactions: async (vaultId: string, walletId: string, pageSize?: number, pageToken?: string, correlationId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceListWalletTransactions', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceListWalletTransactions', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (correlationId !== undefined) {
                localVarQueryParameter['correlationId'] = correlationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new raw transaction, and optionally publish it to the blockchain
         * @summary Create a new raw transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceRawTransactionRequest} transactionsServiceRawTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceRawTransaction: async (vaultId: string, walletId: string, transactionsServiceRawTransactionRequest: TransactionsServiceRawTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceRawTransaction', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceRawTransaction', 'walletId', walletId)
            // verify required parameter 'transactionsServiceRawTransactionRequest' is not null or undefined
            assertParamExists('transactionsServiceRawTransaction', 'transactionsServiceRawTransactionRequest', transactionsServiceRawTransactionRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/raw`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceRawTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * (BETA) Create a new sign plaintext transaction
         * @summary (BETA) Create a new sign plaintext transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSignPlaintextRequest} transactionsServiceSignPlaintextRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSignPlaintext: async (vaultId: string, walletId: string, transactionsServiceSignPlaintextRequest: TransactionsServiceSignPlaintextRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceSignPlaintext', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceSignPlaintext', 'walletId', walletId)
            // verify required parameter 'transactionsServiceSignPlaintextRequest' is not null or undefined
            assertParamExists('transactionsServiceSignPlaintext', 'transactionsServiceSignPlaintextRequest', transactionsServiceSignPlaintextRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/sign-plaintext`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceSignPlaintextRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new transfer transaction
         * @summary Create a new transfer transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceTransferTransactionRequest} transactionsServiceTransferTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceTransferTransaction: async (vaultId: string, walletId: string, transactionsServiceTransferTransactionRequest: TransactionsServiceTransferTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceTransferTransaction', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceTransferTransaction', 'walletId', walletId)
            // verify required parameter 'transactionsServiceTransferTransactionRequest' is not null or undefined
            assertParamExists('transactionsServiceTransferTransaction', 'transactionsServiceTransferTransactionRequest', transactionsServiceTransferTransactionRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/transfer`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsServiceTransferTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unfreeze a transaction by ID
         * @summary Unfreeze a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {string} reason Reason for unfreezing the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceUnfreezeTransaction: async (vaultId: string, walletId: string, transactionId: string, reason: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('transactionsServiceUnfreezeTransaction', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('transactionsServiceUnfreezeTransaction', 'walletId', walletId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('transactionsServiceUnfreezeTransaction', 'transactionId', transactionId)
            // verify required parameter 'reason' is not null or undefined
            assertParamExists('transactionsServiceUnfreezeTransaction', 'reason', reason)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/transactions/{transactionId}/unfreeze`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Estimate the fee for a transfer transaction
         * @summary Estimate the fee for a transfer transaction
         * @param {V2EstimateTransferFeeRequest} v2EstimateTransferFeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceEstimateTransferFee(v2EstimateTransferFeeRequest: V2EstimateTransferFeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2FeeEstimate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceEstimateTransferFee(v2EstimateTransferFeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceEstimateTransferFee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Freeze a transaction by ID
         * @summary Freeze a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {string} reason Reason for freezing the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceFreezeTransaction(vaultId: string, walletId: string, transactionId: string, reason: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceFreezeTransaction(vaultId, walletId, transactionId, reason, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceFreezeTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the complete freeze/unfreeze history for a transaction
         * @summary Get freeze history for a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceGetFreezeHistory(vaultId: string, walletId: string, transactionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetFreezeHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceGetFreezeHistory(vaultId, walletId, transactionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceGetFreezeHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a transaction by ID
         * @summary Get a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceGetTransaction(vaultId: string, walletId: string, transactionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceGetTransaction(vaultId, walletId, transactionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceGetTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all transactions for a given wallet
         * @summary List wallet transactions
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {string} [correlationId] Correlation ID for this request, used to correlate multiple actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceListWalletTransactions(vaultId: string, walletId: string, pageSize?: number, pageToken?: string, correlationId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListWalletTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceListWalletTransactions(vaultId, walletId, pageSize, pageToken, correlationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceListWalletTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new raw transaction, and optionally publish it to the blockchain
         * @summary Create a new raw transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceRawTransactionRequest} transactionsServiceRawTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceRawTransaction(vaultId: string, walletId: string, transactionsServiceRawTransactionRequest: TransactionsServiceRawTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceRawTransaction(vaultId, walletId, transactionsServiceRawTransactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceRawTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * (BETA) Create a new sign plaintext transaction
         * @summary (BETA) Create a new sign plaintext transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceSignPlaintextRequest} transactionsServiceSignPlaintextRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceSignPlaintext(vaultId: string, walletId: string, transactionsServiceSignPlaintextRequest: TransactionsServiceSignPlaintextRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceSignPlaintext(vaultId, walletId, transactionsServiceSignPlaintextRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceSignPlaintext']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new transfer transaction
         * @summary Create a new transfer transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {TransactionsServiceTransferTransactionRequest} transactionsServiceTransferTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceTransferTransaction(vaultId: string, walletId: string, transactionsServiceTransferTransactionRequest: TransactionsServiceTransferTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceTransferTransaction(vaultId, walletId, transactionsServiceTransferTransactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceTransferTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unfreeze a transaction by ID
         * @summary Unfreeze a transaction
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} transactionId The transaction ID
         * @param {string} reason Reason for unfreezing the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsServiceUnfreezeTransaction(vaultId: string, walletId: string, transactionId: string, reason: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactionsv2Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsServiceUnfreezeTransaction(vaultId, walletId, transactionId, reason, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsServiceUnfreezeTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Estimate the fee for a transfer transaction
         * @summary Estimate the fee for a transfer transaction
         * @param {TransactionsApiTransactionsServiceEstimateTransferFeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceEstimateTransferFee(requestParameters: TransactionsApiTransactionsServiceEstimateTransferFeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2FeeEstimate> {
            return localVarFp.transactionsServiceEstimateTransferFee(requestParameters.v2EstimateTransferFeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Freeze a transaction by ID
         * @summary Freeze a transaction
         * @param {TransactionsApiTransactionsServiceFreezeTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceFreezeTransaction(requestParameters: TransactionsApiTransactionsServiceFreezeTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceFreezeTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, requestParameters.reason, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the complete freeze/unfreeze history for a transaction
         * @summary Get freeze history for a transaction
         * @param {TransactionsApiTransactionsServiceGetFreezeHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceGetFreezeHistory(requestParameters: TransactionsApiTransactionsServiceGetFreezeHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2GetFreezeHistoryResponse> {
            return localVarFp.transactionsServiceGetFreezeHistory(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a transaction by ID
         * @summary Get a transaction
         * @param {TransactionsApiTransactionsServiceGetTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceGetTransaction(requestParameters: TransactionsApiTransactionsServiceGetTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceGetTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all transactions for a given wallet
         * @summary List wallet transactions
         * @param {TransactionsApiTransactionsServiceListWalletTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceListWalletTransactions(requestParameters: TransactionsApiTransactionsServiceListWalletTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListWalletTransactionsResponse> {
            return localVarFp.transactionsServiceListWalletTransactions(requestParameters.vaultId, requestParameters.walletId, requestParameters.pageSize, requestParameters.pageToken, requestParameters.correlationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new raw transaction, and optionally publish it to the blockchain
         * @summary Create a new raw transaction
         * @param {TransactionsApiTransactionsServiceRawTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceRawTransaction(requestParameters: TransactionsApiTransactionsServiceRawTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceRawTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceRawTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * (BETA) Create a new sign plaintext transaction
         * @summary (BETA) Create a new sign plaintext transaction
         * @param {TransactionsApiTransactionsServiceSignPlaintextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceSignPlaintext(requestParameters: TransactionsApiTransactionsServiceSignPlaintextRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceSignPlaintext(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSignPlaintextRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new transfer transaction
         * @summary Create a new transfer transaction
         * @param {TransactionsApiTransactionsServiceTransferTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceTransferTransaction(requestParameters: TransactionsApiTransactionsServiceTransferTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceTransferTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceTransferTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Unfreeze a transaction by ID
         * @summary Unfreeze a transaction
         * @param {TransactionsApiTransactionsServiceUnfreezeTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsServiceUnfreezeTransaction(requestParameters: TransactionsApiTransactionsServiceUnfreezeTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transactionsv2Transaction> {
            return localVarFp.transactionsServiceUnfreezeTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, requestParameters.reason, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for transactionsServiceEstimateTransferFee operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceEstimateTransferFeeRequest
 */
export interface TransactionsApiTransactionsServiceEstimateTransferFeeRequest {
    /**
     * 
     * @type {V2EstimateTransferFeeRequest}
     * @memberof TransactionsApiTransactionsServiceEstimateTransferFee
     */
    readonly v2EstimateTransferFeeRequest: V2EstimateTransferFeeRequest
}

/**
 * Request parameters for transactionsServiceFreezeTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceFreezeTransactionRequest
 */
export interface TransactionsApiTransactionsServiceFreezeTransactionRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceFreezeTransaction
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceFreezeTransaction
     */
    readonly walletId: string

    /**
     * The transaction ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceFreezeTransaction
     */
    readonly transactionId: string

    /**
     * Reason for freezing the transaction
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceFreezeTransaction
     */
    readonly reason: string
}

/**
 * Request parameters for transactionsServiceGetFreezeHistory operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceGetFreezeHistoryRequest
 */
export interface TransactionsApiTransactionsServiceGetFreezeHistoryRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceGetFreezeHistory
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceGetFreezeHistory
     */
    readonly walletId: string

    /**
     * The transaction ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceGetFreezeHistory
     */
    readonly transactionId: string
}

/**
 * Request parameters for transactionsServiceGetTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceGetTransactionRequest
 */
export interface TransactionsApiTransactionsServiceGetTransactionRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceGetTransaction
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceGetTransaction
     */
    readonly walletId: string

    /**
     * The transaction ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceGetTransaction
     */
    readonly transactionId: string
}

/**
 * Request parameters for transactionsServiceListWalletTransactions operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceListWalletTransactionsRequest
 */
export interface TransactionsApiTransactionsServiceListWalletTransactionsRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceListWalletTransactions
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceListWalletTransactions
     */
    readonly walletId: string

    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof TransactionsApiTransactionsServiceListWalletTransactions
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceListWalletTransactions
     */
    readonly pageToken?: string

    /**
     * Correlation ID for this request, used to correlate multiple actions
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceListWalletTransactions
     */
    readonly correlationId?: string
}

/**
 * Request parameters for transactionsServiceRawTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceRawTransactionRequest
 */
export interface TransactionsApiTransactionsServiceRawTransactionRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceRawTransaction
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceRawTransaction
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceRawTransactionRequest}
     * @memberof TransactionsApiTransactionsServiceRawTransaction
     */
    readonly transactionsServiceRawTransactionRequest: TransactionsServiceRawTransactionRequest
}

/**
 * Request parameters for transactionsServiceSignPlaintext operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceSignPlaintextRequest
 */
export interface TransactionsApiTransactionsServiceSignPlaintextRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceSignPlaintext
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceSignPlaintext
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceSignPlaintextRequest}
     * @memberof TransactionsApiTransactionsServiceSignPlaintext
     */
    readonly transactionsServiceSignPlaintextRequest: TransactionsServiceSignPlaintextRequest
}

/**
 * Request parameters for transactionsServiceTransferTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceTransferTransactionRequest
 */
export interface TransactionsApiTransactionsServiceTransferTransactionRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceTransferTransaction
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceTransferTransaction
     */
    readonly walletId: string

    /**
     * 
     * @type {TransactionsServiceTransferTransactionRequest}
     * @memberof TransactionsApiTransactionsServiceTransferTransaction
     */
    readonly transactionsServiceTransferTransactionRequest: TransactionsServiceTransferTransactionRequest
}

/**
 * Request parameters for transactionsServiceUnfreezeTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsServiceUnfreezeTransactionRequest
 */
export interface TransactionsApiTransactionsServiceUnfreezeTransactionRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceUnfreezeTransaction
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceUnfreezeTransaction
     */
    readonly walletId: string

    /**
     * The transaction ID
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceUnfreezeTransaction
     */
    readonly transactionId: string

    /**
     * Reason for unfreezing the transaction
     * @type {string}
     * @memberof TransactionsApiTransactionsServiceUnfreezeTransaction
     */
    readonly reason: string
}

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * Estimate the fee for a transfer transaction
     * @summary Estimate the fee for a transfer transaction
     * @param {TransactionsApiTransactionsServiceEstimateTransferFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceEstimateTransferFee(requestParameters: TransactionsApiTransactionsServiceEstimateTransferFeeRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceEstimateTransferFee(requestParameters.v2EstimateTransferFeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Freeze a transaction by ID
     * @summary Freeze a transaction
     * @param {TransactionsApiTransactionsServiceFreezeTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceFreezeTransaction(requestParameters: TransactionsApiTransactionsServiceFreezeTransactionRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceFreezeTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, requestParameters.reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the complete freeze/unfreeze history for a transaction
     * @summary Get freeze history for a transaction
     * @param {TransactionsApiTransactionsServiceGetFreezeHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceGetFreezeHistory(requestParameters: TransactionsApiTransactionsServiceGetFreezeHistoryRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceGetFreezeHistory(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a transaction by ID
     * @summary Get a transaction
     * @param {TransactionsApiTransactionsServiceGetTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceGetTransaction(requestParameters: TransactionsApiTransactionsServiceGetTransactionRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceGetTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all transactions for a given wallet
     * @summary List wallet transactions
     * @param {TransactionsApiTransactionsServiceListWalletTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceListWalletTransactions(requestParameters: TransactionsApiTransactionsServiceListWalletTransactionsRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceListWalletTransactions(requestParameters.vaultId, requestParameters.walletId, requestParameters.pageSize, requestParameters.pageToken, requestParameters.correlationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new raw transaction, and optionally publish it to the blockchain
     * @summary Create a new raw transaction
     * @param {TransactionsApiTransactionsServiceRawTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceRawTransaction(requestParameters: TransactionsApiTransactionsServiceRawTransactionRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceRawTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceRawTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * (BETA) Create a new sign plaintext transaction
     * @summary (BETA) Create a new sign plaintext transaction
     * @param {TransactionsApiTransactionsServiceSignPlaintextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceSignPlaintext(requestParameters: TransactionsApiTransactionsServiceSignPlaintextRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceSignPlaintext(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceSignPlaintextRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new transfer transaction
     * @summary Create a new transfer transaction
     * @param {TransactionsApiTransactionsServiceTransferTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceTransferTransaction(requestParameters: TransactionsApiTransactionsServiceTransferTransactionRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceTransferTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionsServiceTransferTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unfreeze a transaction by ID
     * @summary Unfreeze a transaction
     * @param {TransactionsApiTransactionsServiceUnfreezeTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsServiceUnfreezeTransaction(requestParameters: TransactionsApiTransactionsServiceUnfreezeTransactionRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsServiceUnfreezeTransaction(requestParameters.vaultId, requestParameters.walletId, requestParameters.transactionId, requestParameters.reason, options).then((request) => request(this.axios, this.basePath));
    }
}

