/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MpcServiceModifyQuorumRequest } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2CreateQuorumRequest } from '../models';
// @ts-ignore
import type { V2EligibleDevice } from '../models';
// @ts-ignore
import type { V2Quorum } from '../models';
// @ts-ignore
import type { V2QuorumStatus } from '../models';
/**
 * MPCQuorumsApi - axios parameter creator
 * @export
 */
export const MPCQuorumsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new quorum
         * @summary Create a new quorum
         * @param {V2CreateQuorumRequest} v2CreateQuorumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceCreateQuorum: async (v2CreateQuorumRequest: V2CreateQuorumRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2CreateQuorumRequest' is not null or undefined
            assertParamExists('mpcServiceCreateQuorum', 'v2CreateQuorumRequest', v2CreateQuorumRequest)
            const localVarPath = `/v2/mpc/quorums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CreateQuorumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a quorum
         * @summary Delete a quorum
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceDeleteQuorum: async (quorumId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quorumId' is not null or undefined
            assertParamExists('mpcServiceDeleteQuorum', 'quorumId', quorumId)
            const localVarPath = `/v2/mpc/quorums/{quorumId}`
                .replace(`{${"quorumId"}}`, encodeURIComponent(String(quorumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a quorum
         * @summary Get a quorum
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceGetQuorum: async (quorumId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quorumId' is not null or undefined
            assertParamExists('mpcServiceGetQuorum', 'quorumId', quorumId)
            const localVarPath = `/v2/mpc/quorums/{quorumId}`
                .replace(`{${"quorumId"}}`, encodeURIComponent(String(quorumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List eligible devices
         * @summary List eligible devices
         * @param {MpcServiceListEligibleDevicesDeviceTypeEnum} deviceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListEligibleDevices: async (deviceType: MpcServiceListEligibleDevicesDeviceTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceType' is not null or undefined
            assertParamExists('mpcServiceListEligibleDevices', 'deviceType', deviceType)
            const localVarPath = `/v2/mpc/eligible`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (deviceType !== undefined) {
                localVarQueryParameter['deviceType'] = deviceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List quorums with the client JWT
         * @summary List quorums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListQuorums: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/mpc/quorums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List quorums with the device JWT
         * @summary List quorums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListQuorumsByDevice: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/mpc/quorums/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify an existing quorum
         * @summary Modify an existing quorum
         * @param {string} quorumId 
         * @param {MpcServiceModifyQuorumRequest} mpcServiceModifyQuorumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceModifyQuorum: async (quorumId: string, mpcServiceModifyQuorumRequest: MpcServiceModifyQuorumRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quorumId' is not null or undefined
            assertParamExists('mpcServiceModifyQuorum', 'quorumId', quorumId)
            // verify required parameter 'mpcServiceModifyQuorumRequest' is not null or undefined
            assertParamExists('mpcServiceModifyQuorum', 'mpcServiceModifyQuorumRequest', mpcServiceModifyQuorumRequest)
            const localVarPath = `/v2/mpc/quorums/{quorumId}`
                .replace(`{${"quorumId"}}`, encodeURIComponent(String(quorumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mpcServiceModifyQuorumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Poll quorum status
         * @summary Poll quorum status
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServicePollQuorumStatus: async (quorumId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quorumId' is not null or undefined
            assertParamExists('mpcServicePollQuorumStatus', 'quorumId', quorumId)
            const localVarPath = `/v2/mpc/quorums/{quorumId}/status`
                .replace(`{${"quorumId"}}`, encodeURIComponent(String(quorumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MPCQuorumsApi - functional programming interface
 * @export
 */
export const MPCQuorumsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MPCQuorumsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new quorum
         * @summary Create a new quorum
         * @param {V2CreateQuorumRequest} v2CreateQuorumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceCreateQuorum(v2CreateQuorumRequest: V2CreateQuorumRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Quorum>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceCreateQuorum(v2CreateQuorumRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServiceCreateQuorum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a quorum
         * @summary Delete a quorum
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceDeleteQuorum(quorumId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Quorum>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceDeleteQuorum(quorumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServiceDeleteQuorum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a quorum
         * @summary Get a quorum
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceGetQuorum(quorumId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Quorum>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceGetQuorum(quorumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServiceGetQuorum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List eligible devices
         * @summary List eligible devices
         * @param {MpcServiceListEligibleDevicesDeviceTypeEnum} deviceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceListEligibleDevices(deviceType: MpcServiceListEligibleDevicesDeviceTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2EligibleDevice>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceListEligibleDevices(deviceType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServiceListEligibleDevices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List quorums with the client JWT
         * @summary List quorums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceListQuorums(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Quorum>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceListQuorums(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServiceListQuorums']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List quorums with the device JWT
         * @summary List quorums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceListQuorumsByDevice(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Quorum>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceListQuorumsByDevice(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServiceListQuorumsByDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modify an existing quorum
         * @summary Modify an existing quorum
         * @param {string} quorumId 
         * @param {MpcServiceModifyQuorumRequest} mpcServiceModifyQuorumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceModifyQuorum(quorumId: string, mpcServiceModifyQuorumRequest: MpcServiceModifyQuorumRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Quorum>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceModifyQuorum(quorumId, mpcServiceModifyQuorumRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServiceModifyQuorum']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Poll quorum status
         * @summary Poll quorum status
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServicePollQuorumStatus(quorumId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2QuorumStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServicePollQuorumStatus(quorumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCQuorumsApi.mpcServicePollQuorumStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MPCQuorumsApi - factory interface
 * @export
 */
export const MPCQuorumsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MPCQuorumsApiFp(configuration)
    return {
        /**
         * Create a new quorum
         * @summary Create a new quorum
         * @param {MPCQuorumsApiMpcServiceCreateQuorumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceCreateQuorum(requestParameters: MPCQuorumsApiMpcServiceCreateQuorumRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Quorum> {
            return localVarFp.mpcServiceCreateQuorum(requestParameters.v2CreateQuorumRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a quorum
         * @summary Delete a quorum
         * @param {MPCQuorumsApiMpcServiceDeleteQuorumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceDeleteQuorum(requestParameters: MPCQuorumsApiMpcServiceDeleteQuorumRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Quorum> {
            return localVarFp.mpcServiceDeleteQuorum(requestParameters.quorumId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a quorum
         * @summary Get a quorum
         * @param {MPCQuorumsApiMpcServiceGetQuorumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceGetQuorum(requestParameters: MPCQuorumsApiMpcServiceGetQuorumRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Quorum> {
            return localVarFp.mpcServiceGetQuorum(requestParameters.quorumId, options).then((request) => request(axios, basePath));
        },
        /**
         * List eligible devices
         * @summary List eligible devices
         * @param {MPCQuorumsApiMpcServiceListEligibleDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListEligibleDevices(requestParameters: MPCQuorumsApiMpcServiceListEligibleDevicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2EligibleDevice>> {
            return localVarFp.mpcServiceListEligibleDevices(requestParameters.deviceType, options).then((request) => request(axios, basePath));
        },
        /**
         * List quorums with the client JWT
         * @summary List quorums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListQuorums(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Quorum>> {
            return localVarFp.mpcServiceListQuorums(options).then((request) => request(axios, basePath));
        },
        /**
         * List quorums with the device JWT
         * @summary List quorums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListQuorumsByDevice(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Quorum>> {
            return localVarFp.mpcServiceListQuorumsByDevice(options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an existing quorum
         * @summary Modify an existing quorum
         * @param {MPCQuorumsApiMpcServiceModifyQuorumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceModifyQuorum(requestParameters: MPCQuorumsApiMpcServiceModifyQuorumRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Quorum> {
            return localVarFp.mpcServiceModifyQuorum(requestParameters.quorumId, requestParameters.mpcServiceModifyQuorumRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Poll quorum status
         * @summary Poll quorum status
         * @param {MPCQuorumsApiMpcServicePollQuorumStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServicePollQuorumStatus(requestParameters: MPCQuorumsApiMpcServicePollQuorumStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2QuorumStatus> {
            return localVarFp.mpcServicePollQuorumStatus(requestParameters.quorumId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mpcServiceCreateQuorum operation in MPCQuorumsApi.
 * @export
 * @interface MPCQuorumsApiMpcServiceCreateQuorumRequest
 */
export interface MPCQuorumsApiMpcServiceCreateQuorumRequest {
    /**
     * 
     * @type {V2CreateQuorumRequest}
     * @memberof MPCQuorumsApiMpcServiceCreateQuorum
     */
    readonly v2CreateQuorumRequest: V2CreateQuorumRequest
}

/**
 * Request parameters for mpcServiceDeleteQuorum operation in MPCQuorumsApi.
 * @export
 * @interface MPCQuorumsApiMpcServiceDeleteQuorumRequest
 */
export interface MPCQuorumsApiMpcServiceDeleteQuorumRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCQuorumsApiMpcServiceDeleteQuorum
     */
    readonly quorumId: string
}

/**
 * Request parameters for mpcServiceGetQuorum operation in MPCQuorumsApi.
 * @export
 * @interface MPCQuorumsApiMpcServiceGetQuorumRequest
 */
export interface MPCQuorumsApiMpcServiceGetQuorumRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCQuorumsApiMpcServiceGetQuorum
     */
    readonly quorumId: string
}

/**
 * Request parameters for mpcServiceListEligibleDevices operation in MPCQuorumsApi.
 * @export
 * @interface MPCQuorumsApiMpcServiceListEligibleDevicesRequest
 */
export interface MPCQuorumsApiMpcServiceListEligibleDevicesRequest {
    /**
     * 
     * @type {'MOBILE' | 'CLOUD'}
     * @memberof MPCQuorumsApiMpcServiceListEligibleDevices
     */
    readonly deviceType: MpcServiceListEligibleDevicesDeviceTypeEnum
}

/**
 * Request parameters for mpcServiceModifyQuorum operation in MPCQuorumsApi.
 * @export
 * @interface MPCQuorumsApiMpcServiceModifyQuorumRequest
 */
export interface MPCQuorumsApiMpcServiceModifyQuorumRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCQuorumsApiMpcServiceModifyQuorum
     */
    readonly quorumId: string

    /**
     * 
     * @type {MpcServiceModifyQuorumRequest}
     * @memberof MPCQuorumsApiMpcServiceModifyQuorum
     */
    readonly mpcServiceModifyQuorumRequest: MpcServiceModifyQuorumRequest
}

/**
 * Request parameters for mpcServicePollQuorumStatus operation in MPCQuorumsApi.
 * @export
 * @interface MPCQuorumsApiMpcServicePollQuorumStatusRequest
 */
export interface MPCQuorumsApiMpcServicePollQuorumStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCQuorumsApiMpcServicePollQuorumStatus
     */
    readonly quorumId: string
}

/**
 * MPCQuorumsApi - object-oriented interface
 * @export
 * @class MPCQuorumsApi
 * @extends {BaseAPI}
 */
export class MPCQuorumsApi extends BaseAPI {
    /**
     * Create a new quorum
     * @summary Create a new quorum
     * @param {MPCQuorumsApiMpcServiceCreateQuorumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServiceCreateQuorum(requestParameters: MPCQuorumsApiMpcServiceCreateQuorumRequest, options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServiceCreateQuorum(requestParameters.v2CreateQuorumRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a quorum
     * @summary Delete a quorum
     * @param {MPCQuorumsApiMpcServiceDeleteQuorumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServiceDeleteQuorum(requestParameters: MPCQuorumsApiMpcServiceDeleteQuorumRequest, options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServiceDeleteQuorum(requestParameters.quorumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a quorum
     * @summary Get a quorum
     * @param {MPCQuorumsApiMpcServiceGetQuorumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServiceGetQuorum(requestParameters: MPCQuorumsApiMpcServiceGetQuorumRequest, options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServiceGetQuorum(requestParameters.quorumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List eligible devices
     * @summary List eligible devices
     * @param {MPCQuorumsApiMpcServiceListEligibleDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServiceListEligibleDevices(requestParameters: MPCQuorumsApiMpcServiceListEligibleDevicesRequest, options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServiceListEligibleDevices(requestParameters.deviceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List quorums with the client JWT
     * @summary List quorums
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServiceListQuorums(options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServiceListQuorums(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List quorums with the device JWT
     * @summary List quorums
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServiceListQuorumsByDevice(options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServiceListQuorumsByDevice(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify an existing quorum
     * @summary Modify an existing quorum
     * @param {MPCQuorumsApiMpcServiceModifyQuorumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServiceModifyQuorum(requestParameters: MPCQuorumsApiMpcServiceModifyQuorumRequest, options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServiceModifyQuorum(requestParameters.quorumId, requestParameters.mpcServiceModifyQuorumRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Poll quorum status
     * @summary Poll quorum status
     * @param {MPCQuorumsApiMpcServicePollQuorumStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCQuorumsApi
     */
    public mpcServicePollQuorumStatus(requestParameters: MPCQuorumsApiMpcServicePollQuorumStatusRequest, options?: RawAxiosRequestConfig) {
        return MPCQuorumsApiFp(this.configuration).mpcServicePollQuorumStatus(requestParameters.quorumId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MpcServiceListEligibleDevicesDeviceTypeEnum = {
    Mobile: 'MOBILE',
    Cloud: 'CLOUD'
} as const;
export type MpcServiceListEligibleDevicesDeviceTypeEnum = typeof MpcServiceListEligibleDevicesDeviceTypeEnum[keyof typeof MpcServiceListEligibleDevicesDeviceTypeEnum];
