/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PolicyServiceCreateWalletLimitRequest } from '../models';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2ListGlobalWalletLimitsResponse } from '../models';
// @ts-ignore
import type { V2ListPermittedDestinationsResponse } from '../models';
// @ts-ignore
import type { V2ListWalletLimitsResponse } from '../models';
// @ts-ignore
import type { V2WalletLimit } from '../models';
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export const PoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a wallet limit policy for the specified wallet
         * @summary Create a wallet limit policy
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {PolicyServiceCreateWalletLimitRequest} policyServiceCreateWalletLimitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceCreateWalletLimit: async (vaultId: string, walletId: string, policyServiceCreateWalletLimitRequest: PolicyServiceCreateWalletLimitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('policyServiceCreateWalletLimit', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('policyServiceCreateWalletLimit', 'walletId', walletId)
            // verify required parameter 'policyServiceCreateWalletLimitRequest' is not null or undefined
            assertParamExists('policyServiceCreateWalletLimit', 'policyServiceCreateWalletLimitRequest', policyServiceCreateWalletLimitRequest)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/policy-rules/limits`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policyServiceCreateWalletLimitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the specified wallet limit policy
         * @summary Delete a wallet limit policy
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} id The wallet limit policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceDeleteWalletLimit: async (vaultId: string, walletId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('policyServiceDeleteWalletLimit', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('policyServiceDeleteWalletLimit', 'walletId', walletId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyServiceDeleteWalletLimit', 'id', id)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/policy-rules/limits/{id}`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the specified wallet limit policy
         * @summary Get a wallet limit policy
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} id The wallet limit policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceGetWalletLimit: async (vaultId: string, walletId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('policyServiceGetWalletLimit', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('policyServiceGetWalletLimit', 'walletId', walletId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyServiceGetWalletLimit', 'id', id)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/policy-rules/limits/{id}`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all wallet limits within the organization
         * @summary List organization wallet limits
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceListGlobalWalletLimits: async (pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/policy-rules/limits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all permitted destinations for this wallet
         * @summary List permitted destinations
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceListPermittedDestinations: async (vaultId: string, walletId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('policyServiceListPermittedDestinations', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('policyServiceListPermittedDestinations', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/policy-rules/permitted-destinations`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List wallet limit policies for the specified wallet
         * @summary List wallet limit policies
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceListWalletLimits: async (vaultId: string, walletId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('policyServiceListWalletLimits', 'vaultId', vaultId)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('policyServiceListWalletLimits', 'walletId', walletId)
            const localVarPath = `/v2/vaults/{vaultId}/wallets/{walletId}/policy-rules/limits`
                .replace(`{${"vaultId"}}`, encodeURIComponent(String(vaultId)))
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoliciesApi - functional programming interface
 * @export
 */
export const PoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a wallet limit policy for the specified wallet
         * @summary Create a wallet limit policy
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {PolicyServiceCreateWalletLimitRequest} policyServiceCreateWalletLimitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyServiceCreateWalletLimit(vaultId: string, walletId: string, policyServiceCreateWalletLimitRequest: PolicyServiceCreateWalletLimitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2WalletLimit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyServiceCreateWalletLimit(vaultId, walletId, policyServiceCreateWalletLimitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PoliciesApi.policyServiceCreateWalletLimit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the specified wallet limit policy
         * @summary Delete a wallet limit policy
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} id The wallet limit policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyServiceDeleteWalletLimit(vaultId: string, walletId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyServiceDeleteWalletLimit(vaultId, walletId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PoliciesApi.policyServiceDeleteWalletLimit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the specified wallet limit policy
         * @summary Get a wallet limit policy
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {string} id The wallet limit policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyServiceGetWalletLimit(vaultId: string, walletId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2WalletLimit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyServiceGetWalletLimit(vaultId, walletId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PoliciesApi.policyServiceGetWalletLimit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all wallet limits within the organization
         * @summary List organization wallet limits
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyServiceListGlobalWalletLimits(pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListGlobalWalletLimitsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyServiceListGlobalWalletLimits(pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PoliciesApi.policyServiceListGlobalWalletLimits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all permitted destinations for this wallet
         * @summary List permitted destinations
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyServiceListPermittedDestinations(vaultId: string, walletId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListPermittedDestinationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyServiceListPermittedDestinations(vaultId, walletId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PoliciesApi.policyServiceListPermittedDestinations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List wallet limit policies for the specified wallet
         * @summary List wallet limit policies
         * @param {string} vaultId The vault ID
         * @param {string} walletId The wallet ID
         * @param {number} [pageSize] The number of results to return per page (default 50, max 1000)
         * @param {string} [pageToken] The token to retrieve the next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyServiceListWalletLimits(vaultId: string, walletId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ListWalletLimitsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyServiceListWalletLimits(vaultId, walletId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PoliciesApi.policyServiceListWalletLimits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PoliciesApi - factory interface
 * @export
 */
export const PoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PoliciesApiFp(configuration)
    return {
        /**
         * Create a wallet limit policy for the specified wallet
         * @summary Create a wallet limit policy
         * @param {PoliciesApiPolicyServiceCreateWalletLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceCreateWalletLimit(requestParameters: PoliciesApiPolicyServiceCreateWalletLimitRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2WalletLimit> {
            return localVarFp.policyServiceCreateWalletLimit(requestParameters.vaultId, requestParameters.walletId, requestParameters.policyServiceCreateWalletLimitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the specified wallet limit policy
         * @summary Delete a wallet limit policy
         * @param {PoliciesApiPolicyServiceDeleteWalletLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceDeleteWalletLimit(requestParameters: PoliciesApiPolicyServiceDeleteWalletLimitRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.policyServiceDeleteWalletLimit(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the specified wallet limit policy
         * @summary Get a wallet limit policy
         * @param {PoliciesApiPolicyServiceGetWalletLimitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceGetWalletLimit(requestParameters: PoliciesApiPolicyServiceGetWalletLimitRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2WalletLimit> {
            return localVarFp.policyServiceGetWalletLimit(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all wallet limits within the organization
         * @summary List organization wallet limits
         * @param {PoliciesApiPolicyServiceListGlobalWalletLimitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceListGlobalWalletLimits(requestParameters: PoliciesApiPolicyServiceListGlobalWalletLimitsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2ListGlobalWalletLimitsResponse> {
            return localVarFp.policyServiceListGlobalWalletLimits(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * List all permitted destinations for this wallet
         * @summary List permitted destinations
         * @param {PoliciesApiPolicyServiceListPermittedDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceListPermittedDestinations(requestParameters: PoliciesApiPolicyServiceListPermittedDestinationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListPermittedDestinationsResponse> {
            return localVarFp.policyServiceListPermittedDestinations(requestParameters.vaultId, requestParameters.walletId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * List wallet limit policies for the specified wallet
         * @summary List wallet limit policies
         * @param {PoliciesApiPolicyServiceListWalletLimitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyServiceListWalletLimits(requestParameters: PoliciesApiPolicyServiceListWalletLimitsRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ListWalletLimitsResponse> {
            return localVarFp.policyServiceListWalletLimits(requestParameters.vaultId, requestParameters.walletId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for policyServiceCreateWalletLimit operation in PoliciesApi.
 * @export
 * @interface PoliciesApiPolicyServiceCreateWalletLimitRequest
 */
export interface PoliciesApiPolicyServiceCreateWalletLimitRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceCreateWalletLimit
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceCreateWalletLimit
     */
    readonly walletId: string

    /**
     * 
     * @type {PolicyServiceCreateWalletLimitRequest}
     * @memberof PoliciesApiPolicyServiceCreateWalletLimit
     */
    readonly policyServiceCreateWalletLimitRequest: PolicyServiceCreateWalletLimitRequest
}

/**
 * Request parameters for policyServiceDeleteWalletLimit operation in PoliciesApi.
 * @export
 * @interface PoliciesApiPolicyServiceDeleteWalletLimitRequest
 */
export interface PoliciesApiPolicyServiceDeleteWalletLimitRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceDeleteWalletLimit
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceDeleteWalletLimit
     */
    readonly walletId: string

    /**
     * The wallet limit policy ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceDeleteWalletLimit
     */
    readonly id: string
}

/**
 * Request parameters for policyServiceGetWalletLimit operation in PoliciesApi.
 * @export
 * @interface PoliciesApiPolicyServiceGetWalletLimitRequest
 */
export interface PoliciesApiPolicyServiceGetWalletLimitRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceGetWalletLimit
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceGetWalletLimit
     */
    readonly walletId: string

    /**
     * The wallet limit policy ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceGetWalletLimit
     */
    readonly id: string
}

/**
 * Request parameters for policyServiceListGlobalWalletLimits operation in PoliciesApi.
 * @export
 * @interface PoliciesApiPolicyServiceListGlobalWalletLimitsRequest
 */
export interface PoliciesApiPolicyServiceListGlobalWalletLimitsRequest {
    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof PoliciesApiPolicyServiceListGlobalWalletLimits
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof PoliciesApiPolicyServiceListGlobalWalletLimits
     */
    readonly pageToken?: string
}

/**
 * Request parameters for policyServiceListPermittedDestinations operation in PoliciesApi.
 * @export
 * @interface PoliciesApiPolicyServiceListPermittedDestinationsRequest
 */
export interface PoliciesApiPolicyServiceListPermittedDestinationsRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceListPermittedDestinations
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceListPermittedDestinations
     */
    readonly walletId: string

    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof PoliciesApiPolicyServiceListPermittedDestinations
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof PoliciesApiPolicyServiceListPermittedDestinations
     */
    readonly pageToken?: string
}

/**
 * Request parameters for policyServiceListWalletLimits operation in PoliciesApi.
 * @export
 * @interface PoliciesApiPolicyServiceListWalletLimitsRequest
 */
export interface PoliciesApiPolicyServiceListWalletLimitsRequest {
    /**
     * The vault ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceListWalletLimits
     */
    readonly vaultId: string

    /**
     * The wallet ID
     * @type {string}
     * @memberof PoliciesApiPolicyServiceListWalletLimits
     */
    readonly walletId: string

    /**
     * The number of results to return per page (default 50, max 1000)
     * @type {number}
     * @memberof PoliciesApiPolicyServiceListWalletLimits
     */
    readonly pageSize?: number

    /**
     * The token to retrieve the next page of results
     * @type {string}
     * @memberof PoliciesApiPolicyServiceListWalletLimits
     */
    readonly pageToken?: string
}

/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export class PoliciesApi extends BaseAPI {
    /**
     * Create a wallet limit policy for the specified wallet
     * @summary Create a wallet limit policy
     * @param {PoliciesApiPolicyServiceCreateWalletLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public policyServiceCreateWalletLimit(requestParameters: PoliciesApiPolicyServiceCreateWalletLimitRequest, options?: RawAxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).policyServiceCreateWalletLimit(requestParameters.vaultId, requestParameters.walletId, requestParameters.policyServiceCreateWalletLimitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the specified wallet limit policy
     * @summary Delete a wallet limit policy
     * @param {PoliciesApiPolicyServiceDeleteWalletLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public policyServiceDeleteWalletLimit(requestParameters: PoliciesApiPolicyServiceDeleteWalletLimitRequest, options?: RawAxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).policyServiceDeleteWalletLimit(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the specified wallet limit policy
     * @summary Get a wallet limit policy
     * @param {PoliciesApiPolicyServiceGetWalletLimitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public policyServiceGetWalletLimit(requestParameters: PoliciesApiPolicyServiceGetWalletLimitRequest, options?: RawAxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).policyServiceGetWalletLimit(requestParameters.vaultId, requestParameters.walletId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all wallet limits within the organization
     * @summary List organization wallet limits
     * @param {PoliciesApiPolicyServiceListGlobalWalletLimitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public policyServiceListGlobalWalletLimits(requestParameters: PoliciesApiPolicyServiceListGlobalWalletLimitsRequest = {}, options?: RawAxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).policyServiceListGlobalWalletLimits(requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all permitted destinations for this wallet
     * @summary List permitted destinations
     * @param {PoliciesApiPolicyServiceListPermittedDestinationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public policyServiceListPermittedDestinations(requestParameters: PoliciesApiPolicyServiceListPermittedDestinationsRequest, options?: RawAxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).policyServiceListPermittedDestinations(requestParameters.vaultId, requestParameters.walletId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List wallet limit policies for the specified wallet
     * @summary List wallet limit policies
     * @param {PoliciesApiPolicyServiceListWalletLimitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public policyServiceListWalletLimits(requestParameters: PoliciesApiPolicyServiceListWalletLimitsRequest, options?: RawAxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).policyServiceListWalletLimits(requestParameters.vaultId, requestParameters.walletId, requestParameters.pageSize, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }
}

