/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2GetNotabeneCustomerTokenResponse } from '../models';
// @ts-ignore
import type { V2GetNotabeneVASPSearchResponse } from '../models';
/**
 * ComplianceApi - axios parameter creator
 * @export
 */
export const ComplianceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new notabene customer token
         * @summary Create customer tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceServiceGetNotabeneCustomerToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/notabene/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for VASPs using the notabene search endpoint
         * @summary Search for VASPs
         * @param {string} [q] string to query
         * @param {string} [emailDomain] filter on email domain
         * @param {string} [chainalysisName] filter on chainalysis name
         * @param {boolean} [hasAdmin] filter on hasAdmin (true or false)
         * @param {string} [badge] filter by badge
         * @param {string} [jurisdictions] filter by jurisdictions (multiple jurisdictions can be provided as a comma-separated list)
         * @param {string} [fields] csv of fields to return
         * @param {number} [page] page number
         * @param {number} [perPage] records per page
         * @param {string} [order] field to order by
         * @param {boolean} [all] return all records
         * @param {string} [listingType] Choose how gateway VASPs and non-gateway VASPs are returned. By default, exclude_subsidiaries.
         * @param {boolean} [includeUncheckedVasps] Defaults to false Include VASPs that have not been internally checked
         * @param {boolean} [includeActiveSendersOnly] Defaults to false Include only VASPs that are actively sending transactions
         * @param {boolean} [includeActiveReceiversOnly] Defaults to false Include only VASPs that are actively receiving transactions
         * @param {string} [regulatoryStatus] Include only VASPs matching the specified regulatory status
         * @param {string} [networkStatus] Include only VASPs matching the specified network status
         * @param {string} [asset] Asset symbol, provide when filtering by wallet
         * @param {string} [reviewedByVaspDid] Include reviewed VASPs for the specified DID
         * @param {boolean} [showJurisdictionStatus] Include jurisdiction status information
         * @param {string} [reviewValue] Include reviewed VASPs containing the specified value
         * @param {Array<string>} [reviewIncludeInWidget] Include VASPs based on review \&quot;included in widget\&quot; status
         * @param {string} [filterByJurisdictionStatus] Filter by specified jurisdiction status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceServiceGetNotabeneVASPSearch: async (q?: string, emailDomain?: string, chainalysisName?: string, hasAdmin?: boolean, badge?: string, jurisdictions?: string, fields?: string, page?: number, perPage?: number, order?: string, all?: boolean, listingType?: string, includeUncheckedVasps?: boolean, includeActiveSendersOnly?: boolean, includeActiveReceiversOnly?: boolean, regulatoryStatus?: string, networkStatus?: string, asset?: string, reviewedByVaspDid?: string, showJurisdictionStatus?: boolean, reviewValue?: string, reviewIncludeInWidget?: Array<string>, filterByJurisdictionStatus?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/notabene/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (emailDomain !== undefined) {
                localVarQueryParameter['emailDomain'] = emailDomain;
            }

            if (chainalysisName !== undefined) {
                localVarQueryParameter['chainalysisName'] = chainalysisName;
            }

            if (hasAdmin !== undefined) {
                localVarQueryParameter['hasAdmin'] = hasAdmin;
            }

            if (badge !== undefined) {
                localVarQueryParameter['badge'] = badge;
            }

            if (jurisdictions !== undefined) {
                localVarQueryParameter['jurisdictions'] = jurisdictions;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (listingType !== undefined) {
                localVarQueryParameter['listingType'] = listingType;
            }

            if (includeUncheckedVasps !== undefined) {
                localVarQueryParameter['includeUncheckedVasps'] = includeUncheckedVasps;
            }

            if (includeActiveSendersOnly !== undefined) {
                localVarQueryParameter['includeActiveSendersOnly'] = includeActiveSendersOnly;
            }

            if (includeActiveReceiversOnly !== undefined) {
                localVarQueryParameter['includeActiveReceiversOnly'] = includeActiveReceiversOnly;
            }

            if (regulatoryStatus !== undefined) {
                localVarQueryParameter['regulatoryStatus'] = regulatoryStatus;
            }

            if (networkStatus !== undefined) {
                localVarQueryParameter['networkStatus'] = networkStatus;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (reviewedByVaspDid !== undefined) {
                localVarQueryParameter['reviewedByVaspDid'] = reviewedByVaspDid;
            }

            if (showJurisdictionStatus !== undefined) {
                localVarQueryParameter['showJurisdictionStatus'] = showJurisdictionStatus;
            }

            if (reviewValue !== undefined) {
                localVarQueryParameter['reviewValue'] = reviewValue;
            }

            if (reviewIncludeInWidget) {
                localVarQueryParameter['reviewIncludeInWidget'] = reviewIncludeInWidget;
            }

            if (filterByJurisdictionStatus !== undefined) {
                localVarQueryParameter['filterByJurisdictionStatus'] = filterByJurisdictionStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComplianceApi - functional programming interface
 * @export
 */
export const ComplianceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComplianceApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new notabene customer token
         * @summary Create customer tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complianceServiceGetNotabeneCustomerToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetNotabeneCustomerTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complianceServiceGetNotabeneCustomerToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComplianceApi.complianceServiceGetNotabeneCustomerToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for VASPs using the notabene search endpoint
         * @summary Search for VASPs
         * @param {string} [q] string to query
         * @param {string} [emailDomain] filter on email domain
         * @param {string} [chainalysisName] filter on chainalysis name
         * @param {boolean} [hasAdmin] filter on hasAdmin (true or false)
         * @param {string} [badge] filter by badge
         * @param {string} [jurisdictions] filter by jurisdictions (multiple jurisdictions can be provided as a comma-separated list)
         * @param {string} [fields] csv of fields to return
         * @param {number} [page] page number
         * @param {number} [perPage] records per page
         * @param {string} [order] field to order by
         * @param {boolean} [all] return all records
         * @param {string} [listingType] Choose how gateway VASPs and non-gateway VASPs are returned. By default, exclude_subsidiaries.
         * @param {boolean} [includeUncheckedVasps] Defaults to false Include VASPs that have not been internally checked
         * @param {boolean} [includeActiveSendersOnly] Defaults to false Include only VASPs that are actively sending transactions
         * @param {boolean} [includeActiveReceiversOnly] Defaults to false Include only VASPs that are actively receiving transactions
         * @param {string} [regulatoryStatus] Include only VASPs matching the specified regulatory status
         * @param {string} [networkStatus] Include only VASPs matching the specified network status
         * @param {string} [asset] Asset symbol, provide when filtering by wallet
         * @param {string} [reviewedByVaspDid] Include reviewed VASPs for the specified DID
         * @param {boolean} [showJurisdictionStatus] Include jurisdiction status information
         * @param {string} [reviewValue] Include reviewed VASPs containing the specified value
         * @param {Array<string>} [reviewIncludeInWidget] Include VASPs based on review \&quot;included in widget\&quot; status
         * @param {string} [filterByJurisdictionStatus] Filter by specified jurisdiction status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complianceServiceGetNotabeneVASPSearch(q?: string, emailDomain?: string, chainalysisName?: string, hasAdmin?: boolean, badge?: string, jurisdictions?: string, fields?: string, page?: number, perPage?: number, order?: string, all?: boolean, listingType?: string, includeUncheckedVasps?: boolean, includeActiveSendersOnly?: boolean, includeActiveReceiversOnly?: boolean, regulatoryStatus?: string, networkStatus?: string, asset?: string, reviewedByVaspDid?: string, showJurisdictionStatus?: boolean, reviewValue?: string, reviewIncludeInWidget?: Array<string>, filterByJurisdictionStatus?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetNotabeneVASPSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complianceServiceGetNotabeneVASPSearch(q, emailDomain, chainalysisName, hasAdmin, badge, jurisdictions, fields, page, perPage, order, all, listingType, includeUncheckedVasps, includeActiveSendersOnly, includeActiveReceiversOnly, regulatoryStatus, networkStatus, asset, reviewedByVaspDid, showJurisdictionStatus, reviewValue, reviewIncludeInWidget, filterByJurisdictionStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComplianceApi.complianceServiceGetNotabeneVASPSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ComplianceApi - factory interface
 * @export
 */
export const ComplianceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComplianceApiFp(configuration)
    return {
        /**
         * Create a new notabene customer token
         * @summary Create customer tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceServiceGetNotabeneCustomerToken(options?: RawAxiosRequestConfig): AxiosPromise<V2GetNotabeneCustomerTokenResponse> {
            return localVarFp.complianceServiceGetNotabeneCustomerToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Search for VASPs using the notabene search endpoint
         * @summary Search for VASPs
         * @param {ComplianceApiComplianceServiceGetNotabeneVASPSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceServiceGetNotabeneVASPSearch(requestParameters: ComplianceApiComplianceServiceGetNotabeneVASPSearchRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2GetNotabeneVASPSearchResponse> {
            return localVarFp.complianceServiceGetNotabeneVASPSearch(requestParameters.q, requestParameters.emailDomain, requestParameters.chainalysisName, requestParameters.hasAdmin, requestParameters.badge, requestParameters.jurisdictions, requestParameters.fields, requestParameters.page, requestParameters.perPage, requestParameters.order, requestParameters.all, requestParameters.listingType, requestParameters.includeUncheckedVasps, requestParameters.includeActiveSendersOnly, requestParameters.includeActiveReceiversOnly, requestParameters.regulatoryStatus, requestParameters.networkStatus, requestParameters.asset, requestParameters.reviewedByVaspDid, requestParameters.showJurisdictionStatus, requestParameters.reviewValue, requestParameters.reviewIncludeInWidget, requestParameters.filterByJurisdictionStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for complianceServiceGetNotabeneVASPSearch operation in ComplianceApi.
 * @export
 * @interface ComplianceApiComplianceServiceGetNotabeneVASPSearchRequest
 */
export interface ComplianceApiComplianceServiceGetNotabeneVASPSearchRequest {
    /**
     * string to query
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly q?: string

    /**
     * filter on email domain
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly emailDomain?: string

    /**
     * filter on chainalysis name
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly chainalysisName?: string

    /**
     * filter on hasAdmin (true or false)
     * @type {boolean}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly hasAdmin?: boolean

    /**
     * filter by badge
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly badge?: string

    /**
     * filter by jurisdictions (multiple jurisdictions can be provided as a comma-separated list)
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly jurisdictions?: string

    /**
     * csv of fields to return
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly fields?: string

    /**
     * page number
     * @type {number}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly page?: number

    /**
     * records per page
     * @type {number}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly perPage?: number

    /**
     * field to order by
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly order?: string

    /**
     * return all records
     * @type {boolean}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly all?: boolean

    /**
     * Choose how gateway VASPs and non-gateway VASPs are returned. By default, exclude_subsidiaries.
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly listingType?: string

    /**
     * Defaults to false Include VASPs that have not been internally checked
     * @type {boolean}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly includeUncheckedVasps?: boolean

    /**
     * Defaults to false Include only VASPs that are actively sending transactions
     * @type {boolean}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly includeActiveSendersOnly?: boolean

    /**
     * Defaults to false Include only VASPs that are actively receiving transactions
     * @type {boolean}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly includeActiveReceiversOnly?: boolean

    /**
     * Include only VASPs matching the specified regulatory status
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly regulatoryStatus?: string

    /**
     * Include only VASPs matching the specified network status
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly networkStatus?: string

    /**
     * Asset symbol, provide when filtering by wallet
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly asset?: string

    /**
     * Include reviewed VASPs for the specified DID
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly reviewedByVaspDid?: string

    /**
     * Include jurisdiction status information
     * @type {boolean}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly showJurisdictionStatus?: boolean

    /**
     * Include reviewed VASPs containing the specified value
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly reviewValue?: string

    /**
     * Include VASPs based on review \&quot;included in widget\&quot; status
     * @type {Array<string>}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly reviewIncludeInWidget?: Array<string>

    /**
     * Filter by specified jurisdiction status
     * @type {string}
     * @memberof ComplianceApiComplianceServiceGetNotabeneVASPSearch
     */
    readonly filterByJurisdictionStatus?: string
}

/**
 * ComplianceApi - object-oriented interface
 * @export
 * @class ComplianceApi
 * @extends {BaseAPI}
 */
export class ComplianceApi extends BaseAPI {
    /**
     * Create a new notabene customer token
     * @summary Create customer tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public complianceServiceGetNotabeneCustomerToken(options?: RawAxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).complianceServiceGetNotabeneCustomerToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for VASPs using the notabene search endpoint
     * @summary Search for VASPs
     * @param {ComplianceApiComplianceServiceGetNotabeneVASPSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public complianceServiceGetNotabeneVASPSearch(requestParameters: ComplianceApiComplianceServiceGetNotabeneVASPSearchRequest = {}, options?: RawAxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).complianceServiceGetNotabeneVASPSearch(requestParameters.q, requestParameters.emailDomain, requestParameters.chainalysisName, requestParameters.hasAdmin, requestParameters.badge, requestParameters.jurisdictions, requestParameters.fields, requestParameters.page, requestParameters.perPage, requestParameters.order, requestParameters.all, requestParameters.listingType, requestParameters.includeUncheckedVasps, requestParameters.includeActiveSendersOnly, requestParameters.includeActiveReceiversOnly, requestParameters.regulatoryStatus, requestParameters.networkStatus, requestParameters.asset, requestParameters.reviewedByVaspDid, requestParameters.showJurisdictionStatus, requestParameters.reviewValue, requestParameters.reviewIncludeInWidget, requestParameters.filterByJurisdictionStatus, options).then((request) => request(this.axios, this.basePath));
    }
}

