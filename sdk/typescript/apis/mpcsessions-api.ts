/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { SESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018 } from '../models';
// @ts-ignore
import type { V2GetDeviceSessionDataResponse } from '../models';
// @ts-ignore
import type { V2Session } from '../models';
// @ts-ignore
import type { V2SessionSet } from '../models';
// @ts-ignore
import type { V2SessionSetStatus } from '../models';
/**
 * MPCSessionsApi - axios parameter creator
 * @export
 */
export const MPCSessionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get device session data
         * @summary Get device session data
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceGetDeviceSessionData: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('mpcServiceGetDeviceSessionData', 'sessionId', sessionId)
            const localVarPath = `/v2/mpc/device/sessions/{sessionId}/data`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get session
         * @summary Get session
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceGetSession: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('mpcServiceGetSession', 'sessionId', sessionId)
            const localVarPath = `/v2/mpc/device/sessions/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List session sets
         * @summary List session sets
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListSessionSets: async (quorumId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quorumId' is not null or undefined
            assertParamExists('mpcServiceListSessionSets', 'quorumId', quorumId)
            const localVarPath = `/v2/mpc/sessions/{quorumId}`
                .replace(`{${"quorumId"}}`, encodeURIComponent(String(quorumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List sessions for device
         * @summary List sessions for device
         * @param {MpcServiceListSessionsForDeviceStateFilterEnum} stateFilter  - SESSION_STATE_SUBMITTED: Session has completed &amp; submitted data from this device  - SESSION_STATE_COMPLETED: Session has completed but this device did not submit data  - SESSION_STATE_SUPER: FSM USE ONLY: Super state  - SESSION_STATE_INITIAL: FSM USE ONLY: Initial state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListSessionsForDevice: async (stateFilter: MpcServiceListSessionsForDeviceStateFilterEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stateFilter' is not null or undefined
            assertParamExists('mpcServiceListSessionsForDevice', 'stateFilter', stateFilter)
            const localVarPath = `/v2/mpc/device/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Poll session set status
         * @summary Poll session set status
         * @param {string} sessionSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServicePollSessionSetStatus: async (sessionSetId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionSetId' is not null or undefined
            assertParamExists('mpcServicePollSessionSetStatus', 'sessionSetId', sessionSetId)
            const localVarPath = `/v2/mpc/sessions/{sessionSetId}/status`
                .replace(`{${"sessionSetId"}}`, encodeURIComponent(String(sessionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit session
         * @summary Submit session
         * @param {string} sessionId 
         * @param {SESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018} sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceSubmitSession: async (sessionId: string, sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018: SESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('mpcServiceSubmitSession', 'sessionId', sessionId)
            // verify required parameter 'sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018' is not null or undefined
            assertParamExists('mpcServiceSubmitSession', 'sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018', sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018)
            const localVarPath = `/v2/mpc/device/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MPCSessionsApi - functional programming interface
 * @export
 */
export const MPCSessionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MPCSessionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get device session data
         * @summary Get device session data
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceGetDeviceSessionData(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetDeviceSessionDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceGetDeviceSessionData(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCSessionsApi.mpcServiceGetDeviceSessionData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get session
         * @summary Get session
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceGetSession(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceGetSession(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCSessionsApi.mpcServiceGetSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List session sets
         * @summary List session sets
         * @param {string} quorumId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceListSessionSets(quorumId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2SessionSet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceListSessionSets(quorumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCSessionsApi.mpcServiceListSessionSets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List sessions for device
         * @summary List sessions for device
         * @param {MpcServiceListSessionsForDeviceStateFilterEnum} stateFilter  - SESSION_STATE_SUBMITTED: Session has completed &amp; submitted data from this device  - SESSION_STATE_COMPLETED: Session has completed but this device did not submit data  - SESSION_STATE_SUPER: FSM USE ONLY: Super state  - SESSION_STATE_INITIAL: FSM USE ONLY: Initial state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceListSessionsForDevice(stateFilter: MpcServiceListSessionsForDeviceStateFilterEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2Session>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceListSessionsForDevice(stateFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCSessionsApi.mpcServiceListSessionsForDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Poll session set status
         * @summary Poll session set status
         * @param {string} sessionSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServicePollSessionSetStatus(sessionSetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SessionSetStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServicePollSessionSetStatus(sessionSetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCSessionsApi.mpcServicePollSessionSetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit session
         * @summary Submit session
         * @param {string} sessionId 
         * @param {SESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018} sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mpcServiceSubmitSession(sessionId: string, sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018: SESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mpcServiceSubmitSession(sessionId, sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MPCSessionsApi.mpcServiceSubmitSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MPCSessionsApi - factory interface
 * @export
 */
export const MPCSessionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MPCSessionsApiFp(configuration)
    return {
        /**
         * Get device session data
         * @summary Get device session data
         * @param {MPCSessionsApiMpcServiceGetDeviceSessionDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceGetDeviceSessionData(requestParameters: MPCSessionsApiMpcServiceGetDeviceSessionDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2GetDeviceSessionDataResponse> {
            return localVarFp.mpcServiceGetDeviceSessionData(requestParameters.sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get session
         * @summary Get session
         * @param {MPCSessionsApiMpcServiceGetSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceGetSession(requestParameters: MPCSessionsApiMpcServiceGetSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Session> {
            return localVarFp.mpcServiceGetSession(requestParameters.sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * List session sets
         * @summary List session sets
         * @param {MPCSessionsApiMpcServiceListSessionSetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListSessionSets(requestParameters: MPCSessionsApiMpcServiceListSessionSetsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2SessionSet>> {
            return localVarFp.mpcServiceListSessionSets(requestParameters.quorumId, options).then((request) => request(axios, basePath));
        },
        /**
         * List sessions for device
         * @summary List sessions for device
         * @param {MPCSessionsApiMpcServiceListSessionsForDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceListSessionsForDevice(requestParameters: MPCSessionsApiMpcServiceListSessionsForDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V2Session>> {
            return localVarFp.mpcServiceListSessionsForDevice(requestParameters.stateFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Poll session set status
         * @summary Poll session set status
         * @param {MPCSessionsApiMpcServicePollSessionSetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServicePollSessionSetStatus(requestParameters: MPCSessionsApiMpcServicePollSessionSetStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SessionSetStatus> {
            return localVarFp.mpcServicePollSessionSetStatus(requestParameters.sessionSetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit session
         * @summary Submit session
         * @param {MPCSessionsApiMpcServiceSubmitSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mpcServiceSubmitSession(requestParameters: MPCSessionsApiMpcServiceSubmitSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2Session> {
            return localVarFp.mpcServiceSubmitSession(requestParameters.sessionId, requestParameters.sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mpcServiceGetDeviceSessionData operation in MPCSessionsApi.
 * @export
 * @interface MPCSessionsApiMpcServiceGetDeviceSessionDataRequest
 */
export interface MPCSessionsApiMpcServiceGetDeviceSessionDataRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCSessionsApiMpcServiceGetDeviceSessionData
     */
    readonly sessionId: string
}

/**
 * Request parameters for mpcServiceGetSession operation in MPCSessionsApi.
 * @export
 * @interface MPCSessionsApiMpcServiceGetSessionRequest
 */
export interface MPCSessionsApiMpcServiceGetSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCSessionsApiMpcServiceGetSession
     */
    readonly sessionId: string
}

/**
 * Request parameters for mpcServiceListSessionSets operation in MPCSessionsApi.
 * @export
 * @interface MPCSessionsApiMpcServiceListSessionSetsRequest
 */
export interface MPCSessionsApiMpcServiceListSessionSetsRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCSessionsApiMpcServiceListSessionSets
     */
    readonly quorumId: string
}

/**
 * Request parameters for mpcServiceListSessionsForDevice operation in MPCSessionsApi.
 * @export
 * @interface MPCSessionsApiMpcServiceListSessionsForDeviceRequest
 */
export interface MPCSessionsApiMpcServiceListSessionsForDeviceRequest {
    /**
     *  - SESSION_STATE_SUBMITTED: Session has completed &amp; submitted data from this device  - SESSION_STATE_COMPLETED: Session has completed but this device did not submit data  - SESSION_STATE_SUPER: FSM USE ONLY: Super state  - SESSION_STATE_INITIAL: FSM USE ONLY: Initial state
     * @type {'SESSION_STATE_CREATED' | 'SESSION_STATE_PENDING' | 'SESSION_STATE_SUBMITTED' | 'SESSION_STATE_COMPLETED' | 'SESSION_STATE_TIMED_OUT' | 'SESSION_STATE_FAILED' | 'SESSION_STATE_PROCESSED' | 'SESSION_STATE_SUPER' | 'SESSION_STATE_INITIAL'}
     * @memberof MPCSessionsApiMpcServiceListSessionsForDevice
     */
    readonly stateFilter: MpcServiceListSessionsForDeviceStateFilterEnum
}

/**
 * Request parameters for mpcServicePollSessionSetStatus operation in MPCSessionsApi.
 * @export
 * @interface MPCSessionsApiMpcServicePollSessionSetStatusRequest
 */
export interface MPCSessionsApiMpcServicePollSessionSetStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCSessionsApiMpcServicePollSessionSetStatus
     */
    readonly sessionSetId: string
}

/**
 * Request parameters for mpcServiceSubmitSession operation in MPCSessionsApi.
 * @export
 * @interface MPCSessionsApiMpcServiceSubmitSessionRequest
 */
export interface MPCSessionsApiMpcServiceSubmitSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof MPCSessionsApiMpcServiceSubmitSession
     */
    readonly sessionId: string

    /**
     * 
     * @type {SESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018}
     * @memberof MPCSessionsApiMpcServiceSubmitSession
     */
    readonly sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018: SESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018
}

/**
 * MPCSessionsApi - object-oriented interface
 * @export
 * @class MPCSessionsApi
 * @extends {BaseAPI}
 */
export class MPCSessionsApi extends BaseAPI {
    /**
     * Get device session data
     * @summary Get device session data
     * @param {MPCSessionsApiMpcServiceGetDeviceSessionDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCSessionsApi
     */
    public mpcServiceGetDeviceSessionData(requestParameters: MPCSessionsApiMpcServiceGetDeviceSessionDataRequest, options?: RawAxiosRequestConfig) {
        return MPCSessionsApiFp(this.configuration).mpcServiceGetDeviceSessionData(requestParameters.sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get session
     * @summary Get session
     * @param {MPCSessionsApiMpcServiceGetSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCSessionsApi
     */
    public mpcServiceGetSession(requestParameters: MPCSessionsApiMpcServiceGetSessionRequest, options?: RawAxiosRequestConfig) {
        return MPCSessionsApiFp(this.configuration).mpcServiceGetSession(requestParameters.sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List session sets
     * @summary List session sets
     * @param {MPCSessionsApiMpcServiceListSessionSetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCSessionsApi
     */
    public mpcServiceListSessionSets(requestParameters: MPCSessionsApiMpcServiceListSessionSetsRequest, options?: RawAxiosRequestConfig) {
        return MPCSessionsApiFp(this.configuration).mpcServiceListSessionSets(requestParameters.quorumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List sessions for device
     * @summary List sessions for device
     * @param {MPCSessionsApiMpcServiceListSessionsForDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCSessionsApi
     */
    public mpcServiceListSessionsForDevice(requestParameters: MPCSessionsApiMpcServiceListSessionsForDeviceRequest, options?: RawAxiosRequestConfig) {
        return MPCSessionsApiFp(this.configuration).mpcServiceListSessionsForDevice(requestParameters.stateFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Poll session set status
     * @summary Poll session set status
     * @param {MPCSessionsApiMpcServicePollSessionSetStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCSessionsApi
     */
    public mpcServicePollSessionSetStatus(requestParameters: MPCSessionsApiMpcServicePollSessionSetStatusRequest, options?: RawAxiosRequestConfig) {
        return MPCSessionsApiFp(this.configuration).mpcServicePollSessionSetStatus(requestParameters.sessionSetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit session
     * @summary Submit session
     * @param {MPCSessionsApiMpcServiceSubmitSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MPCSessionsApi
     */
    public mpcServiceSubmitSession(requestParameters: MPCSessionsApiMpcServiceSubmitSessionRequest, options?: RawAxiosRequestConfig) {
        return MPCSessionsApiFp(this.configuration).mpcServiceSubmitSession(requestParameters.sessionId, requestParameters.sESSIONSubmitSessionTODOWeShouldCheckTheDeviceIDFromTheJWTToEnsureUserASDeviceXDoesnTAccidentallySubmitOnBehalfOfDeviceYForTheSameUserHttpsPalisadeIncAtlassianNetBrowseENG1018, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MpcServiceListSessionsForDeviceStateFilterEnum = {
    SessionStateCreated: 'SESSION_STATE_CREATED',
    SessionStatePending: 'SESSION_STATE_PENDING',
    SessionStateSubmitted: 'SESSION_STATE_SUBMITTED',
    SessionStateCompleted: 'SESSION_STATE_COMPLETED',
    SessionStateTimedOut: 'SESSION_STATE_TIMED_OUT',
    SessionStateFailed: 'SESSION_STATE_FAILED',
    SessionStateProcessed: 'SESSION_STATE_PROCESSED',
    SessionStateSuper: 'SESSION_STATE_SUPER',
    SessionStateInitial: 'SESSION_STATE_INITIAL'
} as const;
export type MpcServiceListSessionsForDeviceStateFilterEnum = typeof MpcServiceListSessionsForDeviceStateFilterEnum[keyof typeof MpcServiceListSessionsForDeviceStateFilterEnum];
