/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V2ApprovalGroup } from '../models';
// @ts-ignore
import type { V2EligibleApprover } from '../models';
// @ts-ignore
import type { V2GetKeyApproversResponse } from '../models';
// @ts-ignore
import type { V2GetOrgApproversResponse } from '../models';
/**
 * ApproversApi - axios parameter creator
 * @export
 */
export const ApproversApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of approvers within the approval set configured for the wallet and optionally source type
         * @summary List wallet approvers
         * @param {string} id The wallet ID
         * @param {ApprovalServiceGetKeyApproversSourceTypeEnum} [sourceType] The source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceGetKeyApprovers: async (id: string, sourceType?: ApprovalServiceGetKeyApproversSourceTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approvalServiceGetKeyApprovers', 'id', id)
            const localVarPath = `/v2/approvers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (sourceType !== undefined) {
                localVarQueryParameter['sourceType'] = sourceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of approvers within the approval set configured for the organization and optionally source type
         * @summary List organization approvers
         * @param {ApprovalServiceGetOrgApproversSourceTypeEnum} [sourceType] The source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceGetOrgApprovers: async (sourceType?: ApprovalServiceGetOrgApproversSourceTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/approvers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (sourceType !== undefined) {
                localVarQueryParameter['sourceType'] = sourceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of eligible approvers
         * @summary List eligible approvers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceListEligibleApprovers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/approvers/eligible`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the list of approvers within the approval set configured for the wallet and source type
         * @summary Update wallet approvers
         * @param {string} id The wallet ID
         * @param {V2ApprovalGroup} v2ApprovalGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceUpdateKeyApprovers: async (id: string, v2ApprovalGroup: V2ApprovalGroup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approvalServiceUpdateKeyApprovers', 'id', id)
            // verify required parameter 'v2ApprovalGroup' is not null or undefined
            assertParamExists('approvalServiceUpdateKeyApprovers', 'v2ApprovalGroup', v2ApprovalGroup)
            const localVarPath = `/v2/approvers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ApprovalGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the list of approvers within the approval set configured for the organization and source type
         * @summary Update organization approvers
         * @param {V2ApprovalGroup} v2ApprovalGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceUpdateOrgApprovers: async (v2ApprovalGroup: V2ApprovalGroup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v2ApprovalGroup' is not null or undefined
            assertParamExists('approvalServiceUpdateOrgApprovers', 'v2ApprovalGroup', v2ApprovalGroup)
            const localVarPath = `/v2/approvers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2ApprovalGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApproversApi - functional programming interface
 * @export
 */
export const ApproversApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApproversApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of approvers within the approval set configured for the wallet and optionally source type
         * @summary List wallet approvers
         * @param {string} id The wallet ID
         * @param {ApprovalServiceGetKeyApproversSourceTypeEnum} [sourceType] The source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceGetKeyApprovers(id: string, sourceType?: ApprovalServiceGetKeyApproversSourceTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetKeyApproversResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceGetKeyApprovers(id, sourceType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproversApi.approvalServiceGetKeyApprovers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the list of approvers within the approval set configured for the organization and optionally source type
         * @summary List organization approvers
         * @param {ApprovalServiceGetOrgApproversSourceTypeEnum} [sourceType] The source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceGetOrgApprovers(sourceType?: ApprovalServiceGetOrgApproversSourceTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2GetOrgApproversResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceGetOrgApprovers(sourceType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproversApi.approvalServiceGetOrgApprovers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the list of eligible approvers
         * @summary List eligible approvers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceListEligibleApprovers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V2EligibleApprover>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceListEligibleApprovers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproversApi.approvalServiceListEligibleApprovers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the list of approvers within the approval set configured for the wallet and source type
         * @summary Update wallet approvers
         * @param {string} id The wallet ID
         * @param {V2ApprovalGroup} v2ApprovalGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceUpdateKeyApprovers(id: string, v2ApprovalGroup: V2ApprovalGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ApprovalGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceUpdateKeyApprovers(id, v2ApprovalGroup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproversApi.approvalServiceUpdateKeyApprovers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the list of approvers within the approval set configured for the organization and source type
         * @summary Update organization approvers
         * @param {V2ApprovalGroup} v2ApprovalGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvalServiceUpdateOrgApprovers(v2ApprovalGroup: V2ApprovalGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ApprovalGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvalServiceUpdateOrgApprovers(v2ApprovalGroup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApproversApi.approvalServiceUpdateOrgApprovers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApproversApi - factory interface
 * @export
 */
export const ApproversApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApproversApiFp(configuration)
    return {
        /**
         * Returns the list of approvers within the approval set configured for the wallet and optionally source type
         * @summary List wallet approvers
         * @param {ApproversApiApprovalServiceGetKeyApproversRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceGetKeyApprovers(requestParameters: ApproversApiApprovalServiceGetKeyApproversRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2GetKeyApproversResponse> {
            return localVarFp.approvalServiceGetKeyApprovers(requestParameters.id, requestParameters.sourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of approvers within the approval set configured for the organization and optionally source type
         * @summary List organization approvers
         * @param {ApproversApiApprovalServiceGetOrgApproversRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceGetOrgApprovers(requestParameters: ApproversApiApprovalServiceGetOrgApproversRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2GetOrgApproversResponse> {
            return localVarFp.approvalServiceGetOrgApprovers(requestParameters.sourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of eligible approvers
         * @summary List eligible approvers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceListEligibleApprovers(options?: RawAxiosRequestConfig): AxiosPromise<Array<V2EligibleApprover>> {
            return localVarFp.approvalServiceListEligibleApprovers(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the list of approvers within the approval set configured for the wallet and source type
         * @summary Update wallet approvers
         * @param {ApproversApiApprovalServiceUpdateKeyApproversRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceUpdateKeyApprovers(requestParameters: ApproversApiApprovalServiceUpdateKeyApproversRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ApprovalGroup> {
            return localVarFp.approvalServiceUpdateKeyApprovers(requestParameters.id, requestParameters.v2ApprovalGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the list of approvers within the approval set configured for the organization and source type
         * @summary Update organization approvers
         * @param {ApproversApiApprovalServiceUpdateOrgApproversRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvalServiceUpdateOrgApprovers(requestParameters: ApproversApiApprovalServiceUpdateOrgApproversRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ApprovalGroup> {
            return localVarFp.approvalServiceUpdateOrgApprovers(requestParameters.v2ApprovalGroup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approvalServiceGetKeyApprovers operation in ApproversApi.
 * @export
 * @interface ApproversApiApprovalServiceGetKeyApproversRequest
 */
export interface ApproversApiApprovalServiceGetKeyApproversRequest {
    /**
     * The wallet ID
     * @type {string}
     * @memberof ApproversApiApprovalServiceGetKeyApprovers
     */
    readonly id: string

    /**
     * The source type
     * @type {'TRANSACTION' | 'DEVICE' | 'API_CREDENTIAL' | 'ALLOW_LIST_ENTRY' | 'POLICY' | 'USER' | 'APPROVAL_GROUP' | 'ADDRESS'}
     * @memberof ApproversApiApprovalServiceGetKeyApprovers
     */
    readonly sourceType?: ApprovalServiceGetKeyApproversSourceTypeEnum
}

/**
 * Request parameters for approvalServiceGetOrgApprovers operation in ApproversApi.
 * @export
 * @interface ApproversApiApprovalServiceGetOrgApproversRequest
 */
export interface ApproversApiApprovalServiceGetOrgApproversRequest {
    /**
     * The source type
     * @type {'TRANSACTION' | 'DEVICE' | 'API_CREDENTIAL' | 'ALLOW_LIST_ENTRY' | 'POLICY' | 'USER' | 'APPROVAL_GROUP' | 'ADDRESS'}
     * @memberof ApproversApiApprovalServiceGetOrgApprovers
     */
    readonly sourceType?: ApprovalServiceGetOrgApproversSourceTypeEnum
}

/**
 * Request parameters for approvalServiceUpdateKeyApprovers operation in ApproversApi.
 * @export
 * @interface ApproversApiApprovalServiceUpdateKeyApproversRequest
 */
export interface ApproversApiApprovalServiceUpdateKeyApproversRequest {
    /**
     * The wallet ID
     * @type {string}
     * @memberof ApproversApiApprovalServiceUpdateKeyApprovers
     */
    readonly id: string

    /**
     * 
     * @type {V2ApprovalGroup}
     * @memberof ApproversApiApprovalServiceUpdateKeyApprovers
     */
    readonly v2ApprovalGroup: V2ApprovalGroup
}

/**
 * Request parameters for approvalServiceUpdateOrgApprovers operation in ApproversApi.
 * @export
 * @interface ApproversApiApprovalServiceUpdateOrgApproversRequest
 */
export interface ApproversApiApprovalServiceUpdateOrgApproversRequest {
    /**
     * 
     * @type {V2ApprovalGroup}
     * @memberof ApproversApiApprovalServiceUpdateOrgApprovers
     */
    readonly v2ApprovalGroup: V2ApprovalGroup
}

/**
 * ApproversApi - object-oriented interface
 * @export
 * @class ApproversApi
 * @extends {BaseAPI}
 */
export class ApproversApi extends BaseAPI {
    /**
     * Returns the list of approvers within the approval set configured for the wallet and optionally source type
     * @summary List wallet approvers
     * @param {ApproversApiApprovalServiceGetKeyApproversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApproversApi
     */
    public approvalServiceGetKeyApprovers(requestParameters: ApproversApiApprovalServiceGetKeyApproversRequest, options?: RawAxiosRequestConfig) {
        return ApproversApiFp(this.configuration).approvalServiceGetKeyApprovers(requestParameters.id, requestParameters.sourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of approvers within the approval set configured for the organization and optionally source type
     * @summary List organization approvers
     * @param {ApproversApiApprovalServiceGetOrgApproversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApproversApi
     */
    public approvalServiceGetOrgApprovers(requestParameters: ApproversApiApprovalServiceGetOrgApproversRequest = {}, options?: RawAxiosRequestConfig) {
        return ApproversApiFp(this.configuration).approvalServiceGetOrgApprovers(requestParameters.sourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of eligible approvers
     * @summary List eligible approvers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApproversApi
     */
    public approvalServiceListEligibleApprovers(options?: RawAxiosRequestConfig) {
        return ApproversApiFp(this.configuration).approvalServiceListEligibleApprovers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the list of approvers within the approval set configured for the wallet and source type
     * @summary Update wallet approvers
     * @param {ApproversApiApprovalServiceUpdateKeyApproversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApproversApi
     */
    public approvalServiceUpdateKeyApprovers(requestParameters: ApproversApiApprovalServiceUpdateKeyApproversRequest, options?: RawAxiosRequestConfig) {
        return ApproversApiFp(this.configuration).approvalServiceUpdateKeyApprovers(requestParameters.id, requestParameters.v2ApprovalGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the list of approvers within the approval set configured for the organization and source type
     * @summary Update organization approvers
     * @param {ApproversApiApprovalServiceUpdateOrgApproversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApproversApi
     */
    public approvalServiceUpdateOrgApprovers(requestParameters: ApproversApiApprovalServiceUpdateOrgApproversRequest, options?: RawAxiosRequestConfig) {
        return ApproversApiFp(this.configuration).approvalServiceUpdateOrgApprovers(requestParameters.v2ApprovalGroup, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApprovalServiceGetKeyApproversSourceTypeEnum = {
    Transaction: 'TRANSACTION',
    Device: 'DEVICE',
    ApiCredential: 'API_CREDENTIAL',
    AllowListEntry: 'ALLOW_LIST_ENTRY',
    Policy: 'POLICY',
    User: 'USER',
    ApprovalGroup: 'APPROVAL_GROUP',
    Address: 'ADDRESS'
} as const;
export type ApprovalServiceGetKeyApproversSourceTypeEnum = typeof ApprovalServiceGetKeyApproversSourceTypeEnum[keyof typeof ApprovalServiceGetKeyApproversSourceTypeEnum];
/**
 * @export
 */
export const ApprovalServiceGetOrgApproversSourceTypeEnum = {
    Transaction: 'TRANSACTION',
    Device: 'DEVICE',
    ApiCredential: 'API_CREDENTIAL',
    AllowListEntry: 'ALLOW_LIST_ENTRY',
    Policy: 'POLICY',
    User: 'USER',
    ApprovalGroup: 'APPROVAL_GROUP',
    Address: 'ADDRESS'
} as const;
export type ApprovalServiceGetOrgApproversSourceTypeEnum = typeof ApprovalServiceGetOrgApproversSourceTypeEnum[keyof typeof ApprovalServiceGetOrgApproversSourceTypeEnum];
