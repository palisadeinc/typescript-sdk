/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { Commonv2Asset } from './commonv2-asset';
// May contain unused imports in some cases
// @ts-ignore
import type { Transactionsv2Address } from './transactionsv2-address';
// May contain unused imports in some cases
// @ts-ignore
import type { Transactionsv2TransactionAction } from './transactionsv2-transaction-action';
// May contain unused imports in some cases
// @ts-ignore
import type { Transactionsv2TransactionStatus } from './transactionsv2-transaction-status';
// May contain unused imports in some cases
// @ts-ignore
import type { V2AssetChange } from './v2-asset-change';
// May contain unused imports in some cases
// @ts-ignore
import type { V2Blockchain } from './v2-blockchain';
// May contain unused imports in some cases
// @ts-ignore
import type { V2FreezeInfo } from './v2-freeze-info';
// May contain unused imports in some cases
// @ts-ignore
import type { V2SigningPayload } from './v2-signing-payload';
// May contain unused imports in some cases
// @ts-ignore
import type { V2XRPTransactionConfig } from './v2-xrptransaction-config';

/**
 * 
 * @export
 * @interface Transactionsv2Transaction
 */
export interface Transactionsv2Transaction {
    /**
     * The transaction ID
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'id': string;
    /**
     * The wallet ID
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'walletId': string;
    /**
     * The vault ID
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'vaultId': string;
    /**
     * The organization ID
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'organizationId': string;
    /**
     * The ID of the user that created the transaction
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'createdBy': string;
    /**
     * The date and time the transaction was created
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'createdAt': string;
    /**
     * The date and time the transaction was updated
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'updatedAt': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Transactionsv2Transaction
     */
    'attributes'?: { [key: string]: string; };
    /**
     * 
     * @type {Transactionsv2TransactionStatus}
     * @memberof Transactionsv2Transaction
     */
    'status': Transactionsv2TransactionStatus;
    /**
     * 
     * @type {Transactionsv2TransactionAction}
     * @memberof Transactionsv2Transaction
     */
    'action': Transactionsv2TransactionAction;
    /**
     * External ID of this transaction, unique to the organization
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'externalId'?: string;
    /**
     * The correlation ID of the transaction, used to link related transactions
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'correlationId'?: string;
    /**
     * 
     * @type {Commonv2Asset}
     * @memberof Transactionsv2Transaction
     */
    'asset': Commonv2Asset;
    /**
     * 
     * @type {Commonv2Asset}
     * @memberof Transactionsv2Transaction
     */
    'feeAsset': Commonv2Asset;
    /**
     * 
     * @type {V2Blockchain}
     * @memberof Transactionsv2Transaction
     */
    'blockchain': V2Blockchain;
    /**
     * The destination address
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'destinationAddress'?: string;
    /**
     * 
     * @type {Transactionsv2Address}
     * @memberof Transactionsv2Transaction
     */
    'destination'?: Transactionsv2Address;
    /**
     * The origin address
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'originAddress': string;
    /**
     * 
     * @type {Transactionsv2Address}
     * @memberof Transactionsv2Transaction
     */
    'origin': Transactionsv2Address;
    /**
     * The quantity of the asset to transfer
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'qty': string;
    /**
     * The maximum network fee to pay for this transaction in base asset units (eg ETH for Ethereum)
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'feeQtyLimit'?: string;
    /**
     * The blockchain nonce/sequence to use
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'sequence'?: string;
    /**
     * The encoded transaction
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'encodedTransaction'?: string;
    /**
     * Whether to only sign the transaction, or also publish it to the blockchain
     * @type {boolean}
     * @memberof Transactionsv2Transaction
     */
    'signOnly': boolean;
    /**
     * 
     * @type {V2XRPTransactionConfig}
     * @memberof Transactionsv2Transaction
     */
    'config'?: V2XRPTransactionConfig;
    /**
     * 
     * @type {V2FreezeInfo}
     * @memberof Transactionsv2Transaction
     */
    'freezeInfo': V2FreezeInfo;
    /**
     * The actual network fee for this transaction in base asset units (eg ETH for Ethereum)
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'feeQty'?: string;
    /**
     * The transaction hash
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'hash'?: string;
    /**
     * The transaction signing hash
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'signingHash'?: string;
    /**
     * The transaction signature
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'signature'?: string;
    /**
     * The transaction type
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'transactionType'?: string;
    /**
     * The reasons for transaction failure
     * @type {Array<string>}
     * @memberof Transactionsv2Transaction
     */
    'reasons'?: Array<string>;
    /**
     * The canonical transaction signature
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'canonicalSignature'?: string;
    /**
     * The signed transaction (multi-sign is not supported)
     * @type {string}
     * @memberof Transactionsv2Transaction
     */
    'signedTransaction'?: string;
    /**
     * Proposed asset changes
     * @type {Array<V2AssetChange>}
     * @memberof Transactionsv2Transaction
     */
    'proposedAssetChanges'?: Array<V2AssetChange>;
    /**
     * Confirmed asset changes
     * @type {Array<V2AssetChange>}
     * @memberof Transactionsv2Transaction
     */
    'confirmedAssetChanges'?: Array<V2AssetChange>;
    /**
     * Multiple signing payloads for UTXO-based transactions, one per input
     * @type {Array<V2SigningPayload>}
     * @memberof Transactionsv2Transaction
     */
    'signingPayloads'?: Array<V2SigningPayload>;
}



