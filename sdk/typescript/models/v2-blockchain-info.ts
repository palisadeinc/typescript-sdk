/* tslint:disable */
/* eslint-disable */
/**
 * Palisade API
 * The Palisade API enables programmatic interaction with the various features of the Palisade platform
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { V2Blockchain } from './v2-blockchain';
// May contain unused imports in some cases
// @ts-ignore
import type { V2BlockchainStatus } from './v2-blockchain-status';
// May contain unused imports in some cases
// @ts-ignore
import type { V2ChecksumType } from './v2-checksum-type';
// May contain unused imports in some cases
// @ts-ignore
import type { V2Explorer } from './v2-explorer';
// May contain unused imports in some cases
// @ts-ignore
import type { V2KeyAlgorithm } from './v2-key-algorithm';
// May contain unused imports in some cases
// @ts-ignore
import type { V2Keystore } from './v2-keystore';
// May contain unused imports in some cases
// @ts-ignore
import type { V2RPCEndpoint } from './v2-rpcendpoint';

/**
 * 
 * @export
 * @interface V2BlockchainInfo
 */
export interface V2BlockchainInfo {
    /**
     * 
     * @type {V2Blockchain}
     * @memberof V2BlockchainInfo
     */
    'id': V2Blockchain;
    /**
     * Human-readable name of the blockchain
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'name': string;
    /**
     * The CAIP-2 namespace identifier
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'namespace': string;
    /**
     * The chain ID (supports large numbers)
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'chainId': string;
    /**
     * RPC endpoints for blockchain connectivity
     * @type {Array<V2RPCEndpoint>}
     * @memberof V2BlockchainInfo
     */
    'rpcEndpoints'?: Array<V2RPCEndpoint>;
    /**
     * WalletConnect event types supported by this blockchain
     * @type {Array<string>}
     * @memberof V2BlockchainInfo
     */
    'supportedEvents'?: Array<string>;
    /**
     * WalletConnect methods supported by this blockchain
     * @type {Array<string>}
     * @memberof V2BlockchainInfo
     */
    'supportedMethods'?: Array<string>;
    /**
     * Supported keystore types (HSM, MPC)
     * @type {Array<V2Keystore>}
     * @memberof V2BlockchainInfo
     */
    'keystoreTypes'?: Array<V2Keystore>;
    /**
     * Supported key algorithms
     * @type {Array<V2KeyAlgorithm>}
     * @memberof V2BlockchainInfo
     */
    'keyAlgorithms'?: Array<V2KeyAlgorithm>;
    /**
     * Message queue routing key base
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'routing': string;
    /**
     * 
     * @type {V2BlockchainStatus}
     * @memberof V2BlockchainInfo
     */
    'status': V2BlockchainStatus;
    /**
     * Whether this blockchain supports WalletConnect
     * @type {boolean}
     * @memberof V2BlockchainInfo
     */
    'supportsWalletConnect'?: boolean;
    /**
     * Blockchain explorers for viewing transactions and addresses
     * @type {Array<V2Explorer>}
     * @memberof V2BlockchainInfo
     */
    'explorers'?: Array<V2Explorer>;
    /**
     * When the blockchain was created
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'createdAt'?: string;
    /**
     * When the blockchain was last updated
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'updatedAt'?: string;
    /**
     * Chain identifier (e.g., \'ethereum-mainnet\', \'ethereum-goerli\')
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'chain'?: string;
    /**
     * CoinGecko platform identifier for sync (optional for testnets)
     * @type {string}
     * @memberof V2BlockchainInfo
     */
    'coingeckoPlatformId'?: string;
    /**
     * 
     * @type {V2ChecksumType}
     * @memberof V2BlockchainInfo
     */
    'checksumType'?: V2ChecksumType;
    /**
     * Average block time in seconds
     * @type {number}
     * @memberof V2BlockchainInfo
     */
    'blockTime'?: number;
    /**
     * Recommended number of confirmations for finality
     * @type {number}
     * @memberof V2BlockchainInfo
     */
    'confirmationBlocks'?: number;
}



